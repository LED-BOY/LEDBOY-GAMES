
C:\Users\gross\AppData\Local\Temp\arduino_build_772282/LedBoyGamePackA_2.2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	6a c1       	rjmp	.+724    	; 0x2d6 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	9c c1       	rjmp	.+824    	; 0x33e <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	9a c1       	rjmp	.+820    	; 0x33e <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__vector_3>
../../../../crt1/gcrt1.S:70
      10:	96 c1       	rjmp	.+812    	; 0x33e <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	94 c1       	rjmp	.+808    	; 0x33e <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__vector_6>
../../../../crt1/gcrt1.S:73
      1c:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__vector_7>
../../../../crt1/gcrt1.S:74
      20:	8e c1       	rjmp	.+796    	; 0x33e <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	8c c1       	rjmp	.+792    	; 0x33e <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	8a c1       	rjmp	.+788    	; 0x33e <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	88 c1       	rjmp	.+784    	; 0x33e <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	86 c1       	rjmp	.+780    	; 0x33e <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__vector_13>
../../../../crt1/gcrt1.S:80
      38:	82 c1       	rjmp	.+772    	; 0x33e <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	80 c1       	rjmp	.+768    	; 0x33e <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	7e c1       	rjmp	.+764    	; 0x33e <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	7c c1       	rjmp	.+760    	; 0x33e <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	7a c1       	rjmp	.+756    	; 0x33e <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	78 c1       	rjmp	.+752    	; 0x33e <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	76 c1       	rjmp	.+748    	; 0x33e <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	74 c1       	rjmp	.+744    	; 0x33e <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	72 c1       	rjmp	.+740    	; 0x33e <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	70 c1       	rjmp	.+736    	; 0x33e <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	6e c1       	rjmp	.+732    	; 0x33e <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	6c c1       	rjmp	.+728    	; 0x33e <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	6a c1       	rjmp	.+724    	; 0x33e <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	68 c1       	rjmp	.+720    	; 0x33e <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	66 c1       	rjmp	.+716    	; 0x33e <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	64 c1       	rjmp	.+712    	; 0x33e <__bad_interrupt>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	62 c1       	rjmp	.+708    	; 0x33e <__bad_interrupt>
	...

0000007c <__trampolines_end>:
__trampolines_start():
      7c:	09 02       	muls	r16, r25
      7e:	04 06       	cpc	r0, r20
      80:	0b 0d       	add	r16, r11
      82:	0f 11       	cpse	r16, r15
      84:	18 09       	Address 0x00000084 is out of bounds.
.word	0xffff	; ????

00000085 <enemies7>:
      85:	09 01 03 05 0b 0d 0f 16 18                          .........

0000008e <enemies6>:
      8e:	0a 02 04 06 0b 0d 0f 11 16 1a                       ..........

00000098 <enemies5>:
      98:	08 0b 0d 0f 11 16 18 1a                             ........

000000a0 <enemies4>:
      a0:	08 03 05 0c 0e 10 17 19                             ........

000000a8 <enemies3>:
      a8:	08 02 04 06 0d 0f 17 19                             ........

000000b0 <enemies2>:
      b0:	0a 02 04 06 0c 0e 10 16 18 1a                       ..........

000000ba <enemies1>:
      ba:	0a 02 06 0b 0d 0f 11 16 18 1a                       ..........

000000c4 <enemies0>:
      c4:	09 02 04 06 0d 0f 16 18 1a                          .........

000000cd <number9>:
      cd:	0b 00 01 02 0a 0c 14 15 16 20 2a                    ......... *

000000d8 <number8>:
      d8:	0e 00 01 02 0a 0c 14 15 16 1e 20 28 29 2a           .......... ()*

000000e6 <number7>:
      e6:	08 00 01 02 0c 16 20 2a                             ...... *

000000ee <number6>:
      ee:	0b 00 0a 14 15 16 1e 20 28 29 2a                    ....... ()*

000000f9 <number5>:
      f9:	0c 00 01 02 0a 14 15 16 20 28 29 2a                 ........ ()*

00000105 <number4>:
     105:	0a 00 02 0a 0c 14 15 16 20 2a                       ........ *

0000010f <number3>:
     10f:	0c 00 01 02 0c 14 15 16 20 28 29 2a                 ........ ()*

0000011b <tetromino5B>:
     11b:	05 01 0a 0b 14                                      .....

00000120 <tetromino5A>:
     120:	05 00 01 0b 0c                                      .....

00000125 <tetromino4A>:
     125:	05 01 0a 0b 0c                                      .....

0000012a <tetromino4B>:
     12a:	05 01 0a 0b 15                                      .....

0000012f <tetromino4C>:
     12f:	05 00 01 02 0b                                      .....

00000134 <tetromino4D>:
     134:	05 01 0b 0c 15                                      .....

00000139 <tetromino2A>:
     139:	05 00 01 0a 0b                                      .....

0000013e <tetromino1B>:
     13e:	05 02 0a 0b 0c                                      .....

00000143 <tetromino1C>:
     143:	05 00 01 0b 15                                      .....

00000148 <tetromino1D>:
     148:	05 00 01 02 0a                                      .....

0000014d <wall5>:
     14d:	09 00 0a 14 1e 28 32 50 5a 3c 46                    .....(2PZ<F

00000158 <wall4>:
     158:	09 00 0a 14 1e 28 46 50 5a 32 3c                    .....(FPZ2<

00000163 <wall3>:
     163:	09 00 0a 14 32 3c 46 50 5a 1e 28                    ....2<FPZ.(

0000016e <wall2>:
     16e:	09 00 0a 28 32 3c 46 50 5a 14 1e                    ...(2<FPZ..

00000179 <wall1>:
     179:	09 00 0a 14 1e 3c 46 50 5a 28 32                    .....<FPZ(2

00000184 <number2>:
     184:	0c 00 01 02 0c 14 15 16 1e 28 29 2a                 .........()*

00000190 <number1>:
     190:	06 02 0c 16 20 2a                                   .... *

00000196 <playerPlatform>:
     196:	04 00 01 02                                         ....

0000019a <blocks>:
     19a:	19 0b 0c 0d 0e 0f 10 11 12 15 16 17 18 19 1a 1b     ................
     1aa:	1c 1f 20 21 22 23 24 25 26                          .. !"#$%&

000001b3 <playerShipDead>:
     1b3:	05 0b 00 01 02                                      .....

000001b8 <playerShip>:
     1b8:	05 01 0a 0b 0c                                      .....

000001bd <screenLeftBounds>:
     1bd:	00 0a 14 1e 28 32 3c 46 50 5a                       ....(2<FPZ

000001c7 <screenRightBounds>:
     1c7:	09 13 1d 27 31 3b 45 4f 59 63                       ...'1;EOYc

000001d1 <letterF>:
     1d1:	0a 00 01 02 0a 14 15 16 1e 28                       .........(

000001db <number0>:
     1db:	0d 00 01 02 0a 0c 14 16 1e 20 28 29 2a              ......... ()*

000001e8 <letterB>:
     1e8:	0b 00 01 0a 0c 14 15 1e 20 28 29                    ........ ()

000001f3 <letterO>:
     1f3:	09 01 0a 0c 14 16 1e 20 29                          ....... )

000001fc <letterU>:
     1fc:	0c 00 02 0a 0c 14 16 1e 20 28 29 2a                 ........ ()*

00000208 <letterM>:
     208:	0c 00 02 0a 0b 0c 14 16 1e 20 28 2a                 ......... (*

00000214 <letterD>:
     214:	0b 00 01 0a 0c 14 16 1e 20 28 29                    ........ ()

0000021f <letterP>:
     21f:	09 00 01 0a 0c 14 15 1e 28                          ........(

00000228 <letterS>:
     228:	08 01 02 0a 15 20 28 29                             ..... ()

00000230 <number>:
     230:	db 01 90 01 84 01 0f 01 05 01 f9 00 ee 00 e6 00     ................
     240:	d8 00 cd 00                                         ....

00000244 <arrowRight>:
     244:	06 00 0b 16 1f 28                                   .....(

0000024a <arrowLeft>:
     24a:	06 02 0b 14 1f 2a                                   .....*

00000250 <tetromino3A>:
     250:	04 00 0a 14                                         ....

00000254 <tetromino3B>:
     254:	04 00 01 02                                         ....

00000258 <wallRight>:
     258:	09 13 1d 27 31 3b 45 4f 59 63                       ...'1;EOYc

00000262 <wallLeft>:
     262:	00 0a 14 1e 28 32 3c 46 50 5a                       ....(2<FPZ

0000026c <tetromino1A>:
     26c:	05 00 0a 14 15                                      .....

00000271 <letterR>:
     271:	0b 00 01 0a 0c 14 15 1e 20 28 2a                    ........ (*

0000027c <letterL>:
     27c:	08 00 0a 14 1e 28 29 2a                             .....()*

00000284 <letterC>:
     284:	08 01 02 0a 14 1e 29 2a                             ......)*

0000028c <letterI>:
     28c:	05 01 15 1f 29                                      ....)

00000291 <letterH>:
     291:	0c 00 02 0a 0c 14 15 16 1e 20 28 2a                 ......... (*

0000029d <letterW>:
     29d:	0c 00 02 0a 0c 14 16 1e 1f 20 28 2a                 ......... (*

000002a9 <letterE>:
     2a9:	0c 00 01 02 0a 14 15 16 1e 28 29 2a                 .........()*

000002b5 <letterN>:
     2b5:	0c 00 01 02 0a 0c 14 16 1e 20 28 2a                 ......... (*

000002c1 <walls>:
     2c1:	79 01 6e 01 63 01 58 01 4d 01                       y.n.c.X.M.

000002cb <enemySpeed>:
     2cb:	c2 01 7d 00 b4 00 dc 00 00                          ..}......

000002d4 <__ctors_start>:
__ctors_start():
     2d4:	17 1c       	adc	r1, r7

000002d6 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     2d6:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     2d8:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     2da:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     2dc:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     2de:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
     2e0:	de bf       	out	0x3e, r29	; 62

000002e2 <_initThreeStuff()>:
_Z15_initThreeStuffv():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/main.cpp:104

  /* Minimum: Reset if we wound up here through malfunction - this relies on user clearing the  *
   * register on startup, which is rarely done in Arduino land.                                 */
  void __attribute__((weak)) init_reset_flags() ;
  void __attribute__((weak)) init_reset_flags() {
    uint8_t flags = RSTCTRL.RSTFR;
     2e2:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <encoderDir+0x7f44e4>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/main.cpp:105
    RSTCTRL.RSTFR = flags;
     2e6:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <encoderDir+0x7f44e4>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/main.cpp:106
    if (flags == 0) {
     2ea:	81 11       	cpse	r24, r1
     2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <_initThreeStuff()+0x16>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/main.cpp:107
      _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
     2ee:	98 ed       	ldi	r25, 0xD8	; 216
     2f0:	21 e0       	ldi	r18, 0x01	; 1
     2f2:	94 bf       	out	0x34, r25	; 52
     2f4:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <encoderDir+0x7f44e5>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/main.cpp:109
    }
    GPIOR0 = flags;
     2f8:	8c bb       	out	0x1c, r24	; 28

000002fa <__do_copy_data>:
__do_copy_data():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     2fa:	1a e3       	ldi	r17, 0x3A	; 58
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     2fc:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     2fe:	b8 e3       	ldi	r27, 0x38	; 56
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     300:	ec e6       	ldi	r30, 0x6C	; 108
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     302:	fb e3       	ldi	r31, 0x3B	; 59
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     304:	02 c0       	rjmp	.+4      	; 0x30a <__do_copy_data+0x10>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     306:	05 90       	lpm	r0, Z+
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     308:	0d 92       	st	X+, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     30a:	a6 32       	cpi	r26, 0x26	; 38
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     30c:	b1 07       	cpc	r27, r17
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     30e:	d9 f7       	brne	.-10     	; 0x306 <__do_copy_data+0xc>

00000310 <__do_clear_bss>:
__do_clear_bss():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     310:	2b e3       	ldi	r18, 0x3B	; 59
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     312:	a6 e2       	ldi	r26, 0x26	; 38
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     314:	ba e3       	ldi	r27, 0x3A	; 58
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     316:	01 c0       	rjmp	.+2      	; 0x31a <.do_clear_bss_start>

00000318 <.do_clear_bss_loop>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     318:	1d 92       	st	X+, r1

0000031a <.do_clear_bss_start>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     31a:	ad 39       	cpi	r26, 0x9D	; 157
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     31c:	b2 07       	cpc	r27, r18
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     31e:	e1 f7       	brne	.-8      	; 0x318 <.do_clear_bss_loop>

00000320 <__do_global_ctors>:
__do_global_ctors():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     320:	11 e0       	ldi	r17, 0x01	; 1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     322:	cb e6       	ldi	r28, 0x6B	; 107
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     324:	d1 e0       	ldi	r29, 0x01	; 1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     326:	04 c0       	rjmp	.+8      	; 0x330 <__do_global_ctors+0x10>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     328:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     32a:	fe 01       	movw	r30, r28
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     32c:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__tablejump2__>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     330:	ca 36       	cpi	r28, 0x6A	; 106
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     332:	d1 07       	cpc	r29, r17
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     334:	c9 f7       	brne	.-14     	; 0x328 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     336:	0e 94 52 11 	call	0x22a4	; 0x22a4 <main>
../../../../crt1/gcrt1.S:315
     33a:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <_exit>

0000033e <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     33e:	60 ce       	rjmp	.-832    	; 0x0 <__vectors>

00000340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>:
_ZN12tinyNeoPixel13setPixelColorEjhhh.constprop.15():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1080
  pinMask = digitalPinToBitMask(p);
}

// Set pixel color from separate R,G,B components:
void tinyNeoPixel::setPixelColor(uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if (n < numLEDs) {
     340:	e0 91 8a 3b 	lds	r30, 0x3B8A	; 0x803b8a <strip>
     344:	f0 91 8b 3b 	lds	r31, 0x3B8B	; 0x803b8b <strip+0x1>
     348:	8e 17       	cp	r24, r30
     34a:	9f 07       	cpc	r25, r31
     34c:	98 f5       	brcc	.+102    	; 0x3b4 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]+0x74>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1081
    if (brightness) { // See notes in setBrightness()
     34e:	30 91 8f 3b 	lds	r19, 0x3B8F	; 0x803b8f <strip+0x5>
     352:	33 23       	and	r19, r19
     354:	61 f0       	breq	.+24     	; 0x36e <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]+0x2e>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1082
      r = (r * brightness) >> 8;
     356:	63 9f       	mul	r22, r19
     358:	b0 01       	movw	r22, r0
     35a:	11 24       	eor	r1, r1
     35c:	67 2f       	mov	r22, r23
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1083
      g = (g * brightness) >> 8;
     35e:	34 9f       	mul	r19, r20
     360:	a0 01       	movw	r20, r0
     362:	11 24       	eor	r1, r1
     364:	45 2f       	mov	r20, r21
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1084
      b = (b * brightness) >> 8;
     366:	32 9f       	mul	r19, r18
     368:	90 01       	movw	r18, r0
     36a:	11 24       	eor	r1, r1
     36c:	23 2f       	mov	r18, r19
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1087
    }
    uint8_t *p;
    if (wOffset == rOffset) { // Is an RGB-type strip
     36e:	30 91 95 3b 	lds	r19, 0x3B95	; 0x803b95 <strip+0xb>
     372:	e0 91 90 3b 	lds	r30, 0x3B90	; 0x803b90 <strip+0x6>
     376:	f0 91 91 3b 	lds	r31, 0x3B91	; 0x803b91 <strip+0x7>
     37a:	50 91 92 3b 	lds	r21, 0x3B92	; 0x803b92 <strip+0x8>
     37e:	35 13       	cpse	r19, r21
     380:	1a c0       	rjmp	.+52     	; 0x3b6 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]+0x76>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1088
      p = &pixels[n * 3];    // 3 bytes per pixel
     382:	dc 01       	movw	r26, r24
     384:	aa 0f       	add	r26, r26
     386:	bb 1f       	adc	r27, r27
     388:	8a 0f       	add	r24, r26
     38a:	9b 1f       	adc	r25, r27
     38c:	8e 0f       	add	r24, r30
     38e:	9f 1f       	adc	r25, r31
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1093
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    }
    p[rOffset] = r;          // R,G,B always stored
     390:	e0 91 92 3b 	lds	r30, 0x3B92	; 0x803b92 <strip+0x8>
     394:	e8 0f       	add	r30, r24
     396:	f9 2f       	mov	r31, r25
     398:	f1 1d       	adc	r31, r1
     39a:	60 83       	st	Z, r22
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1094
    p[gOffset] = g;
     39c:	e0 91 93 3b 	lds	r30, 0x3B93	; 0x803b93 <strip+0x9>
     3a0:	e8 0f       	add	r30, r24
     3a2:	f9 2f       	mov	r31, r25
     3a4:	f1 1d       	adc	r31, r1
     3a6:	40 83       	st	Z, r20
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1095
    p[bOffset] = b;
     3a8:	30 91 94 3b 	lds	r19, 0x3B94	; 0x803b94 <strip+0xa>
     3ac:	83 0f       	add	r24, r19
     3ae:	91 1d       	adc	r25, r1
     3b0:	fc 01       	movw	r30, r24
     3b2:	20 83       	st	Z, r18
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1097
  }
}
     3b4:	08 95       	ret
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1090
    }
    uint8_t *p;
    if (wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	8e 0f       	add	r24, r30
     3c0:	9f 1f       	adc	r25, r31
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1091
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
     3c2:	fc 01       	movw	r30, r24
     3c4:	e3 0f       	add	r30, r19
     3c6:	f1 1d       	adc	r31, r1
     3c8:	10 82       	st	Z, r1
     3ca:	e2 cf       	rjmp	.-60     	; 0x390 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]+0x50>

000003cc <tinyNeoPixel::setBrightness(unsigned char) [clone .constprop.6]>:
_ZN12tinyNeoPixel13setBrightnessEh.constprop.6():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1343
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.
void tinyNeoPixel::setBrightness(uint8_t b) {
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1350
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
     3d2:	11 e0       	ldi	r17, 0x01	; 1
     3d4:	18 0f       	add	r17, r24
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1351
  if (newBrightness != brightness) { // Compare against prior value
     3d6:	20 91 8f 3b 	lds	r18, 0x3B8F	; 0x803b8f <strip+0x5>
     3da:	12 17       	cp	r17, r18
     3dc:	a9 f1       	breq	.+106    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1354
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
     3de:	c0 91 90 3b 	lds	r28, 0x3B90	; 0x803b90 <strip+0x6>
     3e2:	d0 91 91 3b 	lds	r29, 0x3B91	; 0x803b91 <strip+0x7>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1355
             oldBrightness = brightness - 1; // De-wrap old brightness value
     3e6:	21 50       	subi	r18, 0x01	; 1
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1358
    uint16_t scale;
    if (oldBrightness == 0) {
      scale = 0;  // Avoid /0
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1357
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if (oldBrightness == 0) {
     3ec:	61 f0       	breq	.+24     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1359
      scale = 0;  // Avoid /0
    } else if (b == 255) {
     3ee:	8f 3f       	cpi	r24, 0xFF	; 255
     3f0:	f9 f4       	brne	.+62     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1360
      scale = 65535 / oldBrightness;
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	50 e0       	ldi	r21, 0x00	; 0
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	6f ef       	ldi	r22, 0xFF	; 255
     3fa:	7f ef       	ldi	r23, 0xFF	; 255
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__divmodsi4>
     404:	b9 01       	movw	r22, r18
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1354
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if (newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
     406:	fe 01       	movw	r30, r28
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1364
    } else if (b == 255) {
      scale = 65535 / oldBrightness;
    } else {
      scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    }
    for (uint16_t i = 0; i < numBytes; i++) {
     408:	40 91 8c 3b 	lds	r20, 0x3B8C	; 0x803b8c <strip+0x2>
     40c:	50 91 8d 3b 	lds	r21, 0x3B8D	; 0x803b8d <strip+0x3>
     410:	cf 01       	movw	r24, r30
     412:	8c 1b       	sub	r24, r28
     414:	9d 0b       	sbc	r25, r29
     416:	84 17       	cp	r24, r20
     418:	95 07       	cpc	r25, r21
     41a:	a0 f4       	brcc	.+40     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1366
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
     41c:	df 01       	movw	r26, r30
     41e:	4d 91       	ld	r20, X+
     420:	46 9f       	mul	r20, r22
     422:	c0 01       	movw	r24, r0
     424:	47 9f       	mul	r20, r23
     426:	90 0d       	add	r25, r0
     428:	11 24       	eor	r1, r1
     42a:	90 83       	st	Z, r25
     42c:	fd 01       	movw	r30, r26
     42e:	ec cf       	rjmp	.-40     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1362
    if (oldBrightness == 0) {
      scale = 0;  // Avoid /0
    } else if (b == 255) {
      scale = 65535 / oldBrightness;
    } else {
      scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
     430:	81 2f       	mov	r24, r17
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	98 2f       	mov	r25, r24
     436:	88 27       	eor	r24, r24
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	62 2f       	mov	r22, r18
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__udivmodhi4>
     442:	e1 cf       	rjmp	.-62     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1368
    }
    for (uint16_t i = 0; i < numBytes; i++) {
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
     444:	10 93 8f 3b 	sts	0x3B8F, r17	; 0x803b8f <strip+0x5>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1370
  }
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	08 95       	ret

00000450 <tinyNeoPixel::show() [clone .part.1] [clone .constprop.1]>:
_ZN12tinyNeoPixel4showEv.part.1.constprop.1():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:74
  // if (pixels)   free(pixels);
  // if (pin >= 0) pinMode(pin, INPUT);
}

// *INDENT-OFF*   astyle don't like assembly
void tinyNeoPixel::show(void) {
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	27 97       	sbiw	r28, 0x07	; 7
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	de bf       	out	0x3e, r29	; 62
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:137
  //   * b (bit number for speeds that don't have to unroll the loop)
  //     is given constraint "+r", which can assign it to any register.
  //     But the code uses LDI on it. LDI doesn't work on every register,
  //     it must have the "+d" constraint to guarantee an upper register.

  noInterrupts(); // Need 100% focus on instruction timing
     45e:	f8 94       	cli
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:147
  // Dx-series parts. This is by no means intended to imply that they will
  // run at those speeds, only that - if they do - you can control WS2812s
  // with them.

  volatile uint16_t
    i   = numBytes; // Loop counter
     460:	80 91 8c 3b 	lds	r24, 0x3B8C	; 0x803b8c <strip+0x2>
     464:	90 91 8d 3b 	lds	r25, 0x3B8D	; 0x803b8d <strip+0x3>
     468:	89 83       	std	Y+1, r24	; 0x01
     46a:	9a 83       	std	Y+2, r25	; 0x02
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:149
  volatile uint8_t
   *ptr = pixels,   // Pointer to next byte
     46c:	a0 91 90 3b 	lds	r26, 0x3B90	; 0x803b90 <strip+0x6>
     470:	b0 91 91 3b 	lds	r27, 0x3B91	; 0x803b91 <strip+0x7>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:150
    b   = *ptr++,   // Current byte value
     474:	fd 01       	movw	r30, r26
     476:	31 96       	adiw	r30, 0x01	; 1
     478:	8c 91       	ld	r24, X
     47a:	8f 83       	std	Y+7, r24	; 0x07
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:381


  // 8 MHz(ish) AVRxt ---------------------------------------------------------
  #elif (F_CPU >= 7400000UL) && (F_CPU <= 9500000UL)

    volatile uint8_t n1, n2 = 0;  // First, next bits out
     47c:	1b 82       	std	Y+3, r1	; 0x03
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:389
    // to meet timing constraints here.

    // 10 instruction clocks per bit: HHxxxxxLLL
    // OUT instructions:              ^ ^    ^   (T=0,2,7)

    hi   = *port |  pinMask;
     47e:	a0 91 9a 3b 	lds	r26, 0x3B9A	; 0x803b9a <strip+0x10>
     482:	b0 91 9b 3b 	lds	r27, 0x3B9B	; 0x803b9b <strip+0x11>
     486:	9c 91       	ld	r25, X
     488:	80 91 9c 3b 	lds	r24, 0x3B9C	; 0x803b9c <strip+0x12>
     48c:	98 2b       	or	r25, r24
     48e:	9e 83       	std	Y+6, r25	; 0x06
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:390
    lo   = *port & ~pinMask;
     490:	9c 91       	ld	r25, X
     492:	80 95       	com	r24
     494:	89 23       	and	r24, r25
     496:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:391
    n1 = lo;
     498:	8d 81       	ldd	r24, Y+5	; 0x05
     49a:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:392
    if (b & 0x80) n1 = hi;
     49c:	8f 81       	ldd	r24, Y+7	; 0x07
     49e:	87 ff       	sbrs	r24, 7
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <tinyNeoPixel::show() [clone .part.1] [clone .constprop.1]+0x56>
     4a2:	8e 81       	ldd	r24, Y+6	; 0x06
     4a4:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:481
      [n1]    "+r" (n1),
      [n2]    "+r" (n2),
      [count] "+w" (i)
    : [port]   "e" (port),
      [hi]     "r" (hi),
      [lo]     "r" (lo));
     4a6:	5e 81       	ldd	r21, Y+6	; 0x06
     4a8:	6d 81       	ldd	r22, Y+5	; 0x05
     4aa:	4f 81       	ldd	r20, Y+7	; 0x07
     4ac:	3c 81       	ldd	r19, Y+4	; 0x04
     4ae:	2b 81       	ldd	r18, Y+3	; 0x03
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	9a 81       	ldd	r25, Y+2	; 0x02

000004b4 <headD>:
     4b4:	5c 93       	st	X, r21
     4b6:	26 2f       	mov	r18, r22
     4b8:	3c 93       	st	X, r19
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <headD+0x8>
     4bc:	46 fd       	sbrc	r20, 6
     4be:	25 2f       	mov	r18, r21
     4c0:	6c 93       	st	X, r22
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <headD+0x10>
     4c4:	5c 93       	st	X, r21
     4c6:	36 2f       	mov	r19, r22
     4c8:	2c 93       	st	X, r18
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <headD+0x18>
     4cc:	45 fd       	sbrc	r20, 5
     4ce:	35 2f       	mov	r19, r21
     4d0:	6c 93       	st	X, r22
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <headD+0x20>
     4d4:	5c 93       	st	X, r21
     4d6:	26 2f       	mov	r18, r22
     4d8:	3c 93       	st	X, r19
     4da:	00 c0       	rjmp	.+0      	; 0x4dc <headD+0x28>
     4dc:	44 fd       	sbrc	r20, 4
     4de:	25 2f       	mov	r18, r21
     4e0:	6c 93       	st	X, r22
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <headD+0x30>
     4e4:	5c 93       	st	X, r21
     4e6:	36 2f       	mov	r19, r22
     4e8:	2c 93       	st	X, r18
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <headD+0x38>
     4ec:	43 fd       	sbrc	r20, 3
     4ee:	35 2f       	mov	r19, r21
     4f0:	6c 93       	st	X, r22
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <headD+0x40>
     4f4:	5c 93       	st	X, r21
     4f6:	26 2f       	mov	r18, r22
     4f8:	3c 93       	st	X, r19
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <headD+0x48>
     4fc:	42 fd       	sbrc	r20, 2
     4fe:	25 2f       	mov	r18, r21
     500:	6c 93       	st	X, r22
     502:	00 c0       	rjmp	.+0      	; 0x504 <headD+0x50>
     504:	5c 93       	st	X, r21
     506:	36 2f       	mov	r19, r22
     508:	2c 93       	st	X, r18
     50a:	00 c0       	rjmp	.+0      	; 0x50c <headD+0x58>
     50c:	41 fd       	sbrc	r20, 1
     50e:	35 2f       	mov	r19, r21
     510:	6c 93       	st	X, r22
     512:	00 c0       	rjmp	.+0      	; 0x514 <headD+0x60>
     514:	5c 93       	st	X, r21
     516:	26 2f       	mov	r18, r22
     518:	3c 93       	st	X, r19
     51a:	00 c0       	rjmp	.+0      	; 0x51c <headD+0x68>
     51c:	40 fd       	sbrc	r20, 0
     51e:	25 2f       	mov	r18, r21
     520:	6c 93       	st	X, r22
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	5c 93       	st	X, r21
     526:	36 2f       	mov	r19, r22
     528:	2c 93       	st	X, r18
     52a:	41 91       	ld	r20, Z+
     52c:	47 fd       	sbrc	r20, 7
     52e:	35 2f       	mov	r19, r21
     530:	6c 93       	st	X, r22
     532:	01 f6       	brne	.-128    	; 0x4b4 <headD>
     534:	4f 83       	std	Y+7, r20	; 0x07
     536:	3c 83       	std	Y+4, r19	; 0x04
     538:	2b 83       	std	Y+3, r18	; 0x03
     53a:	89 83       	std	Y+1, r24	; 0x01
     53c:	9a 83       	std	Y+2, r25	; 0x02
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1062
  #else
    #error "CPU SPEED NOT SUPPORTED"
  #endif
  // END AVR ----------------------------------------------------------------

  interrupts();
     53e:	78 94       	sei
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1069
    endTime = micros();
    // Save EOD time for latch on next call
  #else
    #warning "micros() is not available because millis is disabled from the tools subemnu. It is your responsibility to ensure a sufficient time has passed between calls to show(). See documentation."
  #endif
}
     540:	27 96       	adiw	r28, 0x07	; 7
     542:	cd bf       	out	0x3d, r28	; 61
     544:	de bf       	out	0x3e, r29	; 62
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	08 95       	ret

0000054c <millis>:
millis():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:432
   * All time time travel except for glitchs from disabling millis for too long should no longer
   * be possible. If they are, that is a critical bug.
   */


  unsigned long millis() {
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:435
    // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
    unsigned long m;
    uint8_t oldSREG = SREG;
     550:	4f b7       	in	r20, 0x3f	; 63
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:436
    cli();
     552:	f8 94       	cli
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:438
    #if defined(MILLIS_USE_TIMERRTC)
      uint16_t rtccount = RTC.CNT;
     554:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <encoderDir+0x7f45ec>
     558:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <encoderDir+0x7f45ed>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:439
      m = timingStruct.timer_overflow_count;
     55c:	80 91 65 3b 	lds	r24, 0x3B65	; 0x803b65 <timingStruct>
     560:	90 91 66 3b 	lds	r25, 0x3B66	; 0x803b66 <timingStruct+0x1>
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	a0 e0       	ldi	r26, 0x00	; 0
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:440
      if (RTC.INTFLAGS & RTC_OVF_bm) {
     568:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <encoderDir+0x7f45e7>
     56c:	50 ff       	sbrs	r21, 0
     56e:	05 c0       	rjmp	.+10     	; 0x57a <millis+0x2e>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:445
        /* There has just been an overflow that hasn't been accounted for by the interrupt. Check if the high bit of counter is set.
         * We just basically need to make sure that it didn't JUST roll over at the last couple of clocks. But this merthod is
         * implemented very efficiently (just an sbrs) so it is more efficient than other approaches. If user code is leaving
         * interrupts off nearly 30 seconds, they shouldn't be surprised. */
        if (!(rtccount & 0x8000)) m++;
     570:	37 fd       	sbrc	r19, 7
     572:	03 c0       	rjmp	.+6      	; 0x57a <millis+0x2e>
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	a1 1d       	adc	r26, r1
     578:	b1 1d       	adc	r27, r1
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:447
      }
      SREG = oldSREG;
     57a:	4f bf       	out	0x3f, r20	; 63
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:448
      m = (m << 16);
     57c:	dc 01       	movw	r26, r24
     57e:	99 27       	eor	r25, r25
     580:	88 27       	eor	r24, r24
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:449
      m += rtccount;
     582:	82 0f       	add	r24, r18
     584:	93 1f       	adc	r25, r19
     586:	a1 1d       	adc	r26, r1
     588:	b1 1d       	adc	r27, r1
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:450
      m = m - (m >> 5) + (m >> 7);
     58a:	8c 01       	movw	r16, r24
     58c:	9d 01       	movw	r18, r26
     58e:	55 e0       	ldi	r21, 0x05	; 5
     590:	36 95       	lsr	r19
     592:	27 95       	ror	r18
     594:	17 95       	ror	r17
     596:	07 95       	ror	r16
     598:	5a 95       	dec	r21
     59a:	d1 f7       	brne	.-12     	; 0x590 <millis+0x44>
     59c:	ac 01       	movw	r20, r24
     59e:	bd 01       	movw	r22, r26
     5a0:	e7 e0       	ldi	r30, 0x07	; 7
     5a2:	76 95       	lsr	r23
     5a4:	67 95       	ror	r22
     5a6:	57 95       	ror	r21
     5a8:	47 95       	ror	r20
     5aa:	ea 95       	dec	r30
     5ac:	d1 f7       	brne	.-12     	; 0x5a2 <millis+0x56>
     5ae:	84 0f       	add	r24, r20
     5b0:	95 1f       	adc	r25, r21
     5b2:	a6 1f       	adc	r26, r22
     5b4:	b7 1f       	adc	r27, r23
     5b6:	bc 01       	movw	r22, r24
     5b8:	cd 01       	movw	r24, r26
     5ba:	60 1b       	sub	r22, r16
     5bc:	71 0b       	sbc	r23, r17
     5be:	82 0b       	sbc	r24, r18
     5c0:	93 0b       	sbc	r25, r19
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:491
    #else
      m = timingStruct.timer_millis;
      SREG = oldSREG;
    #endif
    return m;
  }
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	08 95       	ret

000005c8 <delay.part.0>:
delay.part.0():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:965
        start += 1000;
      }
    }
  }
#else
  void delay(uint32_t ms) {
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	6b 01       	movw	r12, r22
     5da:	7c 01       	movw	r14, r24
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:973
    } else if (ms < 16) {
      while(ms--) {
        _delay_ms(1);
      }
    } else {
      uint32_t start = millis();
     5dc:	b7 df       	rcall	.-146    	; 0x54c <millis>
     5de:	4b 01       	movw	r8, r22
     5e0:	5c 01       	movw	r10, r24
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:974
      while (millis() - start < ms);
     5e2:	b4 df       	rcall	.-152    	; 0x54c <millis>
     5e4:	68 19       	sub	r22, r8
     5e6:	79 09       	sbc	r23, r9
     5e8:	8a 09       	sbc	r24, r10
     5ea:	9b 09       	sbc	r25, r11
     5ec:	6c 15       	cp	r22, r12
     5ee:	7d 05       	cpc	r23, r13
     5f0:	8e 05       	cpc	r24, r14
     5f2:	9f 05       	cpc	r25, r15
     5f4:	b0 f3       	brcs	.-20     	; 0x5e2 <delay.part.0+0x1a>
     5f6:	ff 90       	pop	r15
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:976
    }
  }
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	bf 90       	pop	r11
     600:	af 90       	pop	r10
     602:	9f 90       	pop	r9
     604:	8f 90       	pop	r8
     606:	08 95       	ret

00000608 <encoder::encoderSetPosition(int, unsigned char) [clone .part.0]>:
_ZN7encoder18encoderSetPositionEih.part.0():
     608:	20 91 88 3b 	lds	r18, 0x3B88	; 0x803b88 <encoderPosition>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:113

void encoder::encoderSetPosition(int newPosition, uint8_t latchMode) {
  switch (latchMode) {
    case 1:
      // only adjust the external part of the position.
      encoderPosition = ((newPosition << 2) | (encoderPosition & 0x03L));
     60c:	30 91 89 3b 	lds	r19, 0x3B89	; 0x803b89 <encoderPosition+0x1>
     610:	23 70       	andi	r18, 0x03	; 3
     612:	33 27       	eor	r19, r19
     614:	ac 01       	movw	r20, r24
     616:	44 0f       	add	r20, r20
     618:	55 1f       	adc	r21, r21
     61a:	44 0f       	add	r20, r20
     61c:	55 1f       	adc	r21, r21
     61e:	24 2b       	or	r18, r20
     620:	35 2b       	or	r19, r21
     622:	20 93 88 3b 	sts	0x3B88, r18	; 0x803b88 <encoderPosition>
     626:	30 93 89 3b 	sts	0x3B89, r19	; 0x803b89 <encoderPosition+0x1>
     62a:	80 93 86 3b 	sts	0x3B86, r24	; 0x803b86 <encoderPositionExt>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:114
      encoderPositionExt = newPosition;
     62e:	90 93 87 3b 	sts	0x3B87, r25	; 0x803b87 <encoderPositionExt+0x1>
     632:	08 95       	ret

00000634 <encoder::encoderSetPosition(int, unsigned char) [clone .constprop.9]>:
_ZN7encoder18encoderSetPositionEih.constprop.9():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:125
      encoderPosition = ((newPosition << 1) | (encoderPosition & 0x01L));
      encoderPositionExt = newPosition;
      encoderPositionExt = newPosition;
      break;
  } // switch
}
     634:	62 30       	cpi	r22, 0x02	; 2
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:110
    encoderPositionExtPrev = encoderPositionExt;
  }
}

void encoder::encoderSetPosition(int newPosition, uint8_t latchMode) {
  switch (latchMode) {
     636:	09 f0       	breq	.+2      	; 0x63a <encoder::encoderSetPosition(int, unsigned char) [clone .constprop.9]+0x6>
     638:	e7 cf       	rjmp	.-50     	; 0x608 <encoder::encoderSetPosition(int, unsigned char) [clone .part.0]>
     63a:	20 91 88 3b 	lds	r18, 0x3B88	; 0x803b88 <encoderPosition>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:120
      encoderPositionExtPrev = newPosition;
      break;

    case 2:
      // only adjust the external part of the position.
      encoderPosition = ((newPosition << 1) | (encoderPosition & 0x01L));
     63e:	30 91 89 3b 	lds	r19, 0x3B89	; 0x803b89 <encoderPosition+0x1>
     642:	21 70       	andi	r18, 0x01	; 1
     644:	33 27       	eor	r19, r19
     646:	ac 01       	movw	r20, r24
     648:	44 0f       	add	r20, r20
     64a:	55 1f       	adc	r21, r21
     64c:	24 2b       	or	r18, r20
     64e:	35 2b       	or	r19, r21
     650:	20 93 88 3b 	sts	0x3B88, r18	; 0x803b88 <encoderPosition>
     654:	30 93 89 3b 	sts	0x3B89, r19	; 0x803b89 <encoderPosition+0x1>
     658:	80 93 86 3b 	sts	0x3B86, r24	; 0x803b86 <encoderPositionExt>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:121
      encoderPositionExt = newPosition;
     65c:	90 93 87 3b 	sts	0x3B87, r25	; 0x803b87 <encoderPositionExt+0x1>
     660:	08 95       	ret

00000662 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]>:
_ZN7encoder11encoderReadEhhbh.constprop.7():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:125
      encoderPositionExt = newPosition;
      break;
  } // switch
}
     662:	ff 92       	push	r15
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:40
  0, 1, -1, 0
};

encoder::encoder(void) {}

uint8_t encoder::encoderRead(uint8_t rotaryMin, uint8_t rotaryMax, bool loopValue, uint8_t latchMode) {
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	c8 2f       	mov	r28, r24
     66e:	16 2f       	mov	r17, r22
     670:	f4 2e       	mov	r15, r20
     672:	02 2f       	mov	r16, r18
encoderTick():
     674:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:70
  }
  return rotaryCounter;
}

void encoder::encoderTick(uint8_t latchMode) {
  int8_t thisState = ((!(PORTA.IN & PIN5_bm)) | !(PORTA.IN & PIN6_bm)  << 1); //encoder pins invert if encoder is backwards
     678:	95 fb       	bst	r25, 5
     67a:	99 27       	eor	r25, r25
     67c:	90 f9       	bld	r25, 0
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	98 27       	eor	r25, r24
     682:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
     686:	86 fd       	sbrc	r24, 6
     688:	5c c0       	rjmp	.+184    	; 0x742 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0xe0>
_ZN7encoder11encoderReadEhhbh.constprop.7():
     68a:	82 e0       	ldi	r24, 0x02	; 2
encoderTick():
     68c:	98 2b       	or	r25, r24
     68e:	e0 91 83 3b 	lds	r30, 0x3B83	; 0x803b83 <oldState>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:72

  if (oldState != thisState) {
     692:	9e 17       	cp	r25, r30
     694:	b1 f0       	breq	.+44     	; 0x6c2 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0x60>
     696:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:73
    encoderPosition += encoderDir[thisState | (oldState << 2)];
     698:	e8 02       	muls	r30, r24
     69a:	f0 01       	movw	r30, r0
     69c:	11 24       	eor	r1, r1
     69e:	e9 2b       	or	r30, r25
     6a0:	e4 5a       	subi	r30, 0xA4	; 164
     6a2:	f4 44       	sbci	r31, 0x44	; 68
     6a4:	80 81       	ld	r24, Z
     6a6:	20 91 88 3b 	lds	r18, 0x3B88	; 0x803b88 <encoderPosition>
     6aa:	30 91 89 3b 	lds	r19, 0x3B89	; 0x803b89 <encoderPosition+0x1>
     6ae:	28 0f       	add	r18, r24
     6b0:	31 1d       	adc	r19, r1
     6b2:	87 fd       	sbrc	r24, 7
     6b4:	3a 95       	dec	r19
     6b6:	20 93 88 3b 	sts	0x3B88, r18	; 0x803b88 <encoderPosition>
     6ba:	30 93 89 3b 	sts	0x3B89, r19	; 0x803b89 <encoderPosition+0x1>
     6be:	90 93 83 3b 	sts	0x3B83, r25	; 0x803b83 <oldState>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:74
    oldState = thisState;
     6c2:	02 30       	cpi	r16, 0x02	; 2
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:76
  }
  switch (latchMode) {
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0x66>
     6c6:	3f c0       	rjmp	.+126    	; 0x746 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0xe4>
     6c8:	93 30       	cpi	r25, 0x03	; 3
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:78
    case 1:
      if (thisState == 3) {
     6ca:	a9 f4       	brne	.+42     	; 0x6f6 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0x94>
     6cc:	80 91 88 3b 	lds	r24, 0x3B88	; 0x803b88 <encoderPosition>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:80
        // The hardware has 4 steps with a latch on the input state 3
        encoderPositionExt = encoderPosition >> 2;
     6d0:	90 91 89 3b 	lds	r25, 0x3B89	; 0x803b89 <encoderPosition+0x1>
     6d4:	95 95       	asr	r25
     6d6:	87 95       	ror	r24
     6d8:	95 95       	asr	r25
     6da:	87 95       	ror	r24
     6dc:	80 93 86 3b 	sts	0x3B86, r24	; 0x803b86 <encoderPositionExt>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:88
      }
      break;
    case 2:
      if ((thisState == 0) || (thisState == 3)) {
        // The hardware has 2 steps with a latch on the input state 0 and 3
        encoderPositionExt = encoderPosition >> 1;
     6e0:	90 93 87 3b 	sts	0x3B87, r25	; 0x803b87 <encoderPositionExt+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:90
        encoderPositionExtPrev = encoderPositionExtTime;
        encoderPositionExtTime = millis();
     6e4:	33 df       	rcall	.-410    	; 0x54c <millis>
     6e6:	60 93 7f 3b 	sts	0x3B7F, r22	; 0x803b7f <encoderPositionExtTime>
     6ea:	70 93 80 3b 	sts	0x3B80, r23	; 0x803b80 <encoderPositionExtTime+0x1>
     6ee:	80 93 81 3b 	sts	0x3B81, r24	; 0x803b81 <encoderPositionExtTime+0x2>
     6f2:	90 93 82 3b 	sts	0x3B82, r25	; 0x803b82 <encoderPositionExtTime+0x3>
_ZN7encoder11encoderReadEhhbh.constprop.7():
     6f6:	20 91 86 3b 	lds	r18, 0x3B86	; 0x803b86 <encoderPositionExt>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:44

uint8_t encoder::encoderRead(uint8_t rotaryMin, uint8_t rotaryMax, bool loopValue, uint8_t latchMode) {

  encoderTick(latchMode);
  // get the current physical position and calc the logical position
  rotaryCounter = encoderPositionExt;
     6fa:	30 91 87 3b 	lds	r19, 0x3B87	; 0x803b87 <encoderPositionExt+0x1>
     6fe:	20 93 84 3b 	sts	0x3B84, r18	; 0x803b84 <rotaryCounter>
     702:	30 93 85 3b 	sts	0x3B85, r19	; 0x803b85 <rotaryCounter+0x1>
     706:	d0 e0       	ldi	r29, 0x00	; 0
     708:	ff 20       	and	r15, r15
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:46

  if (loopValue) {
     70a:	41 f1       	breq	.+80     	; 0x75c <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0xfa>
     70c:	81 2f       	mov	r24, r17
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	60 2f       	mov	r22, r16
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:48
    if (rotaryCounter < rotaryMin) {
      encoderSetPosition(rotaryMax, latchMode);
     712:	2c 17       	cp	r18, r28
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:47
  encoderTick(latchMode);
  // get the current physical position and calc the logical position
  rotaryCounter = encoderPositionExt;

  if (loopValue) {
    if (rotaryCounter < rotaryMin) {
     714:	3d 07       	cpc	r19, r29
     716:	24 f0       	brlt	.+8      	; 0x720 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0xbe>
     718:	82 17       	cp	r24, r18
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:51
      encoderSetPosition(rotaryMax, latchMode);
      rotaryCounter = encoderPositionExt;

    } else if (rotaryCounter > rotaryMax) {
     71a:	93 07       	cpc	r25, r19
     71c:	54 f4       	brge	.+20     	; 0x732 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0xd0>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:52
      encoderSetPosition(rotaryMin, latchMode);
     71e:	ce 01       	movw	r24, r28
     720:	89 df       	rcall	.-238    	; 0x634 <encoder::encoderSetPosition(int, unsigned char) [clone .constprop.9]>
     722:	80 91 86 3b 	lds	r24, 0x3B86	; 0x803b86 <encoderPositionExt>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:53
      rotaryCounter = encoderPositionExt;
     726:	90 91 87 3b 	lds	r25, 0x3B87	; 0x803b87 <encoderPositionExt+0x1>
     72a:	80 93 84 3b 	sts	0x3B84, r24	; 0x803b84 <rotaryCounter>
     72e:	90 93 85 3b 	sts	0x3B85, r25	; 0x803b85 <rotaryCounter+0x1>
     732:	80 91 84 3b 	lds	r24, 0x3B84	; 0x803b84 <rotaryCounter>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:67
      encoderSetPosition(rotaryMax, latchMode);
      rotaryCounter = rotaryMax;
    }
  }
  return rotaryCounter;
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	08 95       	ret
     742:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:70

void encoder::encoderTick(uint8_t latchMode) {
  int8_t thisState = ((!(PORTA.IN & PIN5_bm)) | !(PORTA.IN & PIN6_bm)  << 1); //encoder pins invert if encoder is backwards
     744:	a3 cf       	rjmp	.-186    	; 0x68c <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0x2a>
encoderTick():
     746:	99 23       	and	r25, r25
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:86
        encoderPositionExtTimePrev = encoderPositionExtTime;
        encoderPositionExtTime = millis();
      }
      break;
    case 2:
      if ((thisState == 0) || (thisState == 3)) {
     748:	11 f0       	breq	.+4      	; 0x74e <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0xec>
     74a:	93 30       	cpi	r25, 0x03	; 3
     74c:	a1 f6       	brne	.-88     	; 0x6f6 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0x94>
     74e:	80 91 88 3b 	lds	r24, 0x3B88	; 0x803b88 <encoderPosition>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:88
        // The hardware has 2 steps with a latch on the input state 0 and 3
        encoderPositionExt = encoderPosition >> 1;
     752:	90 91 89 3b 	lds	r25, 0x3B89	; 0x803b89 <encoderPosition+0x1>
     756:	95 95       	asr	r25
     758:	87 95       	ror	r24
     75a:	c0 cf       	rjmp	.-128    	; 0x6dc <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0x7a>
_ZN7encoder11encoderReadEhhbh.constprop.7():
     75c:	2c 17       	cp	r18, r28
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:57
      encoderSetPosition(rotaryMin, latchMode);
      rotaryCounter = encoderPositionExt;
    }
  } else {

    if (rotaryCounter < rotaryMin) {
     75e:	3d 07       	cpc	r19, r29
     760:	44 f4       	brge	.+16     	; 0x772 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0x110>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:62
      encoderSetPosition(rotaryMin, latchMode);
      rotaryCounter = rotaryMin;

    } else if (rotaryCounter > rotaryMax) {
      encoderSetPosition(rotaryMax, latchMode);
     762:	60 2f       	mov	r22, r16
     764:	ce 01       	movw	r24, r28
     766:	66 df       	rcall	.-308    	; 0x634 <encoder::encoderSetPosition(int, unsigned char) [clone .constprop.9]>
     768:	c0 93 84 3b 	sts	0x3B84, r28	; 0x803b84 <rotaryCounter>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:63
      rotaryCounter = rotaryMax;
     76c:	d0 93 85 3b 	sts	0x3B85, r29	; 0x803b85 <rotaryCounter+0x1>
     770:	e0 cf       	rjmp	.-64     	; 0x732 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0xd0>
     772:	c1 2f       	mov	r28, r17
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/encoder.cpp:61

    if (rotaryCounter < rotaryMin) {
      encoderSetPosition(rotaryMin, latchMode);
      rotaryCounter = rotaryMin;

    } else if (rotaryCounter > rotaryMax) {
     774:	d0 e0       	ldi	r29, 0x00	; 0
     776:	c2 17       	cp	r28, r18
     778:	d3 07       	cpc	r29, r19
     77a:	dc f6       	brge	.-74     	; 0x732 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0xd0>
     77c:	f2 cf       	rjmp	.-28     	; 0x762 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]+0x100>

0000077e <colorSelect()>:
_Z11colorSelectv():
     77e:	80 91 6d 3b 	lds	r24, 0x3B6D	; 0x803b6d <color>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1633
    eeprom_write_byte((uint8_t*)3, brightLevel);
  }
}

void colorSelect () {
  switch (color) { // color NeoPixel LED number from first to last
     782:	82 30       	cpi	r24, 0x02	; 2
     784:	89 f0       	breq	.+34     	; 0x7a8 <colorSelect()+0x2a>
     786:	18 f4       	brcc	.+6      	; 0x78e <colorSelect()+0x10>
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	31 f0       	breq	.+12     	; 0x798 <colorSelect()+0x1a>
     78c:	08 95       	ret
     78e:	83 30       	cpi	r24, 0x03	; 3
     790:	89 f0       	breq	.+34     	; 0x7b4 <colorSelect()+0x36>
     792:	84 30       	cpi	r24, 0x04	; 4
     794:	b9 f0       	breq	.+46     	; 0x7c4 <colorSelect()+0x46>
     796:	08 95       	ret
     798:	80 e5       	ldi	r24, 0x50	; 80
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1635
    case 1:
      red = 80;
     79a:	80 93 6a 3b 	sts	0x3B6A, r24	; 0x803b6a <red>
     79e:	10 92 6b 3b 	sts	0x3B6B, r1	; 0x803b6b <green>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1636
      green = 0;
     7a2:	10 92 6c 3b 	sts	0x3B6C, r1	; 0x803b6c <blue>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1642
      blue = 0;
      break;
    case 2:
      red = 0;
      green = 80;
      blue = 0;
     7a6:	08 95       	ret
     7a8:	10 92 6a 3b 	sts	0x3B6A, r1	; 0x803b6a <red>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1640
      red = 80;
      green = 0;
      blue = 0;
      break;
    case 2:
      red = 0;
     7ac:	80 e5       	ldi	r24, 0x50	; 80
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1641
      green = 80;
     7ae:	80 93 6b 3b 	sts	0x3B6B, r24	; 0x803b6b <green>
     7b2:	f7 cf       	rjmp	.-18     	; 0x7a2 <colorSelect()+0x24>
     7b4:	10 92 6a 3b 	sts	0x3B6A, r1	; 0x803b6a <red>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1645
      blue = 0;
      break;
    case 3:
      red = 0;
     7b8:	10 92 6b 3b 	sts	0x3B6B, r1	; 0x803b6b <green>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1646
      green = 0;
     7bc:	80 e5       	ldi	r24, 0x50	; 80
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1647
      blue = 80;
     7be:	80 93 6c 3b 	sts	0x3B6C, r24	; 0x803b6c <blue>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1652
      break;
    case 4:
      red = 80;
      green = 80;
      blue = 80;
     7c2:	08 95       	ret
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1655
      break;
  }
}
     7c4:	80 e5       	ldi	r24, 0x50	; 80
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1650
      red = 0;
      green = 0;
      blue = 80;
      break;
    case 4:
      red = 80;
     7c6:	80 93 6a 3b 	sts	0x3B6A, r24	; 0x803b6a <red>
     7ca:	80 93 6b 3b 	sts	0x3B6B, r24	; 0x803b6b <green>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1651
      green = 80;
     7ce:	f7 cf       	rjmp	.-18     	; 0x7be <colorSelect()+0x40>

000007d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>:
_Z13drawCharacterhPhhhh():
     7d0:	af 92       	push	r10
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1437
  return false;
}

//draw characters

void drawCharacter (uint8_t firstLed, uint8_t arrayName[], uint8_t red, uint8_t green, uint8_t blue) {// draws on digit form 0 to 3 taking values from array in characters
     7d2:	bf 92       	push	r11
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	6b 01       	movw	r12, r22
     7e6:	b4 2e       	mov	r11, r20
     7e8:	a2 2e       	mov	r10, r18
     7ea:	fb 01       	movw	r30, r22
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1440

  uint8_t led = 0;
  uint8_t arrayElements = pgm_read_byte_near (arrayName + 0);
     7ec:	14 91       	lpm	r17, Z
     7ee:	d0 e0       	ldi	r29, 0x00	; 0
     7f0:	c0 e0       	ldi	r28, 0x00	; 0
     7f2:	e8 2e       	mov	r14, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1445

  for (uint8_t x = 0; x < arrayElements; x++) {
    if (x != 0) {
      led = pgm_read_byte_near (arrayName + x);
      strip.setPixelColor((led + firstLed), red, green, blue);
     7f4:	f1 2c       	mov	r15, r1
     7f6:	c1 17       	cp	r28, r17
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1442
void drawCharacter (uint8_t firstLed, uint8_t arrayName[], uint8_t red, uint8_t green, uint8_t blue) {// draws on digit form 0 to 3 taking values from array in characters

  uint8_t led = 0;
  uint8_t arrayElements = pgm_read_byte_near (arrayName + 0);

  for (uint8_t x = 0; x < arrayElements; x++) {
     7f8:	78 f4       	brcc	.+30     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     7fa:	cc 23       	and	r28, r28
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1443
    if (x != 0) {
     7fc:	59 f0       	breq	.+22     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     7fe:	f6 01       	movw	r30, r12
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1444
      led = pgm_read_byte_near (arrayName + x);
     800:	ec 0f       	add	r30, r28
     802:	fd 1f       	adc	r31, r29
     804:	84 91       	lpm	r24, Z
     806:	20 2f       	mov	r18, r16
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1445
      strip.setPixelColor((led + firstLed), red, green, blue);
     808:	4a 2d       	mov	r20, r10
     80a:	6b 2d       	mov	r22, r11
     80c:	8e 0d       	add	r24, r14
     80e:	9f 2d       	mov	r25, r15
     810:	91 1d       	adc	r25, r1
     812:	96 dd       	rcall	.-1236   	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
     814:	21 96       	adiw	r28, 0x01	; 1
     816:	ef cf       	rjmp	.-34     	; 0x7f6 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)+0x26>
     818:	df 91       	pop	r29
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1448
    }
  }
}
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	df 90       	pop	r13
     826:	cf 90       	pop	r12
     828:	bf 90       	pop	r11
     82a:	af 90       	pop	r10
     82c:	08 95       	ret

0000082e <showTime(unsigned char, unsigned char)>:
_Z8showTimehh():
     82e:	cf 92       	push	r12
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1450

void showTime (uint8_t firstLed, uint8_t value) {// this function takes the digit and value from characters.h and draws it without the 0 to the left in hours
     830:	df 92       	push	r13
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	d8 2f       	mov	r29, r24
     840:	c6 2f       	mov	r28, r22
     842:	e0 90 6c 3b 	lds	r14, 0x3B6C	; 0x803b6c <blue>
     846:	f0 90 6b 3b 	lds	r15, 0x3B6B	; 0x803b6b <green>
     84a:	10 91 6a 3b 	lds	r17, 0x3B6A	; 0x803b6a <red>
     84e:	6a 30       	cpi	r22, 0x0A	; 10
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1453
  uint8_t valueUnits = value;                      // always draws 2 digits.

  if (value < 10) {
     850:	90 f5       	brcc	.+100    	; 0x8b6 <showTime(unsigned char, unsigned char)+0x88>
     852:	81 11       	cpse	r24, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1454
    if (firstLed == 0) {
     854:	29 c0       	rjmp	.+82     	; 0x8a8 <showTime(unsigned char, unsigned char)+0x7a>
     856:	d1 2c       	mov	r13, r1
     858:	c1 2c       	mov	r12, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1456
      for (uint8_t x = 0; x < 13; x++) {
        strip.setPixelColor(x, 0, 0, 0);
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	c6 01       	movw	r24, r12
     862:	6e dd       	rcall	.-1316   	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	c8 1a       	sub	r12, r24
     868:	d8 0a       	sbc	r13, r24
     86a:	8d e0       	ldi	r24, 0x0D	; 13
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1455
void showTime (uint8_t firstLed, uint8_t value) {// this function takes the digit and value from characters.h and draws it without the 0 to the left in hours
  uint8_t valueUnits = value;                      // always draws 2 digits.

  if (value < 10) {
    if (firstLed == 0) {
      for (uint8_t x = 0; x < 13; x++) {
     86c:	c8 16       	cp	r12, r24
     86e:	d1 04       	cpc	r13, r1
     870:	a1 f7       	brne	.-24     	; 0x85a <showTime(unsigned char, unsigned char)+0x2c>
     872:	ec 2f       	mov	r30, r28
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1461
        strip.setPixelColor(x, 0, 0, 0);
      }
    } else {
      drawCharacter(firstLed, number0, red, green, blue);
    }
    arrayNumberValue[0] = pgm_read_word_near(number + value);
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	e0 5d       	subi	r30, 0xD0	; 208
     87c:	fd 4f       	sbci	r31, 0xFD	; 253
     87e:	65 91       	lpm	r22, Z+
     880:	74 91       	lpm	r23, Z
     882:	60 93 71 3b 	sts	0x3B71, r22	; 0x803b71 <arrayNumberValue>
     886:	70 93 72 3b 	sts	0x3B72, r23	; 0x803b72 <arrayNumberValue+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1462
    drawCharacter((firstLed + 4), arrayNumberValue[0], red, green, blue);
     88a:	0e 2d       	mov	r16, r14
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1473

    for (uint8_t x = 0; x < value ; x++) {
      valueUnits--;
    }
    arrayNumberValue[0] = pgm_read_word_near(number + valueUnits);
    drawCharacter((firstLed + 4), arrayNumberValue[0], red, green, blue);
     88c:	2f 2d       	mov	r18, r15
     88e:	41 2f       	mov	r20, r17
     890:	84 e0       	ldi	r24, 0x04	; 4
     892:	8d 0f       	add	r24, r29
     894:	9d df       	rcall	.-198    	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
     896:	df 91       	pop	r29
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1475
  }
}
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	ef 90       	pop	r14
     8a2:	df 90       	pop	r13
     8a4:	cf 90       	pop	r12
     8a6:	08 95       	ret
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1459
    if (firstLed == 0) {
      for (uint8_t x = 0; x < 13; x++) {
        strip.setPixelColor(x, 0, 0, 0);
      }
    } else {
      drawCharacter(firstLed, number0, red, green, blue);
     8a8:	0e 2d       	mov	r16, r14
     8aa:	2f 2d       	mov	r18, r15
     8ac:	41 2f       	mov	r20, r17
     8ae:	6b ed       	ldi	r22, 0xDB	; 219
     8b0:	71 e0       	ldi	r23, 0x01	; 1
     8b2:	8e df       	rcall	.-228    	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
     8b4:	de cf       	rjmp	.-68     	; 0x872 <showTime(unsigned char, unsigned char)+0x44>
     8b6:	86 2f       	mov	r24, r22
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1464
    }
    arrayNumberValue[0] = pgm_read_word_near(number + value);
    drawCharacter((firstLed + 4), arrayNumberValue[0], red, green, blue);
  } else {
    value /= 10; // some math to substract the 0 from the left in hours digits
     8b8:	6a e0       	ldi	r22, 0x0A	; 10
     8ba:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__udivmodqi4>
     8be:	c9 2f       	mov	r28, r25
     8c0:	e8 2f       	mov	r30, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1465
    arrayNumberValue[0] = pgm_read_word_near(number + value);
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	ee 0f       	add	r30, r30
     8c6:	ff 1f       	adc	r31, r31
     8c8:	e0 5d       	subi	r30, 0xD0	; 208
     8ca:	fd 4f       	sbci	r31, 0xFD	; 253
     8cc:	65 91       	lpm	r22, Z+
     8ce:	74 91       	lpm	r23, Z
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1466
    drawCharacter(firstLed, arrayNumberValue[0], red, green, blue);
     8d0:	0e 2d       	mov	r16, r14
     8d2:	2f 2d       	mov	r18, r15
     8d4:	41 2f       	mov	r20, r17
     8d6:	8d 2f       	mov	r24, r29
     8d8:	7b df       	rcall	.-266    	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
     8da:	ec 2f       	mov	r30, r28
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1472
    value *= 10;

    for (uint8_t x = 0; x < value ; x++) {
      valueUnits--;
    }
    arrayNumberValue[0] = pgm_read_word_near(number + valueUnits);
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	e0 5d       	subi	r30, 0xD0	; 208
     8e4:	fd 4f       	sbci	r31, 0xFD	; 253
     8e6:	65 91       	lpm	r22, Z+
     8e8:	74 91       	lpm	r23, Z
     8ea:	60 93 71 3b 	sts	0x3B71, r22	; 0x803b71 <arrayNumberValue>
     8ee:	70 93 72 3b 	sts	0x3B72, r23	; 0x803b72 <arrayNumberValue+0x1>
     8f2:	cc cf       	rjmp	.-104    	; 0x88c <showTime(unsigned char, unsigned char)+0x5e>

000008f4 <showScore(unsigned int)>:
_Z9showScorej():
     8f4:	0f 93       	push	r16
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1477
    drawCharacter((firstLed + 4), arrayNumberValue[0], red, green, blue);
  }
}

void showScore(uint16_t valueShort) {// draws all ledInvadersScore using showTime function
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	24 e6       	ldi	r18, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1479
  uint16_t valueDecimals = valueShort;
  red = 100;
     8fc:	20 93 6a 3b 	sts	0x3B6A, r18	; 0x803b6a <red>
     900:	10 92 6b 3b 	sts	0x3B6B, r1	; 0x803b6b <green>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1480
  green = 0;
     904:	10 92 6c 3b 	sts	0x3B6C, r1	; 0x803b6c <blue>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1483
  blue = 0;

  if (valueShort <= 999) {
     908:	88 3e       	cpi	r24, 0xE8	; 232
     90a:	23 e0       	ldi	r18, 0x03	; 3
     90c:	92 07       	cpc	r25, r18
     90e:	48 f5       	brcc	.+82     	; 0x962 <showScore(unsigned int)+0x6e>
     910:	ec 01       	movw	r28, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1485

    if (valueShort < 100) { // functions to draw units in digit 3, decimals in digit 2 and hundredths in digit 1
     912:	84 36       	cpi	r24, 0x64	; 100
     914:	91 05       	cpc	r25, r1
     916:	18 f4       	brcc	.+6      	; 0x91e <showScore(unsigned int)+0x2a>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1486
      showTime(53, valueShort);
     918:	68 2f       	mov	r22, r24
     91a:	85 e3       	ldi	r24, 0x35	; 53
     91c:	88 df       	rcall	.-240    	; 0x82e <showTime(unsigned char, unsigned char)>
     91e:	ce 01       	movw	r24, r28
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1489
    }

    if (valueShort >= 100 && valueShort <= 999) {
     920:	84 56       	subi	r24, 0x64	; 100
     922:	91 09       	sbc	r25, r1
     924:	84 38       	cpi	r24, 0x84	; 132
     926:	93 40       	sbci	r25, 0x03	; 3
     928:	e0 f4       	brcc	.+56     	; 0x962 <showScore(unsigned int)+0x6e>
     92a:	ce 01       	movw	r24, r28
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1490
      valueShort /= 100;
     92c:	64 e6       	ldi	r22, 0x64	; 100
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__udivmodhi4>
     934:	c8 2f       	mov	r28, r24
     936:	fb 01       	movw	r30, r22
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1491
      arrayNumberValue[0] = pgm_read_word_near(number + valueShort);
     938:	ee 0f       	add	r30, r30
     93a:	ff 1f       	adc	r31, r31
     93c:	e0 5d       	subi	r30, 0xD0	; 208
     93e:	fd 4f       	sbci	r31, 0xFD	; 253
     940:	65 91       	lpm	r22, Z+
     942:	74 91       	lpm	r23, Z
     944:	60 93 71 3b 	sts	0x3B71, r22	; 0x803b71 <arrayNumberValue>
     948:	70 93 72 3b 	sts	0x3B72, r23	; 0x803b72 <arrayNumberValue+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1492
      drawCharacter(50, arrayNumberValue[0], red, green, blue);
     94c:	00 e0       	ldi	r16, 0x00	; 0
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	44 e6       	ldi	r20, 0x64	; 100
     952:	82 e3       	ldi	r24, 0x32	; 50
     954:	3d df       	rcall	.-390    	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1498
      valueShort *= 100;

      for (uint16_t x = 0; x < valueShort ; x++) {
        valueDecimals--;
      }
      showTime(53, valueDecimals);
     956:	6c 2f       	mov	r22, r28
     958:	85 e3       	ldi	r24, 0x35	; 53
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1501
    }
  }
}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	0f 91       	pop	r16
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1498
      valueShort *= 100;

      for (uint16_t x = 0; x < valueShort ; x++) {
        valueDecimals--;
      }
      showTime(53, valueDecimals);
     960:	66 cf       	rjmp	.-308    	; 0x82e <showTime(unsigned char, unsigned char)>
     962:	df 91       	pop	r29
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1501
    }
  }
}
     964:	cf 91       	pop	r28
     966:	0f 91       	pop	r16
     968:	08 95       	ret

0000096a <buttonDebounce(bool, bool, bool, unsigned long)>:
_Z14buttonDebouncebbbm():
     96a:	bf 92       	push	r11
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1409
      }
    }
  }
}

bool buttonDebounce(bool left, bool right, bool menu, uint32_t debounceTime ) {// code to debounce button press
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	b8 2e       	mov	r11, r24
     97e:	c6 2f       	mov	r28, r22
     980:	d4 2f       	mov	r29, r20
     982:	68 01       	movw	r12, r16
     984:	79 01       	movw	r14, r18
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1411

  if (RIGHTLOW && right && (millis() - buttonRightTimeStamp) > debounceTime) {
     986:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
     98a:	81 fd       	sbrc	r24, 1
     98c:	28 c0       	rjmp	.+80     	; 0x9de <buttonDebounce(bool, bool, bool, unsigned long)+0x74>
     98e:	66 23       	and	r22, r22
     990:	31 f1       	breq	.+76     	; 0x9de <buttonDebounce(bool, bool, bool, unsigned long)+0x74>
     992:	dc dd       	rcall	.-1096   	; 0x54c <millis>
     994:	00 91 33 3a 	lds	r16, 0x3A33	; 0x803a33 <buttonRightTimeStamp>
     998:	10 91 34 3a 	lds	r17, 0x3A34	; 0x803a34 <buttonRightTimeStamp+0x1>
     99c:	20 91 35 3a 	lds	r18, 0x3A35	; 0x803a35 <buttonRightTimeStamp+0x2>
     9a0:	30 91 36 3a 	lds	r19, 0x3A36	; 0x803a36 <buttonRightTimeStamp+0x3>
     9a4:	60 1b       	sub	r22, r16
     9a6:	71 0b       	sbc	r23, r17
     9a8:	82 0b       	sbc	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	c6 16       	cp	r12, r22
     9ae:	d7 06       	cpc	r13, r23
     9b0:	e8 06       	cpc	r14, r24
     9b2:	f9 06       	cpc	r15, r25
     9b4:	a0 f4       	brcc	.+40     	; 0x9de <buttonDebounce(bool, bool, bool, unsigned long)+0x74>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1412
    buttonRightTimeStamp = millis();
     9b6:	ca dd       	rcall	.-1132   	; 0x54c <millis>
     9b8:	60 93 33 3a 	sts	0x3A33, r22	; 0x803a33 <buttonRightTimeStamp>
     9bc:	70 93 34 3a 	sts	0x3A34, r23	; 0x803a34 <buttonRightTimeStamp+0x1>
     9c0:	80 93 35 3a 	sts	0x3A35, r24	; 0x803a35 <buttonRightTimeStamp+0x2>
     9c4:	90 93 36 3a 	sts	0x3A36, r25	; 0x803a36 <buttonRightTimeStamp+0x3>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1433
  } else if (!SLEEPMENULOW) {
    buttonMenuTimeStamp = millis();
  }

  return false;
}
     9c8:	8c 2f       	mov	r24, r28
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	cf 90       	pop	r12
     9da:	bf 90       	pop	r11
     9dc:	08 95       	ret
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1414
bool buttonDebounce(bool left, bool right, bool menu, uint32_t debounceTime ) {// code to debounce button press

  if (RIGHTLOW && right && (millis() - buttonRightTimeStamp) > debounceTime) {
    buttonRightTimeStamp = millis();
    return true;
  } else if (!RIGHTLOW) {
     9de:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
     9e2:	81 ff       	sbrs	r24, 1
     9e4:	09 c0       	rjmp	.+18     	; 0x9f8 <buttonDebounce(bool, bool, bool, unsigned long)+0x8e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1415
    buttonRightTimeStamp = millis();
     9e6:	b2 dd       	rcall	.-1180   	; 0x54c <millis>
     9e8:	60 93 33 3a 	sts	0x3A33, r22	; 0x803a33 <buttonRightTimeStamp>
     9ec:	70 93 34 3a 	sts	0x3A34, r23	; 0x803a34 <buttonRightTimeStamp+0x1>
     9f0:	80 93 35 3a 	sts	0x3A35, r24	; 0x803a35 <buttonRightTimeStamp+0x2>
     9f4:	90 93 36 3a 	sts	0x3A36, r25	; 0x803a36 <buttonRightTimeStamp+0x3>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1418
  }

  if (LEFTLOW && left && (millis() - buttonLeftTimeStamp) > debounceTime) {
     9f8:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
     9fc:	82 ff       	sbrs	r24, 2
     9fe:	17 c0       	rjmp	.+46     	; 0xa2e <buttonDebounce(bool, bool, bool, unsigned long)+0xc4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1421
    buttonLeftTimeStamp = millis();
    return true;
  } else if (!LEFTLOW) {
     a00:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
     a04:	82 ff       	sbrs	r24, 2
     a06:	09 c0       	rjmp	.+18     	; 0xa1a <buttonDebounce(bool, bool, bool, unsigned long)+0xb0>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1422
    buttonLeftTimeStamp = millis();
     a08:	a1 dd       	rcall	.-1214   	; 0x54c <millis>
     a0a:	60 93 2f 3a 	sts	0x3A2F, r22	; 0x803a2f <buttonLeftTimeStamp>
     a0e:	70 93 30 3a 	sts	0x3A30, r23	; 0x803a30 <buttonLeftTimeStamp+0x1>
     a12:	80 93 31 3a 	sts	0x3A31, r24	; 0x803a31 <buttonLeftTimeStamp+0x2>
     a16:	90 93 32 3a 	sts	0x3A32, r25	; 0x803a32 <buttonLeftTimeStamp+0x3>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1425
  }

  if (SLEEPMENULOW && menu && (millis() - buttonMenuTimeStamp) > debounceTime) {
     a1a:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
     a1e:	83 ff       	sbrs	r24, 3
     a20:	25 c0       	rjmp	.+74     	; 0xa6c <buttonDebounce(bool, bool, bool, unsigned long)+0x102>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1428
    buttonMenuTimeStamp = millis();
    return true;
  } else if (!SLEEPMENULOW) {
     a22:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
     a26:	83 fd       	sbrc	r24, 3
     a28:	40 c0       	rjmp	.+128    	; 0xaaa <buttonDebounce(bool, bool, bool, unsigned long)+0x140>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1432
    buttonMenuTimeStamp = millis();
  }

  return false;
     a2a:	c0 e0       	ldi	r28, 0x00	; 0
     a2c:	cd cf       	rjmp	.-102    	; 0x9c8 <buttonDebounce(bool, bool, bool, unsigned long)+0x5e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1418
    return true;
  } else if (!RIGHTLOW) {
    buttonRightTimeStamp = millis();
  }

  if (LEFTLOW && left && (millis() - buttonLeftTimeStamp) > debounceTime) {
     a2e:	bb 20       	and	r11, r11
     a30:	39 f3       	breq	.-50     	; 0xa00 <buttonDebounce(bool, bool, bool, unsigned long)+0x96>
     a32:	8c dd       	rcall	.-1256   	; 0x54c <millis>
     a34:	00 91 2f 3a 	lds	r16, 0x3A2F	; 0x803a2f <buttonLeftTimeStamp>
     a38:	10 91 30 3a 	lds	r17, 0x3A30	; 0x803a30 <buttonLeftTimeStamp+0x1>
     a3c:	20 91 31 3a 	lds	r18, 0x3A31	; 0x803a31 <buttonLeftTimeStamp+0x2>
     a40:	30 91 32 3a 	lds	r19, 0x3A32	; 0x803a32 <buttonLeftTimeStamp+0x3>
     a44:	60 1b       	sub	r22, r16
     a46:	71 0b       	sbc	r23, r17
     a48:	82 0b       	sbc	r24, r18
     a4a:	93 0b       	sbc	r25, r19
     a4c:	c6 16       	cp	r12, r22
     a4e:	d7 06       	cpc	r13, r23
     a50:	e8 06       	cpc	r14, r24
     a52:	f9 06       	cpc	r15, r25
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1419
    buttonLeftTimeStamp = millis();
     a54:	a8 f6       	brcc	.-86     	; 0xa00 <buttonDebounce(bool, bool, bool, unsigned long)+0x96>
     a56:	7a dd       	rcall	.-1292   	; 0x54c <millis>
     a58:	60 93 2f 3a 	sts	0x3A2F, r22	; 0x803a2f <buttonLeftTimeStamp>
     a5c:	70 93 30 3a 	sts	0x3A30, r23	; 0x803a30 <buttonLeftTimeStamp+0x1>
     a60:	80 93 31 3a 	sts	0x3A31, r24	; 0x803a31 <buttonLeftTimeStamp+0x2>
     a64:	90 93 32 3a 	sts	0x3A32, r25	; 0x803a32 <buttonLeftTimeStamp+0x3>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1420
    return true;
     a68:	cb 2d       	mov	r28, r11
     a6a:	ae cf       	rjmp	.-164    	; 0x9c8 <buttonDebounce(bool, bool, bool, unsigned long)+0x5e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1425
  } else if (!LEFTLOW) {
    buttonLeftTimeStamp = millis();
  }

  if (SLEEPMENULOW && menu && (millis() - buttonMenuTimeStamp) > debounceTime) {
     a6c:	dd 23       	and	r29, r29
     a6e:	c9 f2       	breq	.-78     	; 0xa22 <buttonDebounce(bool, bool, bool, unsigned long)+0xb8>
     a70:	6d dd       	rcall	.-1318   	; 0x54c <millis>
     a72:	00 91 2b 3a 	lds	r16, 0x3A2B	; 0x803a2b <buttonMenuTimeStamp>
     a76:	10 91 2c 3a 	lds	r17, 0x3A2C	; 0x803a2c <buttonMenuTimeStamp+0x1>
     a7a:	20 91 2d 3a 	lds	r18, 0x3A2D	; 0x803a2d <buttonMenuTimeStamp+0x2>
     a7e:	30 91 2e 3a 	lds	r19, 0x3A2E	; 0x803a2e <buttonMenuTimeStamp+0x3>
     a82:	60 1b       	sub	r22, r16
     a84:	71 0b       	sbc	r23, r17
     a86:	82 0b       	sbc	r24, r18
     a88:	93 0b       	sbc	r25, r19
     a8a:	c6 16       	cp	r12, r22
     a8c:	d7 06       	cpc	r13, r23
     a8e:	e8 06       	cpc	r14, r24
     a90:	f9 06       	cpc	r15, r25
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1426
    buttonMenuTimeStamp = millis();
     a92:	38 f6       	brcc	.-114    	; 0xa22 <buttonDebounce(bool, bool, bool, unsigned long)+0xb8>
     a94:	5b dd       	rcall	.-1354   	; 0x54c <millis>
     a96:	60 93 2b 3a 	sts	0x3A2B, r22	; 0x803a2b <buttonMenuTimeStamp>
     a9a:	70 93 2c 3a 	sts	0x3A2C, r23	; 0x803a2c <buttonMenuTimeStamp+0x1>
     a9e:	80 93 2d 3a 	sts	0x3A2D, r24	; 0x803a2d <buttonMenuTimeStamp+0x2>
     aa2:	90 93 2e 3a 	sts	0x3A2E, r25	; 0x803a2e <buttonMenuTimeStamp+0x3>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1427
    return true;
     aa6:	cd 2f       	mov	r28, r29
     aa8:	8f cf       	rjmp	.-226    	; 0x9c8 <buttonDebounce(bool, bool, bool, unsigned long)+0x5e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1429
  } else if (!SLEEPMENULOW) {
    buttonMenuTimeStamp = millis();
     aaa:	50 dd       	rcall	.-1376   	; 0x54c <millis>
     aac:	60 93 2b 3a 	sts	0x3A2B, r22	; 0x803a2b <buttonMenuTimeStamp>
     ab0:	70 93 2c 3a 	sts	0x3A2C, r23	; 0x803a2c <buttonMenuTimeStamp+0x1>
     ab4:	80 93 2d 3a 	sts	0x3A2D, r24	; 0x803a2d <buttonMenuTimeStamp+0x2>
     ab8:	90 93 2e 3a 	sts	0x3A2E, r25	; 0x803a2e <buttonMenuTimeStamp+0x3>
     abc:	b6 cf       	rjmp	.-148    	; 0xa2a <buttonDebounce(bool, bool, bool, unsigned long)+0xc0>

00000abe <digitalWrite.constprop.17>:
digitalWrite.constprop.17():
     abe:	92 e0       	ldi	r25, 0x02	; 2
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_digital.c:324
  you could digitalWrite() a pin while it's an input, to ensure
  that the value of the port was set correctly when it was
  changed to an output. Code in the wild relies on this behavior. */

  if (val == LOW) { /* If LOW */
    port->OUTCLR = bit_mask;
     ac0:	81 11       	cpse	r24, r1
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_digital.c:323
  the behavior of digitalWrite() on classic AVR devices, where
  you could digitalWrite() a pin while it's an input, to ensure
  that the value of the port was set correctly when it was
  changed to an output. Code in the wild relies on this behavior. */

  if (val == LOW) { /* If LOW */
     ac2:	16 c0       	rjmp	.+44     	; 0xaf0 <digitalWrite.constprop.17+0x32>
     ac4:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <encoderDir+0x7f48ca>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_digital.c:324
    port->OUTCLR = bit_mask;
     ac8:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <encoderDir+0x7f48c4>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_digital.c:348
  } else {
    port->OUTSET = bit_mask;
  }

  /* Input direction */
  if (!(port->DIR & bit_mask)) {
     acc:	91 fd       	sbrc	r25, 1
     ace:	0a c0       	rjmp	.+20     	; 0xae4 <digitalWrite.constprop.17+0x26>
     ad0:	9f b7       	in	r25, 0x3f	; 63
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_digital.c:361

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
     ad2:	f8 94       	cli
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_digital.c:362
    cli();
     ad4:	81 11       	cpse	r24, r1
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_digital.c:364

    if (val == LOW) {
     ad6:	0f c0       	rjmp	.+30     	; 0xaf6 <digitalWrite.constprop.17+0x38>
     ad8:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <encoderDir+0x7f48d5>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_digital.c:366
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
     adc:	87 7f       	andi	r24, 0xF7	; 247
     ade:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <encoderDir+0x7f48d5>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_digital.c:369
    } else {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     ae2:	9f bf       	out	0x3f, r25	; 63
turnOffPWM():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_digital.c:373
    }

    /* Restore system status */
    SREG = status;
     ae4:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <encoderDir+0x7f4ea5>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_digital.c:250
      #endif
      if (bit_mask > 0x04) { // -> bit_pos > 2 -> output channel controlled by HCMP
        bit_mask <<= 1;      // mind the gap (between LCMP and HCMP)
      }
      // since we're turning it off, we don't need to change the CMP register
      TCA0.SPLIT.CTRLB &= ~bit_mask;
     ae8:	8d 7f       	andi	r24, 0xFD	; 253
     aea:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <encoderDir+0x7f4ea5>
digitalWrite.constprop.17():
     aee:	08 95       	ret
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_digital.c:386
   * analogWritten() 255, then digitallyWritten() to HIGH, which
   * would turn it off for the time between turnOffPWM() and
   * PORT->OUTCLR)
   * Since there's no penalty, why make a glitch we don't have to? */
  turnOffPWM(pin);
}
     af0:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <encoderDir+0x7f48c9>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_digital.c:344
    // val will now be 0 (LOW) if the toggling made it LOW
    // or bit_mask if not. And further down, we only need to
    // know if it's
  /* If HIGH OR  > TOGGLE  */
  } else {
    port->OUTSET = bit_mask;
     af4:	e9 cf       	rjmp	.-46     	; 0xac8 <digitalWrite.constprop.17+0xa>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_digital.c:369
    if (val == LOW) {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    } else {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     af6:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <encoderDir+0x7f48d5>
     afa:	88 60       	ori	r24, 0x08	; 8
     afc:	f0 cf       	rjmp	.-32     	; 0xade <digitalWrite.constprop.17+0x20>

00000afe <beep(int, int)>:
_Z4beepii():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1685
  uint32_t intermediate = 1023UL * 1500;
  reading = intermediate / reading;
  return reading;
}

void beep(int Count, int Delay) { // sound function
     afe:	cf 92       	push	r12
     b00:	df 92       	push	r13
     b02:	ef 92       	push	r14
     b04:	ff 92       	push	r15
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1686
  if (!sound) {
     b0c:	df 93       	push	r29
     b0e:	20 91 6f 3b 	lds	r18, 0x3B6F	; 0x803b6f <sound>
     b12:	22 23       	and	r18, r18
     b14:	e9 f0       	breq	.+58     	; 0xb50 <beep(int, int)+0x52>
     b16:	6b 01       	movw	r12, r22
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1689
    return;
  }
  for (int x = 0; x <= Count; x++) {
     b18:	7c 01       	movw	r14, r24
     b1a:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1690
    digitalWrite(BUZZER, HIGH);
     b1c:	00 e0       	ldi	r16, 0x00	; 0
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	ce df       	rcall	.-100    	; 0xabe <digitalWrite.constprop.17>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1691
    for (int y = 0; y < Delay; y++) {
     b22:	d0 e0       	ldi	r29, 0x00	; 0
     b24:	c0 e0       	ldi	r28, 0x00	; 0
     b26:	cc 16       	cp	r12, r28
     b28:	dd 06       	cpc	r13, r29
     b2a:	19 f0       	breq	.+6      	; 0xb32 <beep(int, int)+0x34>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1692
      __asm__("nop\n\t"); //small code dealy needed to generate sound
     b2c:	00 00       	nop
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1691
  if (!sound) {
    return;
  }
  for (int x = 0; x <= Count; x++) {
    digitalWrite(BUZZER, HIGH);
    for (int y = 0; y < Delay; y++) {
     b2e:	21 96       	adiw	r28, 0x01	; 1
     b30:	fa cf       	rjmp	.-12     	; 0xb26 <beep(int, int)+0x28>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1693
      __asm__("nop\n\t"); //small code dealy needed to generate sound
    } digitalWrite(BUZZER, LOW);
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	c4 df       	rcall	.-120    	; 0xabe <digitalWrite.constprop.17>
     b36:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1694
    for (int y = 0; y < Delay; y++) {
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	c8 17       	cp	r28, r24
     b3c:	d9 07       	cpc	r29, r25
     b3e:	19 f0       	breq	.+6      	; 0xb46 <beep(int, int)+0x48>
     b40:	00 00       	nop
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1695
      __asm__("nop\n\t");
     b42:	01 96       	adiw	r24, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1694
  for (int x = 0; x <= Count; x++) {
    digitalWrite(BUZZER, HIGH);
    for (int y = 0; y < Delay; y++) {
      __asm__("nop\n\t"); //small code dealy needed to generate sound
    } digitalWrite(BUZZER, LOW);
    for (int y = 0; y < Delay; y++) {
     b44:	fa cf       	rjmp	.-12     	; 0xb3a <beep(int, int)+0x3c>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1689

void beep(int Count, int Delay) { // sound function
  if (!sound) {
    return;
  }
  for (int x = 0; x <= Count; x++) {
     b46:	0f 5f       	subi	r16, 0xFF	; 255
     b48:	1f 4f       	sbci	r17, 0xFF	; 255
     b4a:	e0 16       	cp	r14, r16
     b4c:	f1 06       	cpc	r15, r17
     b4e:	3c f7       	brge	.-50     	; 0xb1e <beep(int, int)+0x20>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1698
    } digitalWrite(BUZZER, LOW);
    for (int y = 0; y < Delay; y++) {
      __asm__("nop\n\t");
    }
  }
}
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	df 90       	pop	r13
     b5e:	cf 90       	pop	r12
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1378
uint8_t tinyNeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void tinyNeoPixel::clear() {
  memset(pixels, 0, numBytes);
     b60:	08 95       	ret

00000b62 <tinyNeoPixel::clear() [clone .constprop.10]>:
_ZN12tinyNeoPixel5clearEv.constprop.10():
     b62:	ea e8       	ldi	r30, 0x8A	; 138
     b64:	fb e3       	ldi	r31, 0x3B	; 59
     b66:	42 81       	ldd	r20, Z+2	; 0x02
     b68:	53 81       	ldd	r21, Z+3	; 0x03
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	86 81       	ldd	r24, Z+6	; 0x06
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1521
}

// clock

void showclock () {
  colorSelect ();
     b70:	97 81       	ldd	r25, Z+7	; 0x07
     b72:	0c 94 88 1d 	jmp	0x3b10	; 0x3b10 <memset>

00000b76 <showclock()>:
_Z9showclockv():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1522
  if (minutes != lastMinute) { // time update occurs only once every minute
     b76:	03 de       	rcall	.-1018   	; 0x77e <colorSelect()>
     b78:	90 91 67 3b 	lds	r25, 0x3B67	; 0x803b67 <minutes>
     b7c:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <lastMinute>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1523
    lastMinute = minutes;
     b80:	98 17       	cp	r25, r24
     b82:	69 f0       	breq	.+26     	; 0xb9e <showclock()+0x28>
     b84:	80 91 67 3b 	lds	r24, 0x3B67	; 0x803b67 <minutes>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1524
    strip.clear();
     b88:	80 93 1f 3a 	sts	0x3A1F, r24	; 0x803a1f <lastMinute>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1525
    showTime(53, minutes);
     b8c:	ea df       	rcall	.-44     	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
     b8e:	60 91 67 3b 	lds	r22, 0x3B67	; 0x803b67 <minutes>
     b92:	85 e3       	ldi	r24, 0x35	; 53
     b94:	4c de       	rcall	.-872    	; 0x82e <showTime(unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1526
    showTime(0, hours);
     b96:	60 91 68 3b 	lds	r22, 0x3B68	; 0x803b68 <hours>
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	48 ce       	rjmp	.-880    	; 0x82e <showTime(unsigned char, unsigned char)>
     b9e:	08 95       	ret

00000ba0 <battStatus()>:
_Z10battStatusv():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1528
  }
}
     ba0:	cf 92       	push	r12
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1657
      blue = 80;
      break;
  }
}

void battStatus() { // show batt status color coded green is full, red empty
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
analogReference():
     bac:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <encoderDir+0x7f4545>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:665
  switch (mode) {
    #if defined(EXTERNAL)
      case EXTERNAL:
    #endif
    case VDD:
      VREF.CTRLB &= ~VREF_ADC0REFEN_bm; // Turn off force-adc-reference-enable
     bb0:	8d 7f       	andi	r24, 0xFD	; 253
     bb2:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <encoderDir+0x7f4545>
     bb6:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <encoderDir+0x7f4aa6>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:666
      ADC0.CTRLC = (ADC0.CTRLC & ~(ADC_REFSEL_gm)) | mode | ADC_SAMPCAP_bm; // per datasheet, recommended SAMPCAP=1 at ref > 1v - we don't *KNOW* the external reference will be >1v, but it's probably more likely...
     bba:	8f 7c       	andi	r24, 0xCF	; 207
     bbc:	80 65       	ori	r24, 0x50	; 80
     bbe:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <encoderDir+0x7f4aa6>
readSupplyVoltage():
     bc2:	80 e4       	ldi	r24, 0x40	; 64
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1672
  }
}

uint16_t readSupplyVoltage() { //returns value in millivolts  taken from megaTinyCore example
  analogReference(VDD);
  VREF.CTRLA = VREF_ADC0REFSEL_1V5_gc;
     bc4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <encoderDir+0x7f4544>
analogRead():
     bc8:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <encoderDir+0x7f4aa4>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:698
      // don't waste flash on smallest parts.
      if ((pin & 0x7F) > 0x1F) { // highest valid mux value for any 0 or 1-series part.
        return ADC_ERROR_BAD_PIN_OR_CHANNEL;
      }
    #endif
    if (!ADC0.CTRLA & 0x01) return ADC_ERROR_DISABLED;
     bcc:	88 23       	and	r24, r24
     bce:	71 f0       	breq	.+28     	; 0xbec <battStatus()+0x4c>
     bd0:	8d e1       	ldi	r24, 0x1D	; 29
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:702
    pin &= 0x1F;
    /* Reference should be already set up */
    /* Select channel */
    ADC0.MUXPOS = (pin << ADC_MUXPOS_gp);
     bd2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <encoderDir+0x7f4aaa>
     bd6:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:709
    #if defined(STRICT_ERROR_CHECKING)
      if (ADC0.COMMAND) return ADC_ERROR_BUSY;
    #endif

    /* Start conversion */
    ADC0.COMMAND = ADC_STCONV_bm;
     bd8:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <encoderDir+0x7f4aac>
     bdc:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <encoderDir+0x7f4aaf>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:712

    /* Wait for result ready */
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm));
     be0:	80 ff       	sbrs	r24, 0
     be2:	fc cf       	rjmp	.-8      	; 0xbdc <battStatus()+0x3c>
     be4:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <encoderDir+0x7f4ab4>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:715

    /* Combine two bytes */
    return ADC0.RES;
     be8:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <encoderDir+0x7f4ab5>
     bec:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <encoderDir+0x7f4aa4>
_Z10battStatusv():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:698
      // don't waste flash on smallest parts.
      if ((pin & 0x7F) > 0x1F) { // highest valid mux value for any 0 or 1-series part.
        return ADC_ERROR_BAD_PIN_OR_CHANNEL;
      }
    #endif
    if (!ADC0.CTRLA & 0x01) return ADC_ERROR_DISABLED;
     bf0:	29 ef       	ldi	r18, 0xF9	; 249
     bf2:	32 e8       	ldi	r19, 0x82	; 130
analogRead():
     bf4:	88 23       	and	r24, r24
     bf6:	71 f0       	breq	.+28     	; 0xc14 <battStatus()+0x74>
     bf8:	8d e1       	ldi	r24, 0x1D	; 29
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:702
    pin &= 0x1F;
    /* Reference should be already set up */
    /* Select channel */
    ADC0.MUXPOS = (pin << ADC_MUXPOS_gp);
     bfa:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <encoderDir+0x7f4aaa>
     bfe:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:709
    #if defined(STRICT_ERROR_CHECKING)
      if (ADC0.COMMAND) return ADC_ERROR_BUSY;
    #endif

    /* Start conversion */
    ADC0.COMMAND = ADC_STCONV_bm;
     c00:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <encoderDir+0x7f4aac>
     c04:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <encoderDir+0x7f4aaf>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:712

    /* Wait for result ready */
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm));
     c08:	80 ff       	sbrs	r24, 0
     c0a:	fc cf       	rjmp	.-8      	; 0xc04 <battStatus()+0x64>
     c0c:	20 91 10 06 	lds	r18, 0x0610	; 0x800610 <encoderDir+0x7f4ab4>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:715

    /* Combine two bytes */
    return ADC0.RES;
     c10:	30 91 11 06 	lds	r19, 0x0611	; 0x800611 <encoderDir+0x7f4ab5>
readSupplyVoltage():
     c14:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1681
  // VREF.CTRLB|=VREF_ADC0REFEN_bm;
  // delay(10);
  uint16_t reading = analogRead(ADC_INTREF);
  reading = analogRead(ADC_INTREF);
  uint32_t intermediate = 1023UL * 1500;
  reading = intermediate / reading;
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	64 e2       	ldi	r22, 0x24	; 36
     c1a:	7a e6       	ldi	r23, 0x6A	; 106
     c1c:	87 e1       	ldi	r24, 0x17	; 23
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__udivmodsi4>
_Z10battStatusv():
     c24:	44 27       	eor	r20, r20
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1658
      break;
  }
}

void battStatus() { // show batt status color coded green is full, red empty
  voltageReading = map(readSupplyVoltage(), 2980, 3970, 0, 9);
     c26:	55 27       	eor	r21, r21
map():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore\api/Common.cpp:5
#include "Common.h"

/* C++ prototypes */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     c28:	24 5a       	subi	r18, 0xA4	; 164
     c2a:	3b 40       	sbci	r19, 0x0B	; 11
     c2c:	41 09       	sbc	r20, r1
     c2e:	51 09       	sbc	r21, r1
     c30:	a9 e0       	ldi	r26, 0x09	; 9
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__muluhisi3>
     c38:	2e ed       	ldi	r18, 0xDE	; 222
     c3a:	33 e0       	ldi	r19, 0x03	; 3
     c3c:	40 e0       	ldi	r20, 0x00	; 0
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__divmodsi4>
     c44:	69 01       	movw	r12, r18
_Z10battStatusv():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1658
     c46:	e9 01       	movw	r28, r18
     c48:	20 93 37 3a 	sts	0x3A37, r18	; 0x803a37 <voltageReading>
     c4c:	30 93 38 3a 	sts	0x3A38, r19	; 0x803a38 <voltageReading+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1659
  if (voltageReading > 5) {
     c50:	26 30       	cpi	r18, 0x06	; 6
     c52:	31 05       	cpc	r19, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1660
    strip.setPixelColor(9, 0, 100, 0);
     c54:	34 f0       	brlt	.+12     	; 0xc62 <battStatus()+0xc2>
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	44 e6       	ldi	r20, 0x64	; 100
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	89 e0       	ldi	r24, 0x09	; 9
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	6f db       	rcall	.-2338   	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1662
  }
  if (voltageReading <= 5 && voltageReading > 2) {
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	c8 1a       	sub	r12, r24
     c66:	d1 08       	sbc	r13, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1663
    strip.setPixelColor(9, 100, 100, 0);
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	44 e6       	ldi	r20, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1662
void battStatus() { // show batt status color coded green is full, red empty
  voltageReading = map(readSupplyVoltage(), 2980, 3970, 0, 9);
  if (voltageReading > 5) {
    strip.setPixelColor(9, 0, 100, 0);
  }
  if (voltageReading <= 5 && voltageReading > 2) {
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	c8 16       	cp	r12, r24
     c70:	d1 04       	cpc	r13, r1
     c72:	20 f0       	brcs	.+8      	; 0xc7c <battStatus()+0xdc>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1665
    strip.setPixelColor(9, 100, 100, 0);
  }
  if (voltageReading <= 2) {
     c74:	23 97       	sbiw	r28, 0x03	; 3
     c76:	64 f4       	brge	.+24     	; 0xc90 <battStatus()+0xf0>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1666
    strip.setPixelColor(9, 100, 0, 0);
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	64 e6       	ldi	r22, 0x64	; 100
     c7e:	89 e0       	ldi	r24, 0x09	; 9
     c80:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1668
  }
}
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	ff 90       	pop	r15
     c88:	ef 90       	pop	r14
     c8a:	df 90       	pop	r13
     c8c:	cf 90       	pop	r12
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1666
  }
  if (voltageReading <= 5 && voltageReading > 2) {
    strip.setPixelColor(9, 100, 100, 0);
  }
  if (voltageReading <= 2) {
    strip.setPixelColor(9, 100, 0, 0);
     c8e:	58 cb       	rjmp	.-2384   	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
     c90:	df 91       	pop	r29
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1668
  }
}
     c92:	cf 91       	pop	r28
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	df 90       	pop	r13
     c9a:	cf 90       	pop	r12
     c9c:	08 95       	ret

00000c9e <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)>:
_Z12scrollPixelsPA9_hhhh():
     c9e:	2f 92       	push	r2
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1382
    }
  }
  strip.clear();
}

void scrollPixels(uint8_t arrayName[5][9], uint8_t red, uint8_t green, uint8_t blue) {// code to scroll the tiltle
     ca0:	3f 92       	push	r3
     ca2:	4f 92       	push	r4
     ca4:	5f 92       	push	r5
     ca6:	6f 92       	push	r6
     ca8:	7f 92       	push	r7
     caa:	8f 92       	push	r8
     cac:	9f 92       	push	r9
     cae:	af 92       	push	r10
     cb0:	bf 92       	push	r11
     cb2:	cf 92       	push	r12
     cb4:	df 92       	push	r13
     cb6:	ef 92       	push	r14
     cb8:	ff 92       	push	r15
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	2a 97       	sbiw	r28, 0x0a	; 10
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	8f 83       	std	Y+7, r24	; 0x07
     cce:	98 87       	std	Y+8, r25	; 0x08
     cd0:	6c 83       	std	Y+4, r22	; 0x04
     cd2:	4d 83       	std	Y+5, r20	; 0x05
     cd4:	2e 83       	std	Y+6, r18	; 0x06
     cd6:	10 e0       	ldi	r17, 0x00	; 0
     cd8:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1387
  uint8_t led;
  uint8_t pixel;
  uint32_t pixelColor;

  for (uint8_t pixelY = 0; pixelY < 9 && LEFTHIGH && RIGHTHIGH; pixelY++) {
     cda:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
     cde:	82 ff       	sbrs	r24, 2
     ce0:	54 c1       	rjmp	.+680    	; 0xf8a <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x2ec>
     ce2:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
     ce6:	81 ff       	sbrs	r24, 1
     ce8:	50 c1       	rjmp	.+672    	; 0xf8a <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x2ec>
     cea:	28 e5       	ldi	r18, 0x58	; 88
     cec:	32 e0       	ldi	r19, 0x02	; 2
     cee:	29 87       	std	Y+9, r18	; 0x09
     cf0:	3a 87       	std	Y+10, r19	; 0x0a
     cf2:	ef 80       	ldd	r14, Y+7	; 0x07
     cf4:	f8 84       	ldd	r15, Y+8	; 0x08
     cf6:	e0 0e       	add	r14, r16
     cf8:	f1 1e       	adc	r15, r17
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1390

    for (uint8_t x = 0; x < 5; x++) { // scroll text from right to left only on colum of information is draw
      led = pgm_read_byte_near (wallRight + x);
     cfa:	e9 85       	ldd	r30, Y+9	; 0x09
     cfc:	fa 85       	ldd	r31, Y+10	; 0x0a
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1392
      pixel = arrayName  [x] [pixelY];
      if (pixel == 1) {
     cfe:	84 91       	lpm	r24, Z
     d00:	f7 01       	movw	r30, r14
     d02:	20 81       	ld	r18, Z
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	21 30       	cpi	r18, 0x01	; 1
     d08:	09 f0       	breq	.+2      	; 0xd0c <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x6e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1393
        strip.setPixelColor(led, red, green, blue);
     d0a:	90 c0       	rjmp	.+288    	; 0xe2c <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x18e>
     d0c:	2e 81       	ldd	r18, Y+6	; 0x06
     d0e:	4d 81       	ldd	r20, Y+5	; 0x05
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1395
      } else {
        strip.setPixelColor(led, 0, 0, 0);
     d10:	6c 81       	ldd	r22, Y+4	; 0x04
     d12:	16 db       	rcall	.-2516   	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
     d14:	29 85       	ldd	r18, Y+9	; 0x09
     d16:	3a 85       	ldd	r19, Y+10	; 0x0a
     d18:	2f 5f       	subi	r18, 0xFF	; 255
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	29 87       	std	Y+9, r18	; 0x09
     d1e:	3a 87       	std	Y+10, r19	; 0x0a
     d20:	39 e0       	ldi	r19, 0x09	; 9
     d22:	e3 0e       	add	r14, r19
     d24:	f1 1c       	adc	r15, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1389
  uint8_t pixel;
  uint32_t pixelColor;

  for (uint8_t pixelY = 0; pixelY < 9 && LEFTHIGH && RIGHTHIGH; pixelY++) {

    for (uint8_t x = 0; x < 5; x++) { // scroll text from right to left only on colum of information is draw
     d26:	89 85       	ldd	r24, Y+9	; 0x09
     d28:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2a:	8d 55       	subi	r24, 0x5D	; 93
     d2c:	92 40       	sbci	r25, 0x02	; 2
     d2e:	29 f7       	brne	.-54     	; 0xcfa <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x5c>
delay():
     d30:	66 e9       	ldi	r22, 0x96	; 150
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	47 dc       	rcall	.-1906   	; 0x5c8 <delay.part.0>
     d3a:	19 86       	std	Y+9, r1	; 0x09
     d3c:	1a 86       	std	Y+10, r1	; 0x0a
getPixelColor():
     d3e:	80 91 8a 3b 	lds	r24, 0x3B8A	; 0x803b8a <strip>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1281
}


// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t tinyNeoPixel::getPixelColor(uint16_t n) const {
  if (n >= numLEDs) {
     d42:	90 91 8b 3b 	lds	r25, 0x3B8B	; 0x803b8b <strip+0x1>
     d46:	29 85       	ldd	r18, Y+9	; 0x09
     d48:	3a 85       	ldd	r19, Y+10	; 0x0a
_Z12scrollPixelsPA9_hhhh():
     d4a:	81 2c       	mov	r8, r1
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1282
    return 0;  // Out of bounds, return no color.
     d4c:	91 2c       	mov	r9, r1
     d4e:	54 01       	movw	r10, r8
getPixelColor():
     d50:	28 17       	cp	r18, r24
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1281
}


// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t tinyNeoPixel::getPixelColor(uint16_t n) const {
  if (n >= numLEDs) {
     d52:	39 07       	cpc	r19, r25
     d54:	08 f0       	brcs	.+2      	; 0xd58 <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0xba>
     d56:	fb c0       	rjmp	.+502    	; 0xf4e <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x2b0>
     d58:	40 91 95 3b 	lds	r20, 0x3B95	; 0x803b95 <strip+0xb>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1287
    return 0;  // Out of bounds, return no color.
  }

  uint8_t *p;

  if (wOffset == rOffset) { // Is RGB-type device
     d5c:	e0 91 92 3b 	lds	r30, 0x3B92	; 0x803b92 <strip+0x8>
     d60:	c0 90 8f 3b 	lds	r12, 0x3B8F	; 0x803b8f <strip+0x5>
     d64:	60 90 90 3b 	lds	r6, 0x3B90	; 0x803b90 <strip+0x6>
     d68:	70 90 91 3b 	lds	r7, 0x3B91	; 0x803b91 <strip+0x7>
     d6c:	80 91 93 3b 	lds	r24, 0x3B93	; 0x803b93 <strip+0x9>
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	20 91 94 3b 	lds	r18, 0x3B94	; 0x803b94 <strip+0xa>
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	24 2e       	mov	r2, r20
     d7a:	31 2c       	mov	r3, r1
     d7c:	49 84       	ldd	r4, Y+9	; 0x09
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1288
    p = &pixels[n * 3];
     d7e:	5a 84       	ldd	r5, Y+10	; 0x0a
     d80:	4e 13       	cpse	r20, r30
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1287
    return 0;  // Out of bounds, return no color.
  }

  uint8_t *p;

  if (wOffset == rOffset) { // Is RGB-type device
     d82:	63 c0       	rjmp	.+198    	; 0xe4a <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x1ac>
     d84:	44 0c       	add	r4, r4
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1288
    p = &pixels[n * 3];
     d86:	55 1c       	adc	r5, r5
     d88:	49 85       	ldd	r20, Y+9	; 0x09
     d8a:	5a 85       	ldd	r21, Y+10	; 0x0a
     d8c:	44 0d       	add	r20, r4
     d8e:	55 1d       	adc	r21, r5
     d90:	46 0d       	add	r20, r6
     d92:	57 1d       	adc	r21, r7
     d94:	fa 01       	movw	r30, r20
     d96:	e2 0d       	add	r30, r2
     d98:	f3 1d       	adc	r31, r3
     d9a:	70 81       	ld	r23, Z
     d9c:	84 0f       	add	r24, r20
     d9e:	95 1f       	adc	r25, r21
     da0:	fc 01       	movw	r30, r24
     da2:	30 80       	ld	r3, Z
     da4:	24 0f       	add	r18, r20
     da6:	35 1f       	adc	r19, r21
     da8:	f9 01       	movw	r30, r18
     daa:	20 80       	ld	r2, Z
     dac:	cc 20       	and	r12, r12
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1289
    if (brightness) {
     dae:	09 f4       	brne	.+2      	; 0xdb2 <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x114>
     db0:	41 c0       	rjmp	.+130    	; 0xe34 <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x196>
     db2:	d1 2c       	mov	r13, r1
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1295
      // Stored color was decimated by setBrightness().  Returned value
      // attempts to scale back to an approximation of the original 24-bit
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
     db4:	f1 2c       	mov	r15, r1
     db6:	e1 2c       	mov	r14, r1
     db8:	67 2f       	mov	r22, r23
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	76 2f       	mov	r23, r22
     dbe:	66 27       	eor	r22, r22
     dc0:	07 2e       	mov	r0, r23
     dc2:	00 0c       	add	r0, r0
     dc4:	88 0b       	sbc	r24, r24
     dc6:	99 0b       	sbc	r25, r25
     dc8:	a7 01       	movw	r20, r14
     dca:	96 01       	movw	r18, r12
     dcc:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__udivmodsi4>
     dd0:	59 01       	movw	r10, r18
     dd2:	99 24       	eor	r9, r9
     dd4:	88 24       	eor	r8, r8
     dd6:	63 2d       	mov	r22, r3
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1296
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	76 2f       	mov	r23, r22
     ddc:	66 27       	eor	r22, r22
     dde:	07 2e       	mov	r0, r23
     de0:	00 0c       	add	r0, r0
     de2:	88 0b       	sbc	r24, r24
     de4:	99 0b       	sbc	r25, r25
     de6:	a7 01       	movw	r20, r14
     de8:	96 01       	movw	r18, r12
     dea:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__udivmodsi4>
     dee:	54 2f       	mov	r21, r20
     df0:	43 2f       	mov	r20, r19
     df2:	32 2f       	mov	r19, r18
     df4:	22 27       	eor	r18, r18
     df6:	82 2a       	or	r8, r18
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1295
      // Stored color was decimated by setBrightness().  Returned value
      // attempts to scale back to an approximation of the original 24-bit
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
     df8:	93 2a       	or	r9, r19
     dfa:	a4 2a       	or	r10, r20
     dfc:	b5 2a       	or	r11, r21
     dfe:	62 2d       	mov	r22, r2
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1297
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ((uint32_t)(p[bOffset] << 8) / brightness);
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	76 2f       	mov	r23, r22
     e04:	66 27       	eor	r22, r22
     e06:	07 2e       	mov	r0, r23
     e08:	00 0c       	add	r0, r0
     e0a:	88 0b       	sbc	r24, r24
     e0c:	99 0b       	sbc	r25, r25
     e0e:	a7 01       	movw	r20, r14
     e10:	96 01       	movw	r18, r12
     e12:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__udivmodsi4>
     e16:	82 2a       	or	r8, r18
     e18:	93 2a       	or	r9, r19
     e1a:	a4 2a       	or	r10, r20
     e1c:	b5 2a       	or	r11, r21
setPixelColor():
     e1e:	89 85       	ldd	r24, Y+9	; 0x09
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1133
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    if (wOffset == rOffset) {
      p = &pixels[n * 3];
     e20:	9a 85       	ldd	r25, Y+10	; 0x0a
     e22:	48 0e       	add	r4, r24
     e24:	59 1e       	adc	r5, r25
     e26:	46 0c       	add	r4, r6
     e28:	57 1c       	adc	r5, r7
     e2a:	7f c0       	rjmp	.+254    	; 0xf2a <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x28c>
_Z12scrollPixelsPA9_hhhh():
     e2c:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1395
      led = pgm_read_byte_near (wallRight + x);
      pixel = arrayName  [x] [pixelY];
      if (pixel == 1) {
        strip.setPixelColor(led, red, green, blue);
      } else {
        strip.setPixelColor(led, 0, 0, 0);
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	6f cf       	rjmp	.-290    	; 0xd12 <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x74>
getPixelColor():
     e34:	83 2c       	mov	r8, r3
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1301
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ((uint32_t)(p[bOffset] << 8) / brightness);
    } else {
      // No brightness adjustment has been made -- return 'raw' color
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
     e36:	91 2c       	mov	r9, r1
     e38:	b1 2c       	mov	r11, r1
     e3a:	a1 2c       	mov	r10, r1
     e3c:	ba 2c       	mov	r11, r10
     e3e:	a9 2c       	mov	r10, r9
     e40:	98 2c       	mov	r9, r8
     e42:	88 24       	eor	r8, r8
     e44:	a7 2a       	or	r10, r23
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1300
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ((uint32_t)(p[bOffset] << 8) / brightness);
    } else {
      // No brightness adjustment has been made -- return 'raw' color
      return ((uint32_t)p[rOffset] << 16) |
     e46:	82 28       	or	r8, r2
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1302
             ((uint32_t)p[gOffset] <<  8) |
             (uint32_t)p[bOffset];
     e48:	ea cf       	rjmp	.-44     	; 0xe1e <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x180>
     e4a:	44 0c       	add	r4, r4
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1305
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
     e4c:	55 1c       	adc	r5, r5
     e4e:	44 0c       	add	r4, r4
     e50:	55 1c       	adc	r5, r5
     e52:	a3 01       	movw	r20, r6
     e54:	44 0d       	add	r20, r4
     e56:	55 1d       	adc	r21, r5
     e58:	da 01       	movw	r26, r20
     e5a:	a2 0d       	add	r26, r2
     e5c:	b3 1d       	adc	r27, r3
     e5e:	7c 91       	ld	r23, X
     e60:	e4 0f       	add	r30, r20
     e62:	f5 2f       	mov	r31, r21
     e64:	f1 1d       	adc	r31, r1
     e66:	60 81       	ld	r22, Z
     e68:	6b 83       	std	Y+3, r22	; 0x03
     e6a:	84 0f       	add	r24, r20
     e6c:	95 1f       	adc	r25, r21
     e6e:	fc 01       	movw	r30, r24
     e70:	f0 81       	ld	r31, Z
     e72:	f9 83       	std	Y+1, r31	; 0x01
     e74:	24 0f       	add	r18, r20
     e76:	35 1f       	adc	r19, r21
     e78:	f9 01       	movw	r30, r18
     e7a:	f0 81       	ld	r31, Z
     e7c:	fa 83       	std	Y+2, r31	; 0x02
     e7e:	cc 20       	and	r12, r12
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1306
    if (brightness) { // Return scaled color
     e80:	09 f4       	brne	.+2      	; 0xe84 <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x1e6>
     e82:	99 c0       	rjmp	.+306    	; 0xfb6 <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x318>
     e84:	d1 2c       	mov	r13, r1
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1307
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
     e86:	f1 2c       	mov	r15, r1
     e88:	e1 2c       	mov	r14, r1
     e8a:	67 2f       	mov	r22, r23
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	76 2f       	mov	r23, r22
     e90:	66 27       	eor	r22, r22
     e92:	07 2e       	mov	r0, r23
     e94:	00 0c       	add	r0, r0
     e96:	88 0b       	sbc	r24, r24
     e98:	99 0b       	sbc	r25, r25
     e9a:	a7 01       	movw	r20, r14
     e9c:	96 01       	movw	r18, r12
     e9e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__udivmodsi4>
     ea2:	b2 2e       	mov	r11, r18
     ea4:	aa 24       	eor	r10, r10
     ea6:	99 24       	eor	r9, r9
     ea8:	88 24       	eor	r8, r8
     eaa:	2b 81       	ldd	r18, Y+3	; 0x03
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1308
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
     eac:	62 2f       	mov	r22, r18
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	76 2f       	mov	r23, r22
     eb2:	66 27       	eor	r22, r22
     eb4:	07 2e       	mov	r0, r23
     eb6:	00 0c       	add	r0, r0
     eb8:	88 0b       	sbc	r24, r24
     eba:	99 0b       	sbc	r25, r25
     ebc:	a7 01       	movw	r20, r14
     ebe:	96 01       	movw	r18, r12
     ec0:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__udivmodsi4>
     ec4:	a9 01       	movw	r20, r18
     ec6:	33 27       	eor	r19, r19
     ec8:	22 27       	eor	r18, r18
     eca:	82 2a       	or	r8, r18
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1307
             (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if (brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
     ecc:	93 2a       	or	r9, r19
     ece:	a4 2a       	or	r10, r20
     ed0:	b5 2a       	or	r11, r21
     ed2:	3a 81       	ldd	r19, Y+2	; 0x02
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1310
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ((uint32_t)(p[bOffset] << 8) / brightness);
     ed4:	63 2f       	mov	r22, r19
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	76 2f       	mov	r23, r22
     eda:	66 27       	eor	r22, r22
     edc:	07 2e       	mov	r0, r23
     ede:	00 0c       	add	r0, r0
     ee0:	88 0b       	sbc	r24, r24
     ee2:	99 0b       	sbc	r25, r25
     ee4:	a7 01       	movw	r20, r14
     ee6:	96 01       	movw	r18, r12
     ee8:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__udivmodsi4>
     eec:	82 2a       	or	r8, r18
     eee:	93 2a       	or	r9, r19
     ef0:	a4 2a       	or	r10, r20
     ef2:	b5 2a       	or	r11, r21
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1309
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if (brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
     ef6:	68 2f       	mov	r22, r24
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	76 2f       	mov	r23, r22
     efc:	66 27       	eor	r22, r22
     efe:	07 2e       	mov	r0, r23
     f00:	00 0c       	add	r0, r0
     f02:	88 0b       	sbc	r24, r24
     f04:	99 0b       	sbc	r25, r25
     f06:	a7 01       	movw	r20, r14
     f08:	96 01       	movw	r18, r12
     f0a:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__udivmodsi4>
     f0e:	54 2f       	mov	r21, r20
     f10:	43 2f       	mov	r20, r19
     f12:	32 2f       	mov	r19, r18
     f14:	22 27       	eor	r18, r18
     f16:	82 2a       	or	r8, r18
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1310
             ((uint32_t)(p[bOffset] << 8) / brightness);
     f18:	93 2a       	or	r9, r19
     f1a:	a4 2a       	or	r10, r20
     f1c:	b5 2a       	or	r11, r21
setPixelColor():
     f1e:	46 0c       	add	r4, r6
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1135
      b = (b * brightness) >> 8;
    }
    if (wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
     f20:	57 1c       	adc	r5, r7
     f22:	f2 01       	movw	r30, r4
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1137
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
     f24:	e2 0d       	add	r30, r2
     f26:	f3 1d       	adc	r31, r3
     f28:	10 82       	st	Z, r1
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1139
    }
    p[rOffset] = r;
     f2a:	e0 91 92 3b 	lds	r30, 0x3B92	; 0x803b92 <strip+0x8>
     f2e:	e4 0d       	add	r30, r4
     f30:	f5 2d       	mov	r31, r5
     f32:	f1 1d       	adc	r31, r1
     f34:	10 82       	st	Z, r1
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1140
    p[gOffset] = g;
     f36:	e0 91 93 3b 	lds	r30, 0x3B93	; 0x803b93 <strip+0x9>
     f3a:	e4 0d       	add	r30, r4
     f3c:	f5 2d       	mov	r31, r5
     f3e:	f1 1d       	adc	r31, r1
     f40:	10 82       	st	Z, r1
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1141
    p[bOffset] = b;
     f42:	80 91 94 3b 	lds	r24, 0x3B94	; 0x803b94 <strip+0xa>
     f46:	48 0e       	add	r4, r24
     f48:	51 1c       	adc	r5, r1
     f4a:	f2 01       	movw	r30, r4
     f4c:	10 82       	st	Z, r1
_Z12scrollPixelsPA9_hhhh():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1402
    }
    delay(150);
    for (uint8_t y = 0; y < 50; y++) {// then the getPixel comand is used to grab the pixel info an scroll it to the left
      pixelColor = strip.getPixelColor(y);
      strip.setPixelColor(y, 0);
      if ( y != 0 && pixelColor > 0) {
     f4e:	f9 85       	ldd	r31, Y+9	; 0x09
     f50:	ff 23       	and	r31, r31
     f52:	59 f0       	breq	.+22     	; 0xf6a <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x2cc>
     f54:	89 28       	or	r8, r9
     f56:	8a 28       	or	r8, r10
     f58:	8b 28       	or	r8, r11
     f5a:	39 f0       	breq	.+14     	; 0xf6a <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x2cc>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1403
        strip.setPixelColor((y - 1), red, green, blue);
     f5c:	2e 81       	ldd	r18, Y+6	; 0x06
     f5e:	4d 81       	ldd	r20, Y+5	; 0x05
     f60:	6c 81       	ldd	r22, Y+4	; 0x04
     f62:	89 85       	ldd	r24, Y+9	; 0x09
     f64:	9a 85       	ldd	r25, Y+10	; 0x0a
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	eb d9       	rcall	.-3114   	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
     f6a:	29 85       	ldd	r18, Y+9	; 0x09
     f6c:	3a 85       	ldd	r19, Y+10	; 0x0a
     f6e:	2f 5f       	subi	r18, 0xFF	; 255
     f70:	3f 4f       	sbci	r19, 0xFF	; 255
     f72:	29 87       	std	Y+9, r18	; 0x09
     f74:	3a 87       	std	Y+10, r19	; 0x0a
     f76:	22 33       	cpi	r18, 0x32	; 50
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1399
      } else {
        strip.setPixelColor(led, 0, 0, 0);
      }
    }
    delay(150);
    for (uint8_t y = 0; y < 50; y++) {// then the getPixel comand is used to grab the pixel info an scroll it to the left
     f78:	31 05       	cpc	r19, r1
     f7a:	09 f0       	breq	.+2      	; 0xf7e <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x2e0>
     f7c:	e0 ce       	rjmp	.-576    	; 0xd3e <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0xa0>
     f7e:	0f 5f       	subi	r16, 0xFF	; 255
     f80:	1f 4f       	sbci	r17, 0xFF	; 255
     f82:	09 30       	cpi	r16, 0x09	; 9
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1387
void scrollPixels(uint8_t arrayName[5][9], uint8_t red, uint8_t green, uint8_t blue) {// code to scroll the tiltle
  uint8_t led;
  uint8_t pixel;
  uint32_t pixelColor;

  for (uint8_t pixelY = 0; pixelY < 9 && LEFTHIGH && RIGHTHIGH; pixelY++) {
     f84:	11 05       	cpc	r17, r1
     f86:	09 f0       	breq	.+2      	; 0xf8a <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x2ec>
     f88:	a8 ce       	rjmp	.-688    	; 0xcda <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x3c>
     f8a:	2a 96       	adiw	r28, 0x0a	; 10
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1407
      if ( y != 0 && pixelColor > 0) {
        strip.setPixelColor((y - 1), red, green, blue);
      }
    }
  }
}
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	df 90       	pop	r13
     f9e:	cf 90       	pop	r12
     fa0:	bf 90       	pop	r11
     fa2:	af 90       	pop	r10
     fa4:	9f 90       	pop	r9
     fa6:	8f 90       	pop	r8
     fa8:	7f 90       	pop	r7
     faa:	6f 90       	pop	r6
     fac:	5f 90       	pop	r5
     fae:	4f 90       	pop	r4
     fb0:	3f 90       	pop	r3
     fb2:	2f 90       	pop	r2
     fb4:	08 95       	ret
getPixelColor():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1313
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ((uint32_t)(p[bOffset] << 8) / brightness);
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
     fb6:	9b 81       	ldd	r25, Y+3	; 0x03
     fb8:	89 2e       	mov	r8, r25
     fba:	91 2c       	mov	r9, r1
     fbc:	b1 2c       	mov	r11, r1
     fbe:	a1 2c       	mov	r10, r1
     fc0:	54 01       	movw	r10, r8
     fc2:	99 24       	eor	r9, r9
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1312
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ((uint32_t)(p[bOffset] << 8) / brightness);
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
     fc4:	88 24       	eor	r8, r8
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:1315
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
             (uint32_t)p[bOffset];
     fc6:	b7 2a       	or	r11, r23
     fc8:	ea 81       	ldd	r30, Y+2	; 0x02
     fca:	8e 2a       	or	r8, r30
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:375
  }
  PORTA.PIN6CTRL &= ~ PORT_ISC_BOTHEDGES_gc; // detach interrupt
}

void levelTitle () {// level description
  strip.clear();
     fcc:	f9 81       	ldd	r31, Y+1	; 0x01
     fce:	9f 2a       	or	r9, r31
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:376
  while (RIGHTLOW || LEFTLOW); // button debounce
     fd0:	a6 cf       	rjmp	.-180    	; 0xf1e <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)+0x280>

00000fd2 <levelTitle()>:
_Z10levelTitlev():
     fd2:	c7 dd       	rcall	.-1138   	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
     fd4:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
     fd8:	81 ff       	sbrs	r24, 1
     fda:	fc cf       	rjmp	.-8      	; 0xfd4 <levelTitle()+0x2>
     fdc:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:377
  red = 100;
     fe0:	82 ff       	sbrs	r24, 2
     fe2:	f8 cf       	rjmp	.-16     	; 0xfd4 <levelTitle()+0x2>
     fe4:	84 e6       	ldi	r24, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:378
  green = 0;
     fe6:	80 93 6a 3b 	sts	0x3B6A, r24	; 0x803b6a <red>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:379
  blue = 0;
     fea:	10 92 6b 3b 	sts	0x3B6B, r1	; 0x803b6b <green>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:380
  showTime(51, gameLevel);
     fee:	10 92 6c 3b 	sts	0x3B6C, r1	; 0x803b6c <blue>
     ff2:	60 91 5a 38 	lds	r22, 0x385A	; 0x80385a <gameLevel>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:385

  for (uint8_t x = 0; x < 3; x++) {
    switch (x) {
      case 1:
        scrollPixels(levelText1, 0, 0, 100);
     ff6:	83 e3       	ldi	r24, 0x33	; 51
     ff8:	1a dc       	rcall	.-1996   	; 0x82e <showTime(unsigned char, unsigned char)>
     ffa:	24 e6       	ldi	r18, 0x64	; 100
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	8d e2       	ldi	r24, 0x2D	; 45
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:388
        break;
      case 2:
        scrollPixels(levelText2, 0, 0, 100);
    1002:	98 e3       	ldi	r25, 0x38	; 56
    1004:	4c de       	rcall	.-872    	; 0xc9e <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)>
    1006:	24 e6       	ldi	r18, 0x64	; 100
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	98 e3       	ldi	r25, 0x38	; 56
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:392
        break;
    }
  }
  strip.clear();
    1010:	46 de       	rcall	.-884    	; 0xc9e <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)>
    1012:	a7 cd       	rjmp	.-1202   	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>

00001014 <writeScoreToEEPROM(unsigned char, unsigned int)>:
_Z18writeScoreToEEPROMhj():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1504
    }
  }
}

//write score to eeprom
void writeScoreToEEPROM(uint8_t address, uint16_t number) { // ledInvadersScore is an uint16_t so needs to be stored in 2 eeprom slots of 8bits
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	16 2f       	mov	r17, r22
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1506

  eeprom_write_byte((uint8_t*)address, number >> 8);// shift all the bits from the number to the right, 8 times
    101c:	67 2f       	mov	r22, r23
    101e:	c8 2f       	mov	r28, r24
    1020:	d0 e0       	ldi	r29, 0x00	; 0
    1022:	ce 01       	movw	r24, r28
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1507
  eeprom_write_byte((uint8_t*)(address + 1), number & 0xFF);// only store 8bits of the right
    1024:	0e 94 de 1c 	call	0x39bc	; 0x39bc <eeprom_write_byte>
    1028:	61 2f       	mov	r22, r17
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1508
}
    102a:	ce 01       	movw	r24, r28
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	df 91       	pop	r29
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1507

//write score to eeprom
void writeScoreToEEPROM(uint8_t address, uint16_t number) { // ledInvadersScore is an uint16_t so needs to be stored in 2 eeprom slots of 8bits

  eeprom_write_byte((uint8_t*)address, number >> 8);// shift all the bits from the number to the right, 8 times
  eeprom_write_byte((uint8_t*)(address + 1), number & 0xFF);// only store 8bits of the right
    1030:	cf 91       	pop	r28
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1318
    timer = millis();
    lastMinute = 60;
  }
}

void gameMenu () {// menu only available in game mode
    1032:	1f 91       	pop	r17
    1034:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <eeprom_write_byte>

00001038 <gameMenu()>:
_Z8gameMenuv():
    1038:	0f 93       	push	r16
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1319
  strip.clear();
    103a:	1f 93       	push	r17
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1322
  int8_t option = 0;
  uint8_t actualValue = 0;
  encoder.encoderSetPosition(sound, 1);
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	90 dd       	rcall	.-1248   	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
    1042:	80 91 6f 3b 	lds	r24, 0x3B6F	; 0x803b6f <sound>
encoderSetPosition():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1324

  while (SLEEPMENULOW);
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	df da       	rcall	.-2626   	; 0x608 <encoder::encoderSetPosition(int, unsigned char) [clone .part.0]>
_Z8gameMenuv():
    104a:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1356
        }

        if (actualValue != sound) {
          strip.clear();
          sound = !sound;
          eeprom_write_byte((uint8_t*)6, sound);
    104e:	83 ff       	sbrs	r24, 3
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1328

  while (SLEEPMENULOW);

  while (option < 3) {

    if (buttonDebounce(0, 1, 0, 300)) {
    1050:	fc cf       	rjmp	.-8      	; 0x104a <gameMenu()+0x12>
    1052:	c0 e0       	ldi	r28, 0x00	; 0
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <gameMenu()+0x20>
    1056:	c2 e0       	ldi	r28, 0x02	; 2
    1058:	0c e2       	ldi	r16, 0x2C	; 44
    105a:	11 e0       	ldi	r17, 0x01	; 1
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e0       	ldi	r20, 0x00	; 0
    1062:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1329
      if (option++, option > 2) option = 0;
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	81 dc       	rcall	.-1790   	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    1068:	88 23       	and	r24, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1330
      strip.clear();
    106a:	29 f0       	breq	.+10     	; 0x1076 <gameMenu()+0x3e>
    106c:	cf 5f       	subi	r28, 0xFF	; 255
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1333
    }

    if (buttonDebounce(1, 0, 0, 300)) {
    106e:	c3 30       	cpi	r28, 0x03	; 3
    1070:	09 f4       	brne	.+2      	; 0x1074 <gameMenu()+0x3c>
    1072:	c0 e0       	ldi	r28, 0x00	; 0
    1074:	76 dd       	rcall	.-1300   	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
    1076:	0c e2       	ldi	r16, 0x2C	; 44
    1078:	11 e0       	ldi	r17, 0x01	; 1
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1334
      if (option--, option < 0) option = 2;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	72 dc       	rcall	.-1820   	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1335
      strip.clear();
    1086:	88 23       	and	r24, r24
    1088:	41 f1       	breq	.+80     	; 0x10da <gameMenu()+0xa2>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1368
        if (buttonDebounce(0, 0, 1, 50)) {
          option = 3;
        }
        break;
      case 2:// end game
        drawCharacter(20, letterE, 100, 0, 0);
    108a:	c1 50       	subi	r28, 0x01	; 1
    108c:	28 f5       	brcc	.+74     	; 0x10d8 <gameMenu()+0xa0>
    108e:	69 dd       	rcall	.-1326   	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
    1090:	00 e0       	ldi	r16, 0x00	; 0
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	44 e6       	ldi	r20, 0x64	; 100
    1096:	69 ea       	ldi	r22, 0xA9	; 169
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1369
        drawCharacter(23, letterN, 100, 0, 0);
    1098:	72 e0       	ldi	r23, 0x02	; 2
    109a:	84 e1       	ldi	r24, 0x14	; 20
    109c:	99 db       	rcall	.-2254   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	44 e6       	ldi	r20, 0x64	; 100
    10a2:	65 eb       	ldi	r22, 0xB5	; 181
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1370
        drawCharacter(26, letterD, 100, 0, 0);
    10a4:	72 e0       	ldi	r23, 0x02	; 2
    10a6:	87 e1       	ldi	r24, 0x17	; 23
    10a8:	93 db       	rcall	.-2266   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	44 e6       	ldi	r20, 0x64	; 100
    10ae:	64 e1       	ldi	r22, 0x14	; 20
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1371
        if (buttonDebounce(0, 0, 1, 50)) {
    10b0:	72 e0       	ldi	r23, 0x02	; 2
    10b2:	8a e1       	ldi	r24, 0x1A	; 26
    10b4:	8d db       	rcall	.-2278   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    10b6:	02 e3       	ldi	r16, 0x32	; 50
    10b8:	10 e0       	ldi	r17, 0x00	; 0
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	41 e0       	ldi	r20, 0x01	; 1
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	52 dc       	rcall	.-1884   	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1372
          endGame = true;
    10c6:	88 23       	and	r24, r24
    10c8:	09 f4       	brne	.+2      	; 0x10cc <gameMenu()+0x94>
    10ca:	c5 cf       	rjmp	.-118    	; 0x1056 <gameMenu()+0x1e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1373
          contGame = false;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	80 93 77 3b 	sts	0x3B77, r24	; 0x803b77 <endGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1338
    if (buttonDebounce(1, 0, 0, 300)) {
      if (option--, option < 0) option = 2;
      strip.clear();
    }

    switch (option) { // sound on or off
    10d2:	10 92 1e 3a 	sts	0x3A1E, r1	; 0x803a1e <contGame>
    10d6:	6d c0       	rjmp	.+218    	; 0x11b2 <gameMenu()+0x17a>
    10d8:	44 dd       	rcall	.-1400   	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
    10da:	c1 30       	cpi	r28, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1340
      case 0:
        actualValue = encoder.encoderRead(0, 1, true, 1);
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <gameMenu()+0xa8>
    10de:	4b c0       	rjmp	.+150    	; 0x1176 <gameMenu()+0x13e>
    10e0:	c2 30       	cpi	r28, 0x02	; 2
    10e2:	b1 f2       	breq	.-84     	; 0x1090 <gameMenu()+0x58>
    10e4:	21 e0       	ldi	r18, 0x01	; 1
    10e6:	41 e0       	ldi	r20, 0x01	; 1
    10e8:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1341
        drawCharacter(0, letterS, 100, 0, 0);
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	ba da       	rcall	.-2700   	; 0x662 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]>
    10ee:	d8 2f       	mov	r29, r24
    10f0:	00 e0       	ldi	r16, 0x00	; 0
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	44 e6       	ldi	r20, 0x64	; 100
    10f6:	68 e2       	ldi	r22, 0x28	; 40
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1342
        drawCharacter(3, letterN, 100, 0, 0);
    10f8:	72 e0       	ldi	r23, 0x02	; 2
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	69 db       	rcall	.-2350   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	44 e6       	ldi	r20, 0x64	; 100
    1102:	65 eb       	ldi	r22, 0xB5	; 181
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1343
        drawCharacter(6, letterD, 100, 0, 0);
    1104:	72 e0       	ldi	r23, 0x02	; 2
    1106:	83 e0       	ldi	r24, 0x03	; 3
    1108:	63 db       	rcall	.-2362   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	44 e6       	ldi	r20, 0x64	; 100
    110e:	64 e1       	ldi	r22, 0x14	; 20
    1110:	72 e0       	ldi	r23, 0x02	; 2
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1344
        if (sound) {
    1112:	86 e0       	ldi	r24, 0x06	; 6
    1114:	5d db       	rcall	.-2374   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1116:	c0 91 6f 3b 	lds	r28, 0x3B6F	; 0x803b6f <sound>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1345
          drawCharacter(50, letterO, 100, 0, 0);
    111a:	cc 23       	and	r28, r28
    111c:	c9 f0       	breq	.+50     	; 0x1150 <gameMenu()+0x118>
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	44 e6       	ldi	r20, 0x64	; 100
    1122:	63 ef       	ldi	r22, 0xF3	; 243
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1346
          drawCharacter(53, letterN, 100, 0, 0);
    1124:	71 e0       	ldi	r23, 0x01	; 1
    1126:	82 e3       	ldi	r24, 0x32	; 50
    1128:	53 db       	rcall	.-2394   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    112a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1350
        } else {
          drawCharacter(50, letterO, 100, 0, 0);
          drawCharacter(53, letterF, 100, 0, 0);
          drawCharacter(56, letterF, 100, 0, 0);
    112c:	44 e6       	ldi	r20, 0x64	; 100
    112e:	65 eb       	ldi	r22, 0xB5	; 181
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1353
        }

        if (actualValue != sound) {
    1130:	72 e0       	ldi	r23, 0x02	; 2
    1132:	85 e3       	ldi	r24, 0x35	; 53
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1354
          strip.clear();
    1134:	4d db       	rcall	.-2406   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1136:	cd 17       	cp	r28, r29
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1355
          sound = !sound;
    1138:	09 f4       	brne	.+2      	; 0x113c <gameMenu()+0x104>
    113a:	8b cf       	rjmp	.-234    	; 0x1052 <gameMenu()+0x1a>
    113c:	12 dd       	rcall	.-1500   	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
    113e:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1356
          eeprom_write_byte((uint8_t*)6, sound);
    1140:	6c 27       	eor	r22, r28
    1142:	60 93 6f 3b 	sts	0x3B6F, r22	; 0x803b6f <sound>
    1146:	86 e0       	ldi	r24, 0x06	; 6
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1348
        drawCharacter(6, letterD, 100, 0, 0);
        if (sound) {
          drawCharacter(50, letterO, 100, 0, 0);
          drawCharacter(53, letterN, 100, 0, 0);
        } else {
          drawCharacter(50, letterO, 100, 0, 0);
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 de 1c 	call	0x39bc	; 0x39bc <eeprom_write_byte>
    114e:	81 cf       	rjmp	.-254    	; 0x1052 <gameMenu()+0x1a>
    1150:	00 e0       	ldi	r16, 0x00	; 0
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	44 e6       	ldi	r20, 0x64	; 100
    1156:	63 ef       	ldi	r22, 0xF3	; 243
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1349
          drawCharacter(53, letterF, 100, 0, 0);
    1158:	71 e0       	ldi	r23, 0x01	; 1
    115a:	82 e3       	ldi	r24, 0x32	; 50
    115c:	39 db       	rcall	.-2446   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	44 e6       	ldi	r20, 0x64	; 100
    1162:	61 ed       	ldi	r22, 0xD1	; 209
    1164:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1350
          drawCharacter(56, letterF, 100, 0, 0);
    1166:	85 e3       	ldi	r24, 0x35	; 53
    1168:	33 db       	rcall	.-2458   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	44 e6       	ldi	r20, 0x64	; 100
    116e:	61 ed       	ldi	r22, 0xD1	; 209
    1170:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1360
          sound = !sound;
          eeprom_write_byte((uint8_t*)6, sound);
        }
        break;
      case 1:// resume game
        drawCharacter(20, letterR, 100, 0, 0);
    1172:	88 e3       	ldi	r24, 0x38	; 56
    1174:	df cf       	rjmp	.-66     	; 0x1134 <gameMenu()+0xfc>
    1176:	00 e0       	ldi	r16, 0x00	; 0
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	44 e6       	ldi	r20, 0x64	; 100
    117c:	61 e7       	ldi	r22, 0x71	; 113
    117e:	72 e0       	ldi	r23, 0x02	; 2
    1180:	84 e1       	ldi	r24, 0x14	; 20
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1361
        drawCharacter(23, letterE, 100, 0, 0);
    1182:	26 db       	rcall	.-2484   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	44 e6       	ldi	r20, 0x64	; 100
    1188:	69 ea       	ldi	r22, 0xA9	; 169
    118a:	72 e0       	ldi	r23, 0x02	; 2
    118c:	87 e1       	ldi	r24, 0x17	; 23
    118e:	20 db       	rcall	.-2496   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1362
        drawCharacter(26, letterS, 100, 0, 0);
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	44 e6       	ldi	r20, 0x64	; 100
    1194:	68 e2       	ldi	r22, 0x28	; 40
    1196:	72 e0       	ldi	r23, 0x02	; 2
    1198:	8a e1       	ldi	r24, 0x1A	; 26
    119a:	1a db       	rcall	.-2508   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    119c:	02 e3       	ldi	r16, 0x32	; 50
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1363
        if (buttonDebounce(0, 0, 1, 50)) {
    119e:	10 e0       	ldi	r17, 0x00	; 0
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	41 e0       	ldi	r20, 0x01	; 1
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	df db       	rcall	.-2114   	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    11ac:	88 23       	and	r24, r24
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <gameMenu()+0x17a>
    11b0:	53 cf       	rjmp	.-346    	; 0x1058 <gameMenu()+0x20>
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1380
        }
        break;
    }
  }
  strip.clear();
}
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	d3 cc       	rjmp	.-1626   	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>

000011bc <readScoreFromEEPROM(unsigned char)>:
_Z19readScoreFromEEPROMh():
    11bc:	0f 93       	push	r16
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1379
          option = 3;
        }
        break;
    }
  }
  strip.clear();
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1510

  eeprom_write_byte((uint8_t*)address, number >> 8);// shift all the bits from the number to the right, 8 times
  eeprom_write_byte((uint8_t*)(address + 1), number & 0xFF);// only store 8bits of the right
}

uint16_t readScoreFromEEPROM(uint8_t address) { // reads and reconstruct the number
    11c2:	08 2f       	mov	r16, r24
    11c4:	10 e0       	ldi	r17, 0x00	; 0
    11c6:	c8 01       	movw	r24, r16
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1512

  byte byte1 = eeprom_read_byte((uint8_t*)address);
    11c8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <eeprom_read_byte>
    11cc:	c8 2f       	mov	r28, r24
    11ce:	c8 01       	movw	r24, r16
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <eeprom_read_byte>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1513
  byte byte2 = eeprom_read_byte((uint8_t*)address + 1);
    11d6:	2c 2f       	mov	r18, r28
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	32 2f       	mov	r19, r18
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1515

  return (byte1 << 8) + byte2;
    11dc:	22 27       	eor	r18, r18
    11de:	82 0f       	add	r24, r18
    11e0:	93 2f       	mov	r25, r19
    11e2:	91 1d       	adc	r25, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1516
}
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	08 95       	ret

000011ec <gameLedInvaders()>:
_Z15gameLedInvadersv():
    11ec:	2f 92       	push	r2
    11ee:	3f 92       	push	r3
    11f0:	4f 92       	push	r4
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1042
    ledTrisScore = 0;
  }
}

// LedInvaders Game code
void gameLedInvaders () {
    11f2:	5f 92       	push	r5
    11f4:	6f 92       	push	r6
    11f6:	7f 92       	push	r7
    11f8:	8f 92       	push	r8
    11fa:	9f 92       	push	r9
    11fc:	af 92       	push	r10
    11fe:	bf 92       	push	r11
    1200:	cf 92       	push	r12
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	68 97       	sbiw	r28, 0x18	; 24
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	2d b7       	in	r18, 0x3d	; 61
    121c:	3e b7       	in	r19, 0x3e	; 62
    121e:	2f 8b       	std	Y+23, r18	; 0x17
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1316
    contGame = true;
    strip.clear();
    timer = millis();
    lastMinute = 60;
  }
}
    1220:	38 8f       	std	Y+24, r19	; 0x18
    1222:	e0 91 2a 3a 	lds	r30, 0x3A2A	; 0x803a2a <enemiesLevel>
    1226:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1047
void gameLedInvaders () {
  uint8_t playerPos = 84;
  uint8_t lastEnemyPos = 10;
  uint8_t lastPlayerPos = 0;
  uint8_t playerShotPosition = 99;
  uint8_t arrayElements = pgm_read_byte_near (enemies[enemiesLevel] + 0) - 1; // reads enemy position
    1228:	ee 0f       	add	r30, r30
    122a:	ff 1f       	adc	r31, r31
    122c:	ee 5d       	subi	r30, 0xDE	; 222
    122e:	f4 44       	sbci	r31, 0x44	; 68
    1230:	01 90       	ld	r0, Z+
    1232:	f0 81       	ld	r31, Z
    1234:	e0 2d       	mov	r30, r0
    1236:	84 91       	lpm	r24, Z
    1238:	81 50       	subi	r24, 0x01	; 1
    123a:	8f 83       	std	Y+7, r24	; 0x07
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	9c 01       	movw	r18, r24
    1240:	22 0f       	add	r18, r18
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1048
  int actualEnemies [arrayElements];// because enemies array cointains 1 extra element with number of elements information
    1242:	33 1f       	adc	r19, r19
    1244:	4d b7       	in	r20, 0x3d	; 61
    1246:	5e b7       	in	r21, 0x3e	; 62
    1248:	42 1b       	sub	r20, r18
    124a:	53 0b       	sbc	r21, r19
    124c:	4d bf       	out	0x3d, r20	; 61
    124e:	5e bf       	out	0x3e, r21	; 62
    1250:	ad b7       	in	r26, 0x3d	; 61
    1252:	be b7       	in	r27, 0x3e	; 62
    1254:	11 96       	adiw	r26, 0x01	; 1
    1256:	a8 8b       	std	Y+16, r26	; 0x10
    1258:	b9 8b       	std	Y+17, r27	; 0x11
    125a:	2d b7       	in	r18, 0x3d	; 61
    125c:	3e b7       	in	r19, 0x3e	; 62
    125e:	28 1b       	sub	r18, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1049
  uint8_t enemiesKilled [arrayElements];// another array that contains only enemies killed
    1260:	39 0b       	sbc	r19, r25
    1262:	2d bf       	out	0x3d, r18	; 61
    1264:	3e bf       	out	0x3e, r19	; 62
    1266:	8d b7       	in	r24, 0x3d	; 61
    1268:	9e b7       	in	r25, 0x3e	; 62
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	24 e6       	ldi	r18, 0x64	; 100
    126e:	ad b7       	in	r26, 0x3d	; 61
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1064
  int motherShipMovement = 9; // int because working with negative numbers
  int enemyPos = 10; // int because working with negative numbers
  bool callMotherShip = false;
  bool playerShot = false;
  bool allowRightMove = true;
  enemiesKilled [0] = 100; // default 0 value will be used later, so is changed to a value never used.
    1270:	be b7       	in	r27, 0x3e	; 62
    1272:	11 96       	adiw	r26, 0x01	; 1
    1274:	2c 93       	st	X, r18
    1276:	8a 8b       	std	Y+18, r24	; 0x12
    1278:	9c 8b       	std	Y+20, r25	; 0x14
    127a:	bc 01       	movw	r22, r24
    127c:	28 89       	ldd	r18, Y+16	; 0x10
    127e:	39 89       	ldd	r19, Y+17	; 0x11
    1280:	43 e6       	ldi	r20, 0x63	; 99
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1068

  for (uint8_t x = 0; x < arrayElements; x++) {
    actualEnemies[x] = pgm_read_byte_near (enemies[enemiesLevel] + (x + 1)); // first enemy draw on Leds
    enemiesKilled [x] = 99; // fill enemiesKilled array with a number never used some times memory stills holds a value that shouldn´t be there
    1282:	31 96       	adiw	r30, 0x01	; 1
    1284:	86 2f       	mov	r24, r22
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1066
  bool callMotherShip = false;
  bool playerShot = false;
  bool allowRightMove = true;
  enemiesKilled [0] = 100; // default 0 value will be used later, so is changed to a value never used.

  for (uint8_t x = 0; x < arrayElements; x++) {
    1286:	ba 89       	ldd	r27, Y+18	; 0x12
    1288:	8b 1b       	sub	r24, r27
    128a:	5f 81       	ldd	r21, Y+7	; 0x07
    128c:	85 17       	cp	r24, r21
    128e:	50 f4       	brcc	.+20     	; 0x12a4 <gameLedInvaders()+0xb8>
    1290:	84 91       	lpm	r24, Z
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1067
    actualEnemies[x] = pgm_read_byte_near (enemies[enemiesLevel] + (x + 1)); // first enemy draw on Leds
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	d9 01       	movw	r26, r18
    1296:	8d 93       	st	X+, r24
    1298:	9d 93       	st	X+, r25
    129a:	9d 01       	movw	r18, r26
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1068
    enemiesKilled [x] = 99; // fill enemiesKilled array with a number never used some times memory stills holds a value that shouldn´t be there
    129c:	db 01       	movw	r26, r22
    129e:	4d 93       	st	X+, r20
    12a0:	bd 01       	movw	r22, r26
    12a2:	ef cf       	rjmp	.-34     	; 0x1282 <gameLedInvaders()+0x96>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1066
  bool callMotherShip = false;
  bool playerShot = false;
  bool allowRightMove = true;
  enemiesKilled [0] = 100; // default 0 value will be used later, so is changed to a value never used.

  for (uint8_t x = 0; x < arrayElements; x++) {
    12a4:	bf 81       	ldd	r27, Y+7	; 0x07
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1063
  uint16_t playerShotTimer = 0;
  int motherShipMovement = 9; // int because working with negative numbers
  int enemyPos = 10; // int because working with negative numbers
  bool callMotherShip = false;
  bool playerShot = false;
  bool allowRightMove = true;
    12a6:	ba 83       	std	Y+2, r27	; 0x02
    12a8:	e1 e0       	ldi	r30, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1062
  uint16_t motherShipTimer = 0;
  uint16_t playerShotTimer = 0;
  int motherShipMovement = 9; // int because working with negative numbers
  int enemyPos = 10; // int because working with negative numbers
  bool callMotherShip = false;
  bool playerShot = false;
    12aa:	ef 87       	std	Y+15, r30	; 0x0f
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1061
  uint16_t enemyShotTimer = 0;
  uint16_t motherShipTimer = 0;
  uint16_t playerShotTimer = 0;
  int motherShipMovement = 9; // int because working with negative numbers
  int enemyPos = 10; // int because working with negative numbers
  bool callMotherShip = false;
    12ac:	41 2c       	mov	r4, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1060
  uint16_t enemiesMoveTimer = 0;
  uint16_t enemyShotTimer = 0;
  uint16_t motherShipTimer = 0;
  uint16_t playerShotTimer = 0;
  int motherShipMovement = 9; // int because working with negative numbers
  int enemyPos = 10; // int because working with negative numbers
    12ae:	1b 82       	std	Y+3, r1	; 0x03
    12b0:	4a e0       	ldi	r20, 0x0A	; 10
    12b2:	24 2e       	mov	r2, r20
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1059
  uint8_t enemyShotPosition = 90;
  uint16_t enemiesMoveTimer = 0;
  uint16_t enemyShotTimer = 0;
  uint16_t motherShipTimer = 0;
  uint16_t playerShotTimer = 0;
  int motherShipMovement = 9; // int because working with negative numbers
    12b4:	31 2c       	mov	r3, r1
    12b6:	59 e0       	ldi	r21, 0x09	; 9
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1058
  uint8_t enemiesheightTimer = 0;
  uint8_t enemyShotPosition = 90;
  uint16_t enemiesMoveTimer = 0;
  uint16_t enemyShotTimer = 0;
  uint16_t motherShipTimer = 0;
  uint16_t playerShotTimer = 0;
    12b8:	e5 2e       	mov	r14, r21
    12ba:	f1 2c       	mov	r15, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1057
  uint8_t closestEnemy = 0;
  uint8_t enemiesheightTimer = 0;
  uint8_t enemyShotPosition = 90;
  uint16_t enemiesMoveTimer = 0;
  uint16_t enemyShotTimer = 0;
  uint16_t motherShipTimer = 0;
    12bc:	71 2c       	mov	r7, r1
    12be:	61 2c       	mov	r6, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1056
  uint8_t setEnemyFire = 0;
  uint8_t closestEnemy = 0;
  uint8_t enemiesheightTimer = 0;
  uint8_t enemyShotPosition = 90;
  uint16_t enemiesMoveTimer = 0;
  uint16_t enemyShotTimer = 0;
    12c0:	b1 2c       	mov	r11, r1
    12c2:	a1 2c       	mov	r10, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1055
  uint8_t enemiesRemaining = arrayElements;
  uint8_t setEnemyFire = 0;
  uint8_t closestEnemy = 0;
  uint8_t enemiesheightTimer = 0;
  uint8_t enemyShotPosition = 90;
  uint16_t enemiesMoveTimer = 0;
    12c4:	19 86       	std	Y+9, r1	; 0x09
    12c6:	1a 86       	std	Y+10, r1	; 0x0a
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1054
  uint8_t enemiesKilled [arrayElements];// another array that contains only enemies killed
  uint8_t enemiesRemaining = arrayElements;
  uint8_t setEnemyFire = 0;
  uint8_t closestEnemy = 0;
  uint8_t enemiesheightTimer = 0;
  uint8_t enemyShotPosition = 90;
    12c8:	1d 82       	std	Y+5, r1	; 0x05
    12ca:	1e 82       	std	Y+6, r1	; 0x06
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1053
  int actualEnemies [arrayElements];// because enemies array cointains 1 extra element with number of elements information
  uint8_t enemiesKilled [arrayElements];// another array that contains only enemies killed
  uint8_t enemiesRemaining = arrayElements;
  uint8_t setEnemyFire = 0;
  uint8_t closestEnemy = 0;
  uint8_t enemiesheightTimer = 0;
    12cc:	6a e5       	ldi	r22, 0x5A	; 90
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1052
  uint8_t arrayElements = pgm_read_byte_near (enemies[enemiesLevel] + 0) - 1; // reads enemy position
  int actualEnemies [arrayElements];// because enemies array cointains 1 extra element with number of elements information
  uint8_t enemiesKilled [arrayElements];// another array that contains only enemies killed
  uint8_t enemiesRemaining = arrayElements;
  uint8_t setEnemyFire = 0;
  uint8_t closestEnemy = 0;
    12ce:	56 2e       	mov	r5, r22
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1046
// LedInvaders Game code
void gameLedInvaders () {
  uint8_t playerPos = 84;
  uint8_t lastEnemyPos = 10;
  uint8_t lastPlayerPos = 0;
  uint8_t playerShotPosition = 99;
    12d0:	18 86       	std	Y+8, r1	; 0x08
    12d2:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1045

// LedInvaders Game code
void gameLedInvaders () {
  uint8_t playerPos = 84;
  uint8_t lastEnemyPos = 10;
  uint8_t lastPlayerPos = 0;
    12d4:	f3 e6       	ldi	r31, 0x63	; 99
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1044
}

// LedInvaders Game code
void gameLedInvaders () {
  uint8_t playerPos = 84;
  uint8_t lastEnemyPos = 10;
    12d6:	f9 83       	std	Y+1, r31	; 0x01
    12d8:	1e 86       	std	Y+14, r1	; 0x0e
    12da:	2a e0       	ldi	r18, 0x0A	; 10
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1104
        if ((actualEnemies[x] + enemyPos) > closestEnemy)  closestEnemy = (actualEnemies[x] + enemyPos);// some math to know  enemy positon closest to player.
      }
    }

    // player position
    playerPos = encoder.encoderRead(80, 87, false, 2);
    12dc:	2b 8b       	std	Y+19, r18	; 0x13
    12de:	65 c1       	rjmp	.+714    	; 0x15aa <gameLedInvaders()+0x3be>
    12e0:	22 e0       	ldi	r18, 0x02	; 2
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	67 e5       	ldi	r22, 0x57	; 87
    12e6:	80 e5       	ldi	r24, 0x50	; 80
    12e8:	bc d9       	rcall	.-3208   	; 0x662 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1106

    if (playerPos != lastPlayerPos) {
    12ea:	98 2e       	mov	r9, r24
    12ec:	be 85       	ldd	r27, Y+14	; 0x0e
    12ee:	b8 17       	cp	r27, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1107
      drawCharacter(lastPlayerPos, playerShip, 0, 0, 0);
    12f0:	39 f0       	breq	.+14     	; 0x1300 <gameLedInvaders()+0x114>
    12f2:	00 e0       	ldi	r16, 0x00	; 0
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	68 eb       	ldi	r22, 0xB8	; 184
    12fa:	71 e0       	ldi	r23, 0x01	; 1
    12fc:	8b 2f       	mov	r24, r27
    12fe:	68 da       	rcall	.-2864   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1111
      lastPlayerPos = playerPos;
    }

    if (ledInvaderLives > 1 ) {// player ship color change depending on lives left
    1300:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <ledInvaderLives>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1112
      drawCharacter(playerPos, playerShip, 0, 100, 0);
    1304:	00 e0       	ldi	r16, 0x00	; 0
    1306:	24 e6       	ldi	r18, 0x64	; 100
    1308:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1111
    if (playerPos != lastPlayerPos) {
      drawCharacter(lastPlayerPos, playerShip, 0, 0, 0);
      lastPlayerPos = playerPos;
    }

    if (ledInvaderLives > 1 ) {// player ship color change depending on lives left
    130a:	82 30       	cpi	r24, 0x02	; 2
    130c:	08 f4       	brcc	.+2      	; 0x1310 <gameLedInvaders()+0x124>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1114
      drawCharacter(playerPos, playerShip, 0, 100, 0);
    } else {
      drawCharacter(playerPos, playerShip, 100, 100, 0);
    130e:	44 e6       	ldi	r20, 0x64	; 100
    1310:	68 eb       	ldi	r22, 0xB8	; 184
    1312:	71 e0       	ldi	r23, 0x01	; 1
    1314:	89 2d       	mov	r24, r9
    1316:	5c da       	rcall	.-2888   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1318:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1117
    }

    if (buttonDebounce (1, 1, 0, 0) && !playerShot) {// generates player shot
    131a:	10 e0       	ldi	r17, 0x00	; 0
    131c:	98 01       	movw	r18, r16
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	61 e0       	ldi	r22, 0x01	; 1
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	22 db       	rcall	.-2492   	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    1326:	18 2f       	mov	r17, r24
    1328:	88 23       	and	r24, r24
    132a:	d1 f0       	breq	.+52     	; 0x1360 <gameLedInvaders()+0x174>
    132c:	41 10       	cpse	r4, r1
    132e:	11 c0       	rjmp	.+34     	; 0x1352 <gameLedInvaders()+0x166>
    1330:	68 e2       	ldi	r22, 0x28	; 40
    1332:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1118
      beep(40, 40);
    1334:	88 e2       	ldi	r24, 0x28	; 40
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	e2 db       	rcall	.-2108   	; 0xafe <beep(int, int)>
    133a:	e1 e0       	ldi	r30, 0x01	; 1
    133c:	e9 0d       	add	r30, r9
    133e:	e9 83       	std	Y+1, r30	; 0x01
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1120
      playerShot = true;
      playerShotPosition = (playerPos + 1);
    1340:	e0 35       	cpi	r30, 0x50	; 80
    1342:	38 f4       	brcc	.+14     	; 0x1352 <gameLedInvaders()+0x166>
    1344:	24 e6       	ldi	r18, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1121
      if ( playerShotPosition < 80) {
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1122
        strip.setPixelColor(playerShotPosition, 0 , 0 , 100);
    134a:	8e 2f       	mov	r24, r30
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    1352:	41 2e       	mov	r4, r17
    1354:	36 e9       	ldi	r19, 0x96	; 150
    1356:	63 16       	cp	r6, r19
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1126
      }
    }

    if ((playerShotTimer >= 150) && playerShot) {//player shot check with enemies and mother ship
    1358:	71 04       	cpc	r7, r1
    135a:	08 f4       	brcc	.+2      	; 0x135e <gameLedInvaders()+0x172>
    135c:	80 c0       	rjmp	.+256    	; 0x145e <gameLedInvaders()+0x272>
    135e:	08 c0       	rjmp	.+16     	; 0x1370 <gameLedInvaders()+0x184>
    1360:	f6 e9       	ldi	r31, 0x96	; 150
    1362:	6f 16       	cp	r6, r31
    1364:	71 04       	cpc	r7, r1
    1366:	08 f4       	brcc	.+2      	; 0x136a <gameLedInvaders()+0x17e>
    1368:	7a c0       	rjmp	.+244    	; 0x145e <gameLedInvaders()+0x272>
    136a:	44 20       	and	r4, r4
    136c:	09 f4       	brne	.+2      	; 0x1370 <gameLedInvaders()+0x184>
    136e:	77 c0       	rjmp	.+238    	; 0x145e <gameLedInvaders()+0x272>
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1128
      playerShotTimer = 0;
      strip.setPixelColor(playerShotPosition, 0 , 0 , 0);
    1376:	39 81       	ldd	r19, Y+1	; 0x01
    1378:	83 2f       	mov	r24, r19
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    1380:	49 81       	ldd	r20, Y+1	; 0x01
    1382:	41 2c       	mov	r4, r1
    1384:	4a 30       	cpi	r20, 0x0A	; 10
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1130

      if (playerShotPosition < 10) {
    1386:	20 f0       	brcs	.+8      	; 0x1390 <gameLedInvaders()+0x1a4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1131
        playerShot = false;
    1388:	4a 50       	subi	r20, 0x0A	; 10
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1130

    if ((playerShotTimer >= 150) && playerShot) {//player shot check with enemies and mother ship
      playerShotTimer = 0;
      strip.setPixelColor(playerShotPosition, 0 , 0 , 0);

      if (playerShotPosition < 10) {
    138a:	49 83       	std	Y+1, r20	; 0x01
    138c:	44 24       	eor	r4, r4
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1133
        playerShot = false;
      } else {
        playerShotPosition -= 10;
    138e:	43 94       	inc	r4
    1390:	0a 89       	ldd	r16, Y+18	; 0x12
    1392:	1c 89       	ldd	r17, Y+20	; 0x14
    1394:	68 88       	ldd	r6, Y+16	; 0x10
    1396:	79 88       	ldd	r7, Y+17	; 0x11
    1398:	81 2c       	mov	r8, r1
    139a:	59 81       	ldd	r21, Y+1	; 0x01
    139c:	c5 2e       	mov	r12, r21
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1136
      }

      for (uint8_t x = 0; x < arrayElements; x++) {// if enemies are killed another array is created containing only killed enemies
    139e:	d1 2c       	mov	r13, r1
    13a0:	8f 81       	ldd	r24, Y+7	; 0x07
    13a2:	88 16       	cp	r8, r24
    13a4:	28 f5       	brcc	.+74     	; 0x13f0 <gameLedInvaders()+0x204>
    13a6:	d3 01       	movw	r26, r6
    13a8:	8d 91       	ld	r24, X+
    13aa:	9d 91       	ld	r25, X+
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1137
        if (playerShotPosition == (actualEnemies[x] + enemyPos) && enemiesKilled [x] != x) {
    13ac:	3d 01       	movw	r6, r26
    13ae:	82 0d       	add	r24, r2
    13b0:	93 1d       	adc	r25, r3
    13b2:	8c 15       	cp	r24, r12
    13b4:	9d 05       	cpc	r25, r13
    13b6:	c1 f4       	brne	.+48     	; 0x13e8 <gameLedInvaders()+0x1fc>
    13b8:	f8 01       	movw	r30, r16
    13ba:	80 81       	ld	r24, Z
    13bc:	88 15       	cp	r24, r8
    13be:	a1 f0       	breq	.+40     	; 0x13e8 <gameLedInvaders()+0x1fc>
    13c0:	80 82       	st	Z, r8
    13c2:	fa 81       	ldd	r31, Y+2	; 0x02
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1138
          enemiesKilled [x] = x;
    13c4:	f1 50       	subi	r31, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1140
          playerShot = false;
          enemiesRemaining--;
    13c6:	fa 83       	std	Y+2, r31	; 0x02
    13c8:	80 91 28 3a 	lds	r24, 0x3A28	; 0x803a28 <ledInvadersScore>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1141
          ledInvadersScore += 1;
    13cc:	90 91 29 3a 	lds	r25, 0x3A29	; 0x803a29 <ledInvadersScore+0x1>
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	80 93 28 3a 	sts	0x3A28, r24	; 0x803a28 <ledInvadersScore>
    13d6:	90 93 29 3a 	sts	0x3A29, r25	; 0x803a29 <ledInvadersScore+0x1>
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1142
          strip.setPixelColor((actualEnemies[x] + enemyPos), 0, 0, 0);
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	c6 01       	movw	r24, r12
    13e2:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    13e6:	41 2c       	mov	r4, r1
    13e8:	83 94       	inc	r8
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1139
      }

      for (uint8_t x = 0; x < arrayElements; x++) {// if enemies are killed another array is created containing only killed enemies
        if (playerShotPosition == (actualEnemies[x] + enemyPos) && enemiesKilled [x] != x) {
          enemiesKilled [x] = x;
          playerShot = false;
    13ea:	0f 5f       	subi	r16, 0xFF	; 255
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1136
        playerShot = false;
      } else {
        playerShotPosition -= 10;
      }

      for (uint8_t x = 0; x < arrayElements; x++) {// if enemies are killed another array is created containing only killed enemies
    13ec:	1f 4f       	sbci	r17, 0xFF	; 255
    13ee:	d8 cf       	rjmp	.-80     	; 0x13a0 <gameLedInvaders()+0x1b4>
    13f0:	ec 14       	cp	r14, r12
    13f2:	fd 04       	cpc	r15, r13
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1146
          ledInvadersScore += 1;
          strip.setPixelColor((actualEnemies[x] + enemyPos), 0, 0, 0);
        }
      }

      if (playerShotPosition == motherShipMovement || playerShotPosition == (motherShipMovement + 1)) {// mother ship hit detection
    13f4:	29 f0       	breq	.+10     	; 0x1400 <gameLedInvaders()+0x214>
    13f6:	c7 01       	movw	r24, r14
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	8c 15       	cp	r24, r12
    13fc:	9d 05       	cpc	r25, r13
    13fe:	11 f5       	brne	.+68     	; 0x1444 <gameLedInvaders()+0x258>
    1400:	82 e0       	ldi	r24, 0x02	; 2
    1402:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <ledInvaderLives>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1149
        motherShipMovement = 9;
        callMotherShip = false;
        ledInvaderLives = 2;
    1406:	80 91 28 3a 	lds	r24, 0x3A28	; 0x803a28 <ledInvadersScore>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1150
        ledInvadersScore += 3;
    140a:	90 91 29 3a 	lds	r25, 0x3A29	; 0x803a29 <ledInvadersScore+0x1>
    140e:	03 96       	adiw	r24, 0x03	; 3
    1410:	80 93 28 3a 	sts	0x3A28, r24	; 0x803a28 <ledInvadersScore>
    1414:	90 93 29 3a 	sts	0x3A29, r25	; 0x803a29 <ledInvadersScore+0x1>
    1418:	10 e0       	ldi	r17, 0x00	; 0
    141a:	00 e0       	ldi	r16, 0x00	; 0
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1152
        for (uint8_t x = 0; x < 9; x++) {
          strip.setPixelColor(x, 0 , 0 , 0);
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	c8 01       	movw	r24, r16
    1424:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    1428:	0f 5f       	subi	r16, 0xFF	; 255
    142a:	1f 4f       	sbci	r17, 0xFF	; 255
    142c:	09 30       	cpi	r16, 0x09	; 9
    142e:	11 05       	cpc	r17, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1151
      if (playerShotPosition == motherShipMovement || playerShotPosition == (motherShipMovement + 1)) {// mother ship hit detection
        motherShipMovement = 9;
        callMotherShip = false;
        ledInvaderLives = 2;
        ledInvadersScore += 3;
        for (uint8_t x = 0; x < 9; x++) {
    1430:	a9 f7       	brne	.-22     	; 0x141c <gameLedInvaders()+0x230>
    1432:	66 e9       	ldi	r22, 0x96	; 150
    1434:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1154
          strip.setPixelColor(x, 0 , 0 , 0);
        }
        beep(50, 150);
    1436:	82 e3       	ldi	r24, 0x32	; 50
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	61 db       	rcall	.-2366   	; 0xafe <beep(int, int)>
    143c:	1b 82       	std	Y+3, r1	; 0x03
    143e:	39 e0       	ldi	r19, 0x09	; 9
    1440:	e3 2e       	mov	r14, r19
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1148
        }
      }

      if (playerShotPosition == motherShipMovement || playerShotPosition == (motherShipMovement + 1)) {// mother ship hit detection
        motherShipMovement = 9;
        callMotherShip = false;
    1442:	f1 2c       	mov	r15, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1147
          strip.setPixelColor((actualEnemies[x] + enemyPos), 0, 0, 0);
        }
      }

      if (playerShotPosition == motherShipMovement || playerShotPosition == (motherShipMovement + 1)) {// mother ship hit detection
        motherShipMovement = 9;
    1444:	44 20       	and	r4, r4
    1446:	09 f4       	brne	.+2      	; 0x144a <gameLedInvaders()+0x25e>
    1448:	3f c1       	rjmp	.+638    	; 0x16c8 <gameLedInvaders()+0x4dc>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1157
          strip.setPixelColor(x, 0 , 0 , 0);
        }
        beep(50, 150);
      }

      if (playerShot) {
    144a:	24 e6       	ldi	r18, 0x64	; 100
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1158
        strip.setPixelColor(playerShotPosition, 0 , 0 , 100);
    1450:	39 81       	ldd	r19, Y+1	; 0x01
    1452:	83 2f       	mov	r24, r19
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    145a:	71 2c       	mov	r7, r1
    145c:	61 2c       	mov	r6, r1
    145e:	89 85       	ldd	r24, Y+9	; 0x09
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1127
        strip.setPixelColor(playerShotPosition, 0 , 0 , 100);
      }
    }

    if ((playerShotTimer >= 150) && playerShot) {//player shot check with enemies and mother ship
      playerShotTimer = 0;
    1460:	9a 85       	ldd	r25, Y+10	; 0x0a
    1462:	8a 3f       	cpi	r24, 0xFA	; 250
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1164
      } else {
        playerShotPosition = (playerPos + 1);
      }
    }

    if (enemyShotTimer >= 250 && closestEnemy < 79 && enemyShotPosition < 100) {// enemiees fire code
    1464:	91 05       	cpc	r25, r1
    1466:	c0 f0       	brcs	.+48     	; 0x1498 <gameLedInvaders()+0x2ac>
    1468:	9c 81       	ldd	r25, Y+4	; 0x04
    146a:	9f 34       	cpi	r25, 0x4F	; 79
    146c:	a8 f4       	brcc	.+42     	; 0x1498 <gameLedInvaders()+0x2ac>
    146e:	a3 e6       	ldi	r26, 0x63	; 99
    1470:	a5 15       	cp	r26, r5
    1472:	90 f0       	brcs	.+36     	; 0x1498 <gameLedInvaders()+0x2ac>
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1166
      enemyShotTimer = 0;
      strip.setPixelColor(enemyShotPosition, 0 , 0 , 0);
    147a:	85 2d       	mov	r24, r5
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    1482:	ba e0       	ldi	r27, 0x0A	; 10
    1484:	5b 0e       	add	r5, r27
    1486:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1167
      enemyShotPosition += 10;
    1488:	46 e4       	ldi	r20, 0x46	; 70
    148a:	64 e6       	ldi	r22, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1168
      strip.setPixelColor(enemyShotPosition, 100 , 70 , 0);
    148c:	85 2d       	mov	r24, r5
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    1494:	19 86       	std	Y+9, r1	; 0x09
    1496:	1a 86       	std	Y+10, r1	; 0x0a
    1498:	59 14       	cp	r5, r9
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1165
        playerShotPosition = (playerPos + 1);
      }
    }

    if (enemyShotTimer >= 250 && closestEnemy < 79 && enemyShotPosition < 100) {// enemiees fire code
      enemyShotTimer = 0;
    149a:	09 f4       	brne	.+2      	; 0x149e <gameLedInvaders()+0x2b2>
    149c:	19 c1       	rjmp	.+562    	; 0x16d0 <gameLedInvaders()+0x4e4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1171
      strip.setPixelColor(enemyShotPosition, 0 , 0 , 0);
      enemyShotPosition += 10;
      strip.setPixelColor(enemyShotPosition, 100 , 70 , 0);
    }

    if (enemyShotPosition == playerPos || enemyShotPosition == (playerPos + 1) || enemyShotPosition == (playerPos + 2) || closestEnemy > 79) {
    149e:	25 2d       	mov	r18, r5
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	89 2d       	mov	r24, r9
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	ac 01       	movw	r20, r24
    14a8:	4f 5f       	subi	r20, 0xFF	; 255
    14aa:	5f 4f       	sbci	r21, 0xFF	; 255
    14ac:	24 17       	cp	r18, r20
    14ae:	35 07       	cpc	r19, r21
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <gameLedInvaders()+0x2c8>
    14b2:	0e c1       	rjmp	.+540    	; 0x16d0 <gameLedInvaders()+0x4e4>
    14b4:	02 96       	adiw	r24, 0x02	; 2
    14b6:	28 17       	cp	r18, r24
    14b8:	39 07       	cpc	r19, r25
    14ba:	09 f4       	brne	.+2      	; 0x14be <gameLedInvaders()+0x2d2>
    14bc:	09 c1       	rjmp	.+530    	; 0x16d0 <gameLedInvaders()+0x4e4>
    14be:	ec 81       	ldd	r30, Y+4	; 0x04
    14c0:	e0 35       	cpi	r30, 0x50	; 80
    14c2:	08 f0       	brcs	.+2      	; 0x14c6 <gameLedInvaders()+0x2da>
    14c4:	08 c1       	rjmp	.+528    	; 0x16d6 <gameLedInvaders()+0x4ea>
random():
    14c6:	0e 94 81 1c 	call	0x3902	; 0x3902 <random>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/WMath.cpp:38

long random(long howbig) {
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    14ca:	20 ed       	ldi	r18, 0xD0	; 208
    14cc:	37 e0       	ldi	r19, 0x07	; 7
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__divmodsi4>
_Z15gameLedInvadersv():
    14d6:	64 3f       	cpi	r22, 0xF4	; 244
    14d8:	71 40       	sbci	r23, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1197
        }
      }
    }

    //mother ship movement
    if (random(0 , 2000) == 500)  callMotherShip = true;
    14da:	81 05       	cpc	r24, r1
    14dc:	91 05       	cpc	r25, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <gameLedInvaders()+0x2f6>
    14e0:	65 c2       	rjmp	.+1226   	; 0x19ac <gameLedInvaders()+0x7c0>
    14e2:	58 ec       	ldi	r21, 0xC8	; 200
    14e4:	a5 16       	cp	r10, r21
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1199

    if ((motherShipTimer >= 200) && callMotherShip) {
    14e6:	b1 04       	cpc	r11, r1
    14e8:	90 f0       	brcs	.+36     	; 0x150e <gameLedInvaders()+0x322>
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	88 23       	and	r24, r24
    14ee:	79 f0       	breq	.+30     	; 0x150e <gameLedInvaders()+0x322>
    14f0:	f7 fe       	sbrs	r15, 7
    14f2:	38 c1       	rjmp	.+624    	; 0x1764 <gameLedInvaders()+0x578>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1201
      motherShipTimer = 0;
      if (motherShipMovement < 0) {
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1202
        strip.setPixelColor((motherShipMovement + 1), 0 , 0 , 0);
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	c7 01       	movw	r24, r14
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1204
        motherShipMovement = 9;
        callMotherShip = false;
    1502:	1b 82       	std	Y+3, r1	; 0x03
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1203

    if ((motherShipTimer >= 200) && callMotherShip) {
      motherShipTimer = 0;
      if (motherShipMovement < 0) {
        strip.setPixelColor((motherShipMovement + 1), 0 , 0 , 0);
        motherShipMovement = 9;
    1504:	99 e0       	ldi	r25, 0x09	; 9
    1506:	e9 2e       	mov	r14, r25
    1508:	f1 2c       	mov	r15, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1200

    //mother ship movement
    if (random(0 , 2000) == 500)  callMotherShip = true;

    if ((motherShipTimer >= 200) && callMotherShip) {
      motherShipTimer = 0;
    150a:	b1 2c       	mov	r11, r1
    150c:	a1 2c       	mov	r10, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1216
      }
    }

    //enemies movement

    if (enemiesRemaining < 4)  gameSpeed = pgm_read_word_near (enemySpeed + enemiesRemaining);// reads enemies speed from array "enemySpeed" element 0 is reserved for Hard mode, not used for now
    150e:	ba 81       	ldd	r27, Y+2	; 0x02
    1510:	b4 30       	cpi	r27, 0x04	; 4
    1512:	60 f4       	brcc	.+24     	; 0x152c <gameLedInvaders()+0x340>
    1514:	eb 2f       	mov	r30, r27
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	ee 0f       	add	r30, r30
    151a:	ff 1f       	adc	r31, r31
    151c:	e5 53       	subi	r30, 0x35	; 53
    151e:	fd 4f       	sbci	r31, 0xFD	; 253
    1520:	85 91       	lpm	r24, Z+
    1522:	94 91       	lpm	r25, Z
    1524:	80 93 73 3b 	sts	0x3B73, r24	; 0x803b73 <gameSpeed>
    1528:	90 93 74 3b 	sts	0x3B74, r25	; 0x803b74 <gameSpeed+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1218

    if (enemiesMoveTimer > gameSpeed) {
    152c:	80 91 73 3b 	lds	r24, 0x3B73	; 0x803b73 <gameSpeed>
    1530:	90 91 74 3b 	lds	r25, 0x3B74	; 0x803b74 <gameSpeed+0x1>
    1534:	ed 81       	ldd	r30, Y+5	; 0x05
    1536:	fe 81       	ldd	r31, Y+6	; 0x06
    1538:	8e 17       	cp	r24, r30
    153a:	9f 07       	cpc	r25, r31
    153c:	d0 f4       	brcc	.+52     	; 0x1572 <gameLedInvaders()+0x386>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1220
      enemiesMoveTimer = 0;
      lastEnemyPos = enemyPos;
    153e:	2b 8a       	std	Y+19, r2	; 0x13
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1221
      enemiesheightTimer++;
    1540:	f8 85       	ldd	r31, Y+8	; 0x08
    1542:	ff 5f       	subi	r31, 0xFF	; 255
    1544:	f8 87       	std	Y+8, r31	; 0x08
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1223

      beep(25, 25);
    1546:	69 e1       	ldi	r22, 0x19	; 25
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	89 e1       	ldi	r24, 0x19	; 25
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	d7 da       	rcall	.-2642   	; 0xafe <beep(int, int)>
    1550:	2f 85       	ldd	r18, Y+15	; 0x0f
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1225

      if (allowRightMove) {// cheked before in screenRightBounds and screenLeftBounds
    1552:	22 23       	and	r18, r18
    1554:	09 f4       	brne	.+2      	; 0x1558 <gameLedInvaders()+0x36c>
    1556:	21 c1       	rjmp	.+578    	; 0x179a <gameLedInvaders()+0x5ae>
    1558:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1226
        enemyPos++;
    155a:	23 1a       	sub	r2, r19
    155c:	33 0a       	sbc	r3, r19
    155e:	58 85       	ldd	r21, Y+8	; 0x08
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1231
      } else {
        enemyPos--;
      }

      if (enemiesheightTimer == 22) { // allow enemies to get closer to player
    1560:	56 31       	cpi	r21, 0x16	; 22
    1562:	09 f0       	breq	.+2      	; 0x1566 <gameLedInvaders()+0x37a>
    1564:	1e c1       	rjmp	.+572    	; 0x17a2 <gameLedInvaders()+0x5b6>
    1566:	8a e0       	ldi	r24, 0x0A	; 10
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1233
        enemiesheightTimer = 0;
        enemyPos += 10;
    1568:	28 0e       	add	r2, r24
    156a:	31 1c       	adc	r3, r1
    156c:	1d 82       	std	Y+5, r1	; 0x05
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1219
    //enemies movement

    if (enemiesRemaining < 4)  gameSpeed = pgm_read_word_near (enemySpeed + enemiesRemaining);// reads enemies speed from array "enemySpeed" element 0 is reserved for Hard mode, not used for now

    if (enemiesMoveTimer > gameSpeed) {
      enemiesMoveTimer = 0;
    156e:	1e 82       	std	Y+6, r1	; 0x06
    1570:	18 86       	std	Y+8, r1	; 0x08
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1232
      } else {
        enemyPos--;
      }

      if (enemiesheightTimer == 22) { // allow enemies to get closer to player
        enemiesheightTimer = 0;
    1572:	08 ec       	ldi	r16, 0xC8	; 200
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1237
        enemyPos += 10;
      }
    }

    if (buttonDebounce(0, 0, 1, 200))   gameMenu();     //enemiesRemaining = 0;// uncoment to cheat and advance level with one button ;)
    1574:	10 e0       	ldi	r17, 0x00	; 0
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	41 e0       	ldi	r20, 0x01	; 1
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	f4 d9       	rcall	.-3096   	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    1582:	81 11       	cpse	r24, r1
    1584:	59 dd       	rcall	.-1358   	; 0x1038 <gameMenu()>
    1586:	80 91 77 3b 	lds	r24, 0x3B77	; 0x803b77 <endGame>
    158a:	81 11       	cpse	r24, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1239

    if (endGame)  break;
    158c:	0d c1       	rjmp	.+538    	; 0x17a8 <gameLedInvaders()+0x5bc>
    158e:	80 91 28 3a 	lds	r24, 0x3A28	; 0x803a28 <ledInvadersScore>
    1592:	90 91 29 3a 	lds	r25, 0x3A29	; 0x803a29 <ledInvadersScore+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1241

    if (ledInvadersScore > 999) {
    1596:	88 3e       	cpi	r24, 0xE8	; 232
    1598:	93 40       	sbci	r25, 0x03	; 3
    159a:	30 f0       	brcs	.+12     	; 0x15a8 <gameLedInvaders()+0x3bc>
    159c:	e7 ee       	ldi	r30, 0xE7	; 231
    159e:	f3 e0       	ldi	r31, 0x03	; 3
    15a0:	e0 93 28 3a 	sts	0x3A28, r30	; 0x803a28 <ledInvadersScore>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1242
      ledInvadersScore = 999;
    15a4:	f0 93 29 3a 	sts	0x3A29, r31	; 0x803a29 <ledInvadersScore+0x1>
    15a8:	9e 86       	std	Y+14, r9	; 0x0e
    15aa:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <ledInvaderLives>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1104
        if ((actualEnemies[x] + enemyPos) > closestEnemy)  closestEnemy = (actualEnemies[x] + enemyPos);// some math to know  enemy positon closest to player.
      }
    }

    // player position
    playerPos = encoder.encoderRead(80, 87, false, 2);
    15ae:	3a 81       	ldd	r19, Y+2	; 0x02
    15b0:	33 23       	and	r19, r19
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <gameLedInvaders()+0x3ca>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1071
  for (uint8_t x = 0; x < arrayElements; x++) {
    actualEnemies[x] = pgm_read_byte_near (enemies[enemiesLevel] + (x + 1)); // first enemy draw on Leds
    enemiesKilled [x] = 99; // fill enemiesKilled array with a number never used some times memory stills holds a value that shouldn´t be there
  }

  while (enemiesRemaining > 0 && ledInvaderLives > 0) {
    15b4:	f9 c0       	rjmp	.+498    	; 0x17a8 <gameLedInvaders()+0x5bc>
    15b6:	88 23       	and	r24, r24
    15b8:	09 f4       	brne	.+2      	; 0x15bc <gameLedInvaders()+0x3d0>
    15ba:	f6 c0       	rjmp	.+492    	; 0x17a8 <gameLedInvaders()+0x5bc>
    15bc:	80 91 70 3b 	lds	r24, 0x3B70	; 0x803b70 <interruptTimer>
    15c0:	88 23       	and	r24, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1073

    if (interruptTimer) {// keeps time based on TCB0 interrupt
    15c2:	c1 f0       	breq	.+48     	; 0x15f4 <gameLedInvaders()+0x408>
    15c4:	80 91 70 3b 	lds	r24, 0x3B70	; 0x803b70 <interruptTimer>
    15c8:	4d 81       	ldd	r20, Y+5	; 0x05
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1074
      enemiesMoveTimer += interruptTimer;
    15ca:	5e 81       	ldd	r21, Y+6	; 0x06
    15cc:	48 0f       	add	r20, r24
    15ce:	51 1d       	adc	r21, r1
    15d0:	4d 83       	std	Y+5, r20	; 0x05
    15d2:	5e 83       	std	Y+6, r21	; 0x06
    15d4:	80 91 70 3b 	lds	r24, 0x3B70	; 0x803b70 <interruptTimer>
    15d8:	a9 85       	ldd	r26, Y+9	; 0x09
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1075
      enemyShotTimer += interruptTimer;
    15da:	ba 85       	ldd	r27, Y+10	; 0x0a
    15dc:	a8 0f       	add	r26, r24
    15de:	b1 1d       	adc	r27, r1
    15e0:	a9 87       	std	Y+9, r26	; 0x09
    15e2:	ba 87       	std	Y+10, r27	; 0x0a
    15e4:	80 91 70 3b 	lds	r24, 0x3B70	; 0x803b70 <interruptTimer>
    15e8:	a8 0e       	add	r10, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1076
      motherShipTimer += interruptTimer;
    15ea:	b1 1c       	adc	r11, r1
    15ec:	80 91 70 3b 	lds	r24, 0x3B70	; 0x803b70 <interruptTimer>
    15f0:	68 0e       	add	r6, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1077
      playerShotTimer += interruptTimer;
    15f2:	71 1c       	adc	r7, r1
    15f4:	88 88       	ldd	r8, Y+16	; 0x10
    15f6:	99 88       	ldd	r9, Y+17	; 0x11
    15f8:	ba 89       	ldd	r27, Y+18	; 0x12
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1044
}

// LedInvaders Game code
void gameLedInvaders () {
  uint8_t playerPos = 84;
  uint8_t lastEnemyPos = 10;
    15fa:	bc 87       	std	Y+12, r27	; 0x0c
    15fc:	ec 89       	ldd	r30, Y+20	; 0x14
    15fe:	ed 87       	std	Y+13, r30	; 0x0d
    1600:	1b 86       	std	Y+11, r1	; 0x0b
    1602:	3b 89       	ldd	r19, Y+19	; 0x13
    1604:	23 2f       	mov	r18, r19
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1080
      enemyShotTimer += interruptTimer;
      motherShipTimer += interruptTimer;
      playerShotTimer += interruptTimer;
    }

    for (uint8_t x = 0; x < arrayElements; x++) {
    1606:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1084

      if (enemiesKilled [x] != x) {

        if (enemyPos != lastEnemyPos) {
    1608:	2d 8b       	std	Y+21, r18	; 0x15
    160a:	3e 8b       	std	Y+22, r19	; 0x16
    160c:	4b 85       	ldd	r20, Y+11	; 0x0b
    160e:	5f 81       	ldd	r21, Y+7	; 0x07
    1610:	45 17       	cp	r20, r21
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1080
      enemyShotTimer += interruptTimer;
      motherShipTimer += interruptTimer;
      playerShotTimer += interruptTimer;
    }

    for (uint8_t x = 0; x < arrayElements; x++) {
    1612:	08 f0       	brcs	.+2      	; 0x1616 <gameLedInvaders()+0x42a>
    1614:	65 ce       	rjmp	.-822    	; 0x12e0 <gameLedInvaders()+0xf4>
    1616:	ac 85       	ldd	r26, Y+12	; 0x0c
    1618:	bd 85       	ldd	r27, Y+13	; 0x0d
    161a:	8d 91       	ld	r24, X+
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1082

      if (enemiesKilled [x] != x) {
    161c:	ac 87       	std	Y+12, r26	; 0x0c
    161e:	bd 87       	std	Y+13, r27	; 0x0d
    1620:	84 17       	cp	r24, r20
    1622:	09 f4       	brne	.+2      	; 0x1626 <gameLedInvaders()+0x43a>
    1624:	4a c0       	rjmp	.+148    	; 0x16ba <gameLedInvaders()+0x4ce>
    1626:	f4 01       	movw	r30, r8
    1628:	00 81       	ld	r16, Z
    162a:	11 81       	ldd	r17, Z+1	; 0x01
    162c:	2d 89       	ldd	r18, Y+21	; 0x15
    162e:	3e 89       	ldd	r19, Y+22	; 0x16
    1630:	22 15       	cp	r18, r2
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1084

        if (enemyPos != lastEnemyPos) {
    1632:	33 05       	cpc	r19, r3
    1634:	49 f0       	breq	.+18     	; 0x1648 <gameLedInvaders()+0x45c>
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1085
          strip.setPixelColor((actualEnemies[x] + lastEnemyPos), 0, 0, 0); // clear last enemy position
    163c:	8d 89       	ldd	r24, Y+21	; 0x15
    163e:	9e 89       	ldd	r25, Y+22	; 0x16
    1640:	80 0f       	add	r24, r16
    1642:	91 1f       	adc	r25, r17
    1644:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    1648:	61 01       	movw	r12, r2
    164a:	c0 0e       	add	r12, r16
    164c:	d1 1e       	adc	r13, r17
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1088
        }

        strip.setPixelColor((actualEnemies[x] + enemyPos), 100, 0, 0);// led enemy position musn´t be less than 0strip.setPixelColor((actualEnemies[x] + enemyPos), 100, 0, 0);// led enemy position musn´t be less than 0
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	64 e6       	ldi	r22, 0x64	; 100
    1654:	c6 01       	movw	r24, r12
    1656:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	fc 01       	movw	r30, r24
    1660:	e9 53       	subi	r30, 0x39	; 57
    1662:	fe 4f       	sbci	r31, 0xFE	; 254
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1092

        for (uint8_t y = 0; y < 9  ; y++) {// code to check bounds of enemies

          if (pgm_read_byte_near (screenRightBounds + y) == (actualEnemies[x] + enemyPos)) allowRightMove = false;
    1664:	e4 91       	lpm	r30, Z
    1666:	ec 15       	cp	r30, r12
    1668:	1d 04       	cpc	r1, r13
    166a:	09 f4       	brne	.+2      	; 0x166e <gameLedInvaders()+0x482>
    166c:	1f 86       	std	Y+15, r1	; 0x0f
    166e:	fc 01       	movw	r30, r24
    1670:	e3 54       	subi	r30, 0x43	; 67
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1094

          if (pgm_read_byte_near (screenLeftBounds + y) == (actualEnemies[x] + enemyPos))  allowRightMove = true;
    1672:	fe 4f       	sbci	r31, 0xFE	; 254
    1674:	e4 91       	lpm	r30, Z
    1676:	ec 15       	cp	r30, r12
    1678:	1d 04       	cpc	r1, r13
    167a:	11 f4       	brne	.+4      	; 0x1680 <gameLedInvaders()+0x494>
    167c:	31 e0       	ldi	r19, 0x01	; 1
    167e:	3f 87       	std	Y+15, r19	; 0x0f
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	89 30       	cpi	r24, 0x09	; 9
    1684:	91 05       	cpc	r25, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1090
          strip.setPixelColor((actualEnemies[x] + lastEnemyPos), 0, 0, 0); // clear last enemy position
        }

        strip.setPixelColor((actualEnemies[x] + enemyPos), 100, 0, 0);// led enemy position musn´t be less than 0strip.setPixelColor((actualEnemies[x] + enemyPos), 100, 0, 0);// led enemy position musn´t be less than 0

        for (uint8_t y = 0; y < 9  ; y++) {// code to check bounds of enemies
    1686:	59 f7       	brne	.-42     	; 0x165e <gameLedInvaders()+0x472>
random():
    1688:	0e 94 81 1c 	call	0x3902	; 0x3902 <random>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/WMath.cpp:38
    168c:	2c e2       	ldi	r18, 0x2C	; 44
    168e:	31 e0       	ldi	r19, 0x01	; 1
    1690:	40 e0       	ldi	r20, 0x00	; 0
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__divmodsi4>
_Z15gameLedInvadersv():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1097
          if (pgm_read_byte_near (screenRightBounds + y) == (actualEnemies[x] + enemyPos)) allowRightMove = false;

          if (pgm_read_byte_near (screenLeftBounds + y) == (actualEnemies[x] + enemyPos))  allowRightMove = true;
        }

        if (random(0 , 300) == 150 && enemyShotPosition > 99) enemyShotPosition = (actualEnemies[x] + enemyPos);
    1698:	66 39       	cpi	r22, 0x96	; 150
    169a:	71 05       	cpc	r23, r1
    169c:	81 05       	cpc	r24, r1
    169e:	91 05       	cpc	r25, r1
    16a0:	29 f4       	brne	.+10     	; 0x16ac <gameLedInvaders()+0x4c0>
    16a2:	43 e6       	ldi	r20, 0x63	; 99
    16a4:	45 15       	cp	r20, r5
    16a6:	10 f4       	brcc	.+4      	; 0x16ac <gameLedInvaders()+0x4c0>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1099

        if ((actualEnemies[x] + enemyPos) > closestEnemy)  closestEnemy = (actualEnemies[x] + enemyPos);// some math to know  enemy positon closest to player.
    16a8:	50 2e       	mov	r5, r16
    16aa:	52 0c       	add	r5, r2
    16ac:	5c 81       	ldd	r21, Y+4	; 0x04
    16ae:	5c 15       	cp	r21, r12
    16b0:	1d 04       	cpc	r1, r13
    16b2:	1c f4       	brge	.+6      	; 0x16ba <gameLedInvaders()+0x4ce>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1080
      enemyShotTimer += interruptTimer;
      motherShipTimer += interruptTimer;
      playerShotTimer += interruptTimer;
    }

    for (uint8_t x = 0; x < arrayElements; x++) {
    16b4:	80 2f       	mov	r24, r16
    16b6:	82 0d       	add	r24, r2
    16b8:	8c 83       	std	Y+4, r24	; 0x04
    16ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    16bc:	9f 5f       	subi	r25, 0xFF	; 255
    16be:	9b 87       	std	Y+11, r25	; 0x0b
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1160
      }

      if (playerShot) {
        strip.setPixelColor(playerShotPosition, 0 , 0 , 100);
      } else {
        playerShotPosition = (playerPos + 1);
    16c0:	a2 e0       	ldi	r26, 0x02	; 2
    16c2:	8a 0e       	add	r8, r26
    16c4:	91 1c       	adc	r9, r1
    16c6:	a2 cf       	rjmp	.-188    	; 0x160c <gameLedInvaders()+0x420>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1173
      strip.setPixelColor(enemyShotPosition, 100 , 70 , 0);
    }

    if (enemyShotPosition == playerPos || enemyShotPosition == (playerPos + 1) || enemyShotPosition == (playerPos + 2) || closestEnemy > 79) {

      if (closestEnemy > 79) {// if the enemies enters player position END game
    16c8:	41 e0       	ldi	r20, 0x01	; 1
    16ca:	49 0d       	add	r20, r9
    16cc:	49 83       	std	Y+1, r20	; 0x01
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1174
        ledInvaderLives = 0;
    16ce:	c5 ce       	rjmp	.-630    	; 0x145a <gameLedInvaders()+0x26e>
    16d0:	fc 81       	ldd	r31, Y+4	; 0x04
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1179
      } else {
        ledInvaderLives --;
      }

      strip.setPixelColor(enemyShotPosition, 0 , 0 , 0);
    16d2:	f0 35       	cpi	r31, 0x50	; 80
    16d4:	b8 f0       	brcs	.+46     	; 0x1704 <gameLedInvaders()+0x518>
    16d6:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <ledInvaderLives>
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1182
      enemyShotPosition = 100;

      if (ledInvaderLives > 0) {
    16e0:	85 2d       	mov	r24, r5
    16e2:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1185
        beep(50, 150);
      } else {
        for (uint16_t x = 0; x < 600; x += 100) {// game music
    16e4:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1182
      }

      strip.setPixelColor(enemyShotPosition, 0 , 0 , 0);
      enemyShotPosition = 100;

      if (ledInvaderLives > 0) {
    16e8:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <ledInvaderLives>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1183
        beep(50, 150);
    16ec:	d1 2c       	mov	r13, r1
    16ee:	c1 2c       	mov	r12, r1
    16f0:	88 23       	and	r24, r24
    16f2:	71 f0       	breq	.+28     	; 0x1710 <gameLedInvaders()+0x524>
    16f4:	66 e9       	ldi	r22, 0x96	; 150
    16f6:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1180
      } else {
        ledInvaderLives --;
      }

      strip.setPixelColor(enemyShotPosition, 0 , 0 , 0);
      enemyShotPosition = 100;
    16f8:	82 e3       	ldi	r24, 0x32	; 50
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	00 da       	rcall	.-3072   	; 0xafe <beep(int, int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1176
    if (enemyShotPosition == playerPos || enemyShotPosition == (playerPos + 1) || enemyShotPosition == (playerPos + 2) || closestEnemy > 79) {

      if (closestEnemy > 79) {// if the enemies enters player position END game
        ledInvaderLives = 0;
      } else {
        ledInvaderLives --;
    16fe:	24 e6       	ldi	r18, 0x64	; 100
    1700:	52 2e       	mov	r5, r18
    1702:	e1 ce       	rjmp	.-574    	; 0x14c6 <gameLedInvaders()+0x2da>
    1704:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <ledInvaderLives>
    1708:	81 50       	subi	r24, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1186

      if (ledInvaderLives > 0) {
        beep(50, 150);
      } else {
        for (uint16_t x = 0; x < 600; x += 100) {// game music
          beep(100, x);
    170a:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <ledInvaderLives>
    170e:	e5 cf       	rjmp	.-54     	; 0x16da <gameLedInvaders()+0x4ee>
    1710:	b6 01       	movw	r22, r12
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1187
          drawCharacter(playerPos, playerShip, 0, 0, 0);
    1712:	84 e6       	ldi	r24, 0x64	; 100
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	f3 d9       	rcall	.-3098   	; 0xafe <beep(int, int)>
    1718:	00 e0       	ldi	r16, 0x00	; 0
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	68 eb       	ldi	r22, 0xB8	; 184
    1720:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1188
          drawCharacter(playerPos, playerShipDead, 0, 100, 0);
    1722:	89 2d       	mov	r24, r9
    1724:	55 d8       	rcall	.-3926   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1726:	24 e6       	ldi	r18, 0x64	; 100
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	63 eb       	ldi	r22, 0xB3	; 179
    172c:	71 e0       	ldi	r23, 0x01	; 1
    172e:	89 2d       	mov	r24, r9
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1189
          beep(100, x);
    1730:	4f d8       	rcall	.-3938   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1732:	b6 01       	movw	r22, r12
    1734:	84 e6       	ldi	r24, 0x64	; 100
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	e2 d9       	rcall	.-3132   	; 0xafe <beep(int, int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1190
          drawCharacter(playerPos, playerShipDead, 0, 0, 0);
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	63 eb       	ldi	r22, 0xB3	; 179
    1740:	71 e0       	ldi	r23, 0x01	; 1
    1742:	89 2d       	mov	r24, r9
    1744:	45 d8       	rcall	.-3958   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1746:	24 e6       	ldi	r18, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1191
          drawCharacter(playerPos, playerShip, 100, 100, 0);
    1748:	44 e6       	ldi	r20, 0x64	; 100
    174a:	68 eb       	ldi	r22, 0xB8	; 184
    174c:	71 e0       	ldi	r23, 0x01	; 1
    174e:	89 2d       	mov	r24, r9
    1750:	3f d8       	rcall	.-3970   	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1752:	24 e6       	ldi	r18, 0x64	; 100
    1754:	c2 0e       	add	r12, r18
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1185
      enemyShotPosition = 100;

      if (ledInvaderLives > 0) {
        beep(50, 150);
      } else {
        for (uint16_t x = 0; x < 600; x += 100) {// game music
    1756:	d1 1c       	adc	r13, r1
    1758:	38 e5       	ldi	r19, 0x58	; 88
    175a:	c3 16       	cp	r12, r19
    175c:	32 e0       	ldi	r19, 0x02	; 2
    175e:	d3 06       	cpc	r13, r19
    1760:	b9 f6       	brne	.-82     	; 0x1710 <gameLedInvaders()+0x524>
    1762:	cd cf       	rjmp	.-102    	; 0x16fe <gameLedInvaders()+0x512>
    1764:	87 01       	movw	r16, r14
    1766:	01 50       	subi	r16, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1206
      if (motherShipMovement < 0) {
        strip.setPixelColor((motherShipMovement + 1), 0 , 0 , 0);
        motherShipMovement = 9;
        callMotherShip = false;
      } else {
        motherShipMovement--;
    1768:	11 09       	sbc	r17, r1
    176a:	26 e4       	ldi	r18, 0x46	; 70
    176c:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1207
        strip.setPixelColor(motherShipMovement, 70 , 0 , 70);
    176e:	66 e4       	ldi	r22, 0x46	; 70
    1770:	c8 01       	movw	r24, r16
    1772:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    1776:	08 30       	cpi	r16, 0x08	; 8
    1778:	11 05       	cpc	r17, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1208
        if (motherShipMovement < 8) {
    177a:	5c f4       	brge	.+22     	; 0x1792 <gameLedInvaders()+0x5a6>
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1209
          strip.setPixelColor((motherShipMovement + 2), 0 , 0 , 0);
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	c7 01       	movw	r24, r14
    1784:	01 96       	adiw	r24, 0x01	; 1
    1786:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    178a:	78 01       	movw	r14, r16
    178c:	91 e0       	ldi	r25, 0x01	; 1
    178e:	9b 83       	std	Y+3, r25	; 0x03
    1790:	bc ce       	rjmp	.-648    	; 0x150a <gameLedInvaders()+0x31e>
    1792:	78 01       	movw	r14, r16
    1794:	a1 e0       	ldi	r26, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1208
        motherShipMovement = 9;
        callMotherShip = false;
      } else {
        motherShipMovement--;
        strip.setPixelColor(motherShipMovement, 70 , 0 , 70);
        if (motherShipMovement < 8) {
    1796:	ab 83       	std	Y+3, r26	; 0x03
    1798:	b8 ce       	rjmp	.-656    	; 0x150a <gameLedInvaders()+0x31e>
    179a:	41 e0       	ldi	r20, 0x01	; 1
    179c:	24 1a       	sub	r2, r20
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1228
      beep(25, 25);

      if (allowRightMove) {// cheked before in screenRightBounds and screenLeftBounds
        enemyPos++;
      } else {
        enemyPos--;
    179e:	31 08       	sbc	r3, r1
    17a0:	de ce       	rjmp	.-580    	; 0x155e <gameLedInvaders()+0x372>
    17a2:	1d 82       	std	Y+5, r1	; 0x05
    17a4:	1e 82       	std	Y+6, r1	; 0x06
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1219
    //enemies movement

    if (enemiesRemaining < 4)  gameSpeed = pgm_read_word_near (enemySpeed + enemiesRemaining);// reads enemies speed from array "enemySpeed" element 0 is reserved for Hard mode, not used for now

    if (enemiesMoveTimer > gameSpeed) {
      enemiesMoveTimer = 0;
    17a6:	e5 ce       	rjmp	.-566    	; 0x1572 <gameLedInvaders()+0x386>
    17a8:	dc d9       	rcall	.-3144   	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1245

    if (ledInvadersScore > 999) {
      ledInvadersScore = 999;
    }
  }
  strip.clear();
    17aa:	0e 94 a6 02 	call	0x54c	; 0x54c <millis>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1246
  timer = millis();
    17ae:	60 93 79 3b 	sts	0x3B79, r22	; 0x803b79 <timer>
    17b2:	70 93 7a 3b 	sts	0x3B7A, r23	; 0x803b7a <timer+0x1>
    17b6:	80 93 7b 3b 	sts	0x3B7B, r24	; 0x803b7b <timer+0x2>
    17ba:	90 93 7c 3b 	sts	0x3B7C, r25	; 0x803b7c <timer+0x3>
    17be:	fa 81       	ldd	r31, Y+2	; 0x02
    17c0:	f1 11       	cpse	r31, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1248

  if (enemiesRemaining == 0) {// go to next level
    17c2:	1d c0       	rjmp	.+58     	; 0x17fe <gameLedInvaders()+0x612>
    17c4:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <gameLevel>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1249
    gameLevel++;
    17c8:	8f 5f       	subi	r24, 0xFF	; 255
    17ca:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <gameLevel>
    17ce:	90 91 2a 3a 	lds	r25, 0x3A2A	; 0x803a2a <enemiesLevel>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1250
    enemiesLevel++;
    17d2:	9f 5f       	subi	r25, 0xFF	; 255
    17d4:	99 30       	cpi	r25, 0x09	; 9
    17d6:	08 f0       	brcs	.+2      	; 0x17da <gameLedInvaders()+0x5ee>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1252

    if (enemiesLevel > 8)   enemiesLevel = 0;
    17d8:	aa c0       	rjmp	.+340    	; 0x192e <gameLedInvaders()+0x742>
    17da:	90 93 2a 3a 	sts	0x3A2A, r25	; 0x803a2a <enemiesLevel>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1250
  strip.clear();
  timer = millis();

  if (enemiesRemaining == 0) {// go to next level
    gameLevel++;
    enemiesLevel++;
    17de:	eb ec       	ldi	r30, 0xCB	; 203
    17e0:	f2 e0       	ldi	r31, 0x02	; 2
    17e2:	8f 30       	cpi	r24, 0x0F	; 15
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1254

    if (enemiesLevel > 8)   enemiesLevel = 0;

    if (gameLevel < 15) {// speeds up level up to level 15 then speeds is the same
    17e4:	08 f0       	brcs	.+2      	; 0x17e8 <gameLedInvaders()+0x5fc>
    17e6:	a6 c0       	rjmp	.+332    	; 0x1934 <gameLedInvaders()+0x748>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1255
      gameSpeed = pgm_read_word_near (enemySpeed + 0) - (gameLevel * 15);
    17e8:	25 91       	lpm	r18, Z+
    17ea:	34 91       	lpm	r19, Z
    17ec:	4f e0       	ldi	r20, 0x0F	; 15
    17ee:	84 9f       	mul	r24, r20
    17f0:	20 19       	sub	r18, r0
    17f2:	31 09       	sbc	r19, r1
    17f4:	11 24       	eor	r1, r1
    17f6:	20 93 73 3b 	sts	0x3B73, r18	; 0x803b73 <gameSpeed>
    17fa:	30 93 74 3b 	sts	0x3B74, r19	; 0x803b74 <gameSpeed+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1269
      delay(2000);
      endGame = true;
    }
  }

  if (ledInvaderLives == 0) {// Game over
    17fe:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <ledInvaderLives>
    1802:	81 11       	cpse	r24, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1270
    gameSpeed =  pgm_read_word_near (enemySpeed + 0);
    1804:	8d c0       	rjmp	.+282    	; 0x1920 <gameLedInvaders()+0x734>
    1806:	eb ec       	ldi	r30, 0xCB	; 203
    1808:	f2 e0       	ldi	r31, 0x02	; 2
    180a:	85 91       	lpm	r24, Z+
    180c:	94 91       	lpm	r25, Z
    180e:	80 93 73 3b 	sts	0x3B73, r24	; 0x803b73 <gameSpeed>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1272
    enemiesLevel = 0;
    ledInvaderLives = 2;
    1812:	90 93 74 3b 	sts	0x3B74, r25	; 0x803b74 <gameSpeed+0x1>
    1816:	10 92 2a 3a 	sts	0x3A2A, r1	; 0x803a2a <enemiesLevel>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1273
    gameLevel = 1;
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <ledInvaderLives>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1275

    if (ledInvadersScore > 999) ledInvadersScore = 999;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <gameLevel>
    1826:	80 91 28 3a 	lds	r24, 0x3A28	; 0x803a28 <ledInvadersScore>
    182a:	90 91 29 3a 	lds	r25, 0x3A29	; 0x803a29 <ledInvadersScore+0x1>
    182e:	88 3e       	cpi	r24, 0xE8	; 232
    1830:	93 40       	sbci	r25, 0x03	; 3
    1832:	30 f0       	brcs	.+12     	; 0x1840 <gameLedInvaders()+0x654>
    1834:	e7 ee       	ldi	r30, 0xE7	; 231
    1836:	f3 e0       	ldi	r31, 0x03	; 3
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1277

    if (ledInvadersScore > readScoreFromEEPROM(5)) {
    1838:	e0 93 28 3a 	sts	0x3A28, r30	; 0x803a28 <ledInvadersScore>
    183c:	f0 93 29 3a 	sts	0x3A29, r31	; 0x803a29 <ledInvadersScore+0x1>
    1840:	85 e0       	ldi	r24, 0x05	; 5
    1842:	bc dc       	rcall	.-1672   	; 0x11bc <readScoreFromEEPROM(unsigned char)>
    1844:	e0 90 28 3a 	lds	r14, 0x3A28	; 0x803a28 <ledInvadersScore>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1278
      drawCharacter(0, letterN, 100, 0, 0);
    1848:	f0 90 29 3a 	lds	r15, 0x3A29	; 0x803a29 <ledInvadersScore+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1277
    ledInvaderLives = 2;
    gameLevel = 1;

    if (ledInvadersScore > 999) ledInvadersScore = 999;

    if (ledInvadersScore > readScoreFromEEPROM(5)) {
    184c:	00 e0       	ldi	r16, 0x00	; 0
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	44 e6       	ldi	r20, 0x64	; 100
    1852:	8e 15       	cp	r24, r14
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1278
      drawCharacter(0, letterN, 100, 0, 0);
    1854:	9f 05       	cpc	r25, r15
    1856:	08 f0       	brcs	.+2      	; 0x185a <gameLedInvaders()+0x66e>
    1858:	98 c0       	rjmp	.+304    	; 0x198a <gameLedInvaders()+0x79e>
    185a:	65 eb       	ldi	r22, 0xB5	; 181
    185c:	72 e0       	ldi	r23, 0x02	; 2
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1279
      drawCharacter(3, letterE, 100, 0, 0);
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	44 e6       	ldi	r20, 0x64	; 100
    1868:	69 ea       	ldi	r22, 0xA9	; 169
    186a:	72 e0       	ldi	r23, 0x02	; 2
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1280
      drawCharacter(6, letterW, 100, 0, 0);
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	44 e6       	ldi	r20, 0x64	; 100
    1876:	6d e9       	ldi	r22, 0x9D	; 157
    1878:	72 e0       	ldi	r23, 0x02	; 2
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1281
      showScore(ledInvadersScore);
    187a:	86 e0       	ldi	r24, 0x06	; 6
    187c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1282
      writeScoreToEEPROM(5, ledInvadersScore);
    1880:	c7 01       	movw	r24, r14
    1882:	38 d8       	rcall	.-3984   	; 0x8f4 <showScore(unsigned int)>
    1884:	b7 01       	movw	r22, r14
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1288
    } else {
      drawCharacter(0, letterH, 100, 0, 0);
      drawCharacter(3, letterI, 100, 0, 0);
      showScore(readScoreFromEEPROM(5));
    }
    while (!buttonDebounce(1, 1, 0, 100)) {
    1886:	85 e0       	ldi	r24, 0x05	; 5
    1888:	c5 db       	rcall	.-2166   	; 0x1014 <writeScoreToEEPROM(unsigned char, unsigned int)>
    188a:	04 e6       	ldi	r16, 0x64	; 100
    188c:	10 e0       	ldi	r17, 0x00	; 0
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	68 d8       	rcall	.-3888   	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    189a:	81 11       	cpse	r24, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1290

      if (buttonDebounce(0, 0, 1, 2000)) {
    189c:	3d c0       	rjmp	.+122    	; 0x1918 <gameLedInvaders()+0x72c>
    189e:	00 ed       	ldi	r16, 0xD0	; 208
    18a0:	17 e0       	ldi	r17, 0x07	; 7
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	41 e0       	ldi	r20, 0x01	; 1
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	5f d8       	rcall	.-3906   	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    18ac:	88 23       	and	r24, r24
    18ae:	d9 f0       	breq	.+54     	; 0x18e6 <gameLedInvaders()+0x6fa>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1291
        strip.clear();
    18b0:	58 d9       	rcall	.-3408   	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
    18b2:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1292
        writeScoreToEEPROM(5, 0);
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	85 e0       	ldi	r24, 0x05	; 5
    18b8:	ad db       	rcall	.-2214   	; 0x1014 <writeScoreToEEPROM(unsigned char, unsigned int)>
    18ba:	00 e0       	ldi	r16, 0x00	; 0
    18bc:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1293
        drawCharacter(0, letterC, 100, 0, 0);
    18be:	44 e6       	ldi	r20, 0x64	; 100
    18c0:	64 e8       	ldi	r22, 0x84	; 132
    18c2:	72 e0       	ldi	r23, 0x02	; 2
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	44 e6       	ldi	r20, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1294
        drawCharacter(3, letterL, 100, 0, 0);
    18ce:	6c e7       	ldi	r22, 0x7C	; 124
    18d0:	72 e0       	ldi	r23, 0x02	; 2
    18d2:	83 e0       	ldi	r24, 0x03	; 3
    18d4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	44 e6       	ldi	r20, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1295
        drawCharacter(6, letterR, 100, 0, 0);
    18dc:	61 e7       	ldi	r22, 0x71	; 113
    18de:	72 e0       	ldi	r23, 0x02	; 2
    18e0:	86 e0       	ldi	r24, 0x06	; 6
    18e2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    18e6:	0e 94 a6 02 	call	0x54c	; 0x54c <millis>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1298
      }

      if ((millis() - timer) > 30000) {// if no button is pressed in 30sec ends game
    18ea:	00 91 79 3b 	lds	r16, 0x3B79	; 0x803b79 <timer>
    18ee:	10 91 7a 3b 	lds	r17, 0x3B7A	; 0x803b7a <timer+0x1>
    18f2:	20 91 7b 3b 	lds	r18, 0x3B7B	; 0x803b7b <timer+0x2>
    18f6:	30 91 7c 3b 	lds	r19, 0x3B7C	; 0x803b7c <timer+0x3>
    18fa:	60 1b       	sub	r22, r16
    18fc:	71 0b       	sbc	r23, r17
    18fe:	82 0b       	sbc	r24, r18
    1900:	93 0b       	sbc	r25, r19
    1902:	61 33       	cpi	r22, 0x31	; 49
    1904:	75 47       	sbci	r23, 0x75	; 117
    1906:	81 05       	cpc	r24, r1
    1908:	91 05       	cpc	r25, r1
    190a:	08 f4       	brcc	.+2      	; 0x190e <gameLedInvaders()+0x722>
    190c:	be cf       	rjmp	.-132    	; 0x188a <gameLedInvaders()+0x69e>
    190e:	10 92 1e 3a 	sts	0x3A1E, r1	; 0x803a1e <contGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1299
        contGame = false;
    1912:	21 e0       	ldi	r18, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1300
        endGame = true;
    1914:	20 93 77 3b 	sts	0x3B77, r18	; 0x803b77 <endGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1304
        break;
      }
    }
    ledInvadersScore = 0;
    1918:	10 92 28 3a 	sts	0x3A28, r1	; 0x803a28 <ledInvadersScore>
    191c:	10 92 29 3a 	sts	0x3A29, r1	; 0x803a29 <ledInvadersScore+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1307
  }

  if (contGame) {
    1920:	80 91 1e 3a 	lds	r24, 0x3A1E	; 0x803a1e <contGame>
    1924:	88 23       	and	r24, r24
    1926:	09 f4       	brne	.+2      	; 0x192a <gameLedInvaders()+0x73e>
    1928:	49 c0       	rjmp	.+146    	; 0x19bc <gameLedInvaders()+0x7d0>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1308
    levelTitle();
    192a:	53 db       	rcall	.-2394   	; 0xfd2 <levelTitle()>
    192c:	7a cc       	rjmp	.-1804   	; 0x1222 <gameLedInvaders()+0x36>
    192e:	10 92 2a 3a 	sts	0x3A2A, r1	; 0x803a2a <enemiesLevel>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1252

  if (enemiesRemaining == 0) {// go to next level
    gameLevel++;
    enemiesLevel++;

    if (enemiesLevel > 8)   enemiesLevel = 0;
    1932:	55 cf       	rjmp	.-342    	; 0x17de <gameLedInvaders()+0x5f2>
    1934:	25 91       	lpm	r18, Z+
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1257

    if (gameLevel < 15) {// speeds up level up to level 15 then speeds is the same
      gameSpeed = pgm_read_word_near (enemySpeed + 0) - (gameLevel * 15);
    } else {
      gameSpeed = pgm_read_word_near (enemySpeed + 0) - 250;
    1936:	34 91       	lpm	r19, Z
    1938:	2a 5f       	subi	r18, 0xFA	; 250
    193a:	31 09       	sbc	r19, r1
    193c:	20 93 73 3b 	sts	0x3B73, r18	; 0x803b73 <gameSpeed>
    1940:	30 93 74 3b 	sts	0x3B74, r19	; 0x803b74 <gameSpeed+0x1>
    1944:	84 36       	cpi	r24, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1260
    }

    if (gameLevel > 99) {// for now  game continues only to level 99
    1946:	08 f4       	brcc	.+2      	; 0x194a <gameLedInvaders()+0x75e>
    1948:	5a cf       	rjmp	.-332    	; 0x17fe <gameLedInvaders()+0x612>
    194a:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1261
      drawCharacter(20, letterW, 100, 0, 0);
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	44 e6       	ldi	r20, 0x64	; 100
    1950:	6d e9       	ldi	r22, 0x9D	; 157
    1952:	72 e0       	ldi	r23, 0x02	; 2
    1954:	84 e1       	ldi	r24, 0x14	; 20
    1956:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    195a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1262
      drawCharacter(23, letterI, 100, 0, 0);
    195c:	44 e6       	ldi	r20, 0x64	; 100
    195e:	6c e8       	ldi	r22, 0x8C	; 140
    1960:	72 e0       	ldi	r23, 0x02	; 2
    1962:	87 e1       	ldi	r24, 0x17	; 23
    1964:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1968:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1263
      drawCharacter(26, letterN, 100, 0, 0);
    196a:	44 e6       	ldi	r20, 0x64	; 100
    196c:	65 eb       	ldi	r22, 0xB5	; 181
    196e:	72 e0       	ldi	r23, 0x02	; 2
    1970:	8a e1       	ldi	r24, 0x1A	; 26
    1972:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
delay():
    1976:	60 ed       	ldi	r22, 0xD0	; 208
    1978:	77 e0       	ldi	r23, 0x07	; 7
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <delay.part.0>
_Z15gameLedInvadersv():
    1982:	51 e0       	ldi	r21, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1265
      delay(2000);
      endGame = true;
    1984:	50 93 77 3b 	sts	0x3B77, r21	; 0x803b77 <endGame>
    1988:	3a cf       	rjmp	.-396    	; 0x17fe <gameLedInvaders()+0x612>
    198a:	61 e9       	ldi	r22, 0x91	; 145
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1284
      drawCharacter(3, letterE, 100, 0, 0);
      drawCharacter(6, letterW, 100, 0, 0);
      showScore(ledInvadersScore);
      writeScoreToEEPROM(5, ledInvadersScore);
    } else {
      drawCharacter(0, letterH, 100, 0, 0);
    198c:	72 e0       	ldi	r23, 0x02	; 2
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1994:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1285
      drawCharacter(3, letterI, 100, 0, 0);
    1996:	44 e6       	ldi	r20, 0x64	; 100
    1998:	6c e8       	ldi	r22, 0x8C	; 140
    199a:	72 e0       	ldi	r23, 0x02	; 2
    199c:	83 e0       	ldi	r24, 0x03	; 3
    199e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    19a2:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1286
      showScore(readScoreFromEEPROM(5));
    19a4:	0b dc       	rcall	.-2026   	; 0x11bc <readScoreFromEEPROM(unsigned char)>
    19a6:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <showScore(unsigned int)>
    19aa:	6f cf       	rjmp	.-290    	; 0x188a <gameLedInvaders()+0x69e>
    19ac:	48 ec       	ldi	r20, 0xC8	; 200
    19ae:	a4 16       	cp	r10, r20
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1199
    }

    //mother ship movement
    if (random(0 , 2000) == 500)  callMotherShip = true;

    if ((motherShipTimer >= 200) && callMotherShip) {
    19b0:	b1 04       	cpc	r11, r1
    19b2:	08 f0       	brcs	.+2      	; 0x19b6 <gameLedInvaders()+0x7ca>
    19b4:	9d cd       	rjmp	.-1222   	; 0x14f0 <gameLedInvaders()+0x304>
    19b6:	51 e0       	ldi	r21, 0x01	; 1
    19b8:	5b 83       	std	Y+3, r21	; 0x03
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1197
        }
      }
    }

    //mother ship movement
    if (random(0 , 2000) == 500)  callMotherShip = true;
    19ba:	a9 cd       	rjmp	.-1198   	; 0x150e <gameLedInvaders()+0x322>
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	80 93 1e 3a 	sts	0x3A1E, r24	; 0x803a1e <contGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1311

  if (contGame) {
    levelTitle();
    gameLedInvaders();
  } else {
    contGame = true;
    19c2:	cf d8       	rcall	.-3682   	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
    19c4:	0e 94 a6 02 	call	0x54c	; 0x54c <millis>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1312
    strip.clear();
    19c8:	60 93 79 3b 	sts	0x3B79, r22	; 0x803b79 <timer>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1313
    timer = millis();
    19cc:	70 93 7a 3b 	sts	0x3B7A, r23	; 0x803b7a <timer+0x1>
    19d0:	80 93 7b 3b 	sts	0x3B7B, r24	; 0x803b7b <timer+0x2>
    19d4:	90 93 7c 3b 	sts	0x3B7C, r25	; 0x803b7c <timer+0x3>
    19d8:	8c e3       	ldi	r24, 0x3C	; 60
    19da:	80 93 1f 3a 	sts	0x3A1F, r24	; 0x803a1f <lastMinute>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1314
    lastMinute = 60;
    19de:	8f 89       	ldd	r24, Y+23	; 0x17
    19e0:	98 8d       	ldd	r25, Y+24	; 0x18
    19e2:	8d bf       	out	0x3d, r24	; 61
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1316
  }
}
    19e4:	9e bf       	out	0x3e, r25	; 62
    19e6:	68 96       	adiw	r28, 0x18	; 24
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	ff 90       	pop	r15
    19f6:	ef 90       	pop	r14
    19f8:	df 90       	pop	r13
    19fa:	cf 90       	pop	r12
    19fc:	bf 90       	pop	r11
    19fe:	af 90       	pop	r10
    1a00:	9f 90       	pop	r9
    1a02:	8f 90       	pop	r8
    1a04:	7f 90       	pop	r7
    1a06:	6f 90       	pop	r6
    1a08:	5f 90       	pop	r5
    1a0a:	4f 90       	pop	r4
    1a0c:	3f 90       	pop	r3
    1a0e:	2f 90       	pop	r2
    1a10:	08 95       	ret

00001a12 <gameLedKanoid()>:
_Z13gameLedKanoidv():
    1a12:	2f 92       	push	r2
    1a14:	3f 92       	push	r3
    1a16:	4f 92       	push	r4
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:396
  }
  strip.clear();
}

//Game ledKanoid code
void gameLedKanoid() {
    1a18:	5f 92       	push	r5
    1a1a:	6f 92       	push	r6
    1a1c:	7f 92       	push	r7
    1a1e:	8f 92       	push	r8
    1a20:	9f 92       	push	r9
    1a22:	af 92       	push	r10
    1a24:	bf 92       	push	r11
    1a26:	cf 92       	push	r12
    1a28:	df 92       	push	r13
    1a2a:	ef 92       	push	r14
    1a2c:	ff 92       	push	r15
    1a2e:	0f 93       	push	r16
    1a30:	1f 93       	push	r17
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	ea 97       	sbiw	r28, 0x3a	; 58
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	b0 90 6e 3b 	lds	r11, 0x3B6E	; 0x803b6e <LedKanoidNumberOfplayers>
    1a44:	22 e0       	ldi	r18, 0x02	; 2
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:418
  bool ballMovement = false;
  bool ballDirectionUp = true;
  bool colitionCheck = true;
  bool ballOnPlatform = false;

  if ( LedKanoidNumberOfplayers == 2) {
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	b2 12       	cpse	r11, r18
    1a4a:	01 c0       	rjmp	.+2      	; 0x1a4e <gameLedKanoid()+0x3c>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:407
  uint8_t lastPlayerOnePos = 0;
  uint8_t playerTwoPos = 4;
  uint8_t lastPlayerTwoPos = 0;
  uint8_t ballPosition = 84;
  uint8_t ledKanoidLives = 1;
  uint8_t blocksPosition = 0;
    1a4c:	84 e1       	ldi	r24, 0x14	; 20
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:418
  bool ballMovement = false;
  bool ballDirectionUp = true;
  bool colitionCheck = true;
  bool ballOnPlatform = false;

  if ( LedKanoidNumberOfplayers == 2) {
    1a4e:	fe 01       	movw	r30, r28
    1a50:	31 96       	adiw	r30, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:419
    blocksPosition = 20;
    1a52:	7f 01       	movw	r14, r30
    1a54:	9e 01       	movw	r18, r28
    1a56:	27 5e       	subi	r18, 0xE7	; 231
    1a58:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5a:	69 01       	movw	r12, r18
    1a5c:	01 e0       	ldi	r16, 0x01	; 1
    1a5e:	10 e0       	ldi	r17, 0x00	; 0
    1a60:	e8 2f       	mov	r30, r24
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	e9 af       	std	Y+57, r30	; 0x39
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:424
  }

  for (uint8_t x = 0; x < arrayElements; x++) {
    actualBlocks[x] = pgm_read_byte_near (blocks + (x + 1)); // first enemy draw on Leds
    strip.setPixelColor((actualBlocks[x] + blocksPosition), 100, 0, 0);// led enemy position musn´t be less than 0
    1a66:	fa af       	std	Y+58, r31	; 0x3a
    1a68:	53 e6       	ldi	r21, 0x63	; 99
    1a6a:	a5 2e       	mov	r10, r21
    1a6c:	f8 01       	movw	r30, r16
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:425
    blocksDestroyed [x] = 99; // fill enemiesKilled array with a number never used some times memory stills holds a value that shouldn´t be there
    1a6e:	e6 56       	subi	r30, 0x66	; 102
    1a70:	fe 4f       	sbci	r31, 0xFE	; 254
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:423
  if ( LedKanoidNumberOfplayers == 2) {
    blocksPosition = 20;
  }

  for (uint8_t x = 0; x < arrayElements; x++) {
    actualBlocks[x] = pgm_read_byte_near (blocks + (x + 1)); // first enemy draw on Leds
    1a72:	84 91       	lpm	r24, Z
    1a74:	f6 01       	movw	r30, r12
    1a76:	81 93       	st	Z+, r24
    1a78:	6f 01       	movw	r12, r30
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	64 e6       	ldi	r22, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:424
    strip.setPixelColor((actualBlocks[x] + blocksPosition), 100, 0, 0);// led enemy position musn´t be less than 0
    1a80:	e9 ad       	ldd	r30, Y+57	; 0x39
    1a82:	fa ad       	ldd	r31, Y+58	; 0x3a
    1a84:	e8 0f       	add	r30, r24
    1a86:	f1 1d       	adc	r31, r1
    1a88:	cf 01       	movw	r24, r30
    1a8a:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    1a8e:	f7 01       	movw	r30, r14
    1a90:	a1 92       	st	Z+, r10
    1a92:	7f 01       	movw	r14, r30
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:425
    blocksDestroyed [x] = 99; // fill enemiesKilled array with a number never used some times memory stills holds a value that shouldn´t be there
    1a94:	0f 5f       	subi	r16, 0xFF	; 255
    1a96:	1f 4f       	sbci	r17, 0xFF	; 255
    1a98:	09 31       	cpi	r16, 0x19	; 25
    1a9a:	11 05       	cpc	r17, r1
    1a9c:	39 f7       	brne	.-50     	; 0x1a6c <gameLedKanoid()+0x5a>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:422

  if ( LedKanoidNumberOfplayers == 2) {
    blocksPosition = 20;
  }

  for (uint8_t x = 0; x < arrayElements; x++) {
    1a9e:	20 91 5a 38 	lds	r18, 0x385A	; 0x80385a <gameLevel>
    1aa2:	2e 31       	cpi	r18, 0x1E	; 30
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:428
    actualBlocks[x] = pgm_read_byte_near (blocks + (x + 1)); // first enemy draw on Leds
    strip.setPixelColor((actualBlocks[x] + blocksPosition), 100, 0, 0);// led enemy position musn´t be less than 0
    blocksDestroyed [x] = 99; // fill enemiesKilled array with a number never used some times memory stills holds a value that shouldn´t be there
  }

  if (gameLevel < 30 && LedKanoidNumberOfplayers == 1) {
    1aa4:	08 f0       	brcs	.+2      	; 0x1aa8 <gameLedKanoid()+0x96>
    1aa6:	30 c1       	rjmp	.+608    	; 0x1d08 <gameLedKanoid()+0x2f6>
    1aa8:	f1 e0       	ldi	r31, 0x01	; 1
    1aaa:	bf 12       	cpse	r11, r31
    1aac:	32 c1       	rjmp	.+612    	; 0x1d12 <gameLedKanoid()+0x300>
    1aae:	44 ef       	ldi	r20, 0xF4	; 244
    1ab0:	42 03       	mulsu	r20, r18
    1ab2:	90 01       	movw	r18, r0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:429
    ballSpeed = 812 - (gameLevel * 12);
    1ab4:	11 24       	eor	r1, r1
    1ab6:	c9 01       	movw	r24, r18
    1ab8:	84 5d       	subi	r24, 0xD4	; 212
    1aba:	9c 4f       	sbci	r25, 0xFC	; 252
    1abc:	8c ab       	std	Y+52, r24	; 0x34
    1abe:	9d ab       	std	Y+53, r25	; 0x35
    1ac0:	62 e0       	ldi	r22, 0x02	; 2
    1ac2:	8e e5       	ldi	r24, 0x5E	; 94
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:433
  } else {
    ballSpeed = 600;
  }
  encoder.encoderSetPosition (playerOnePos, 2);
    1ac6:	0e 94 1a 03 	call	0x634	; 0x634 <encoder::encoderSetPosition(int, unsigned char) [clone .constprop.9]>
    1aca:	51 2c       	mov	r5, r1
    1acc:	aa 24       	eor	r10, r10
    1ace:	a3 94       	inc	r10
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:416
  uint16_t playerTwoScore = 0;
  int ballEffect = 1;
  bool ballMovement = false;
  bool ballDirectionUp = true;
  bool colitionCheck = true;
  bool ballOnPlatform = false;
    1ad0:	ee 24       	eor	r14, r14
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:415
  uint16_t playerOneScore = 0;
  uint16_t playerTwoScore = 0;
  int ballEffect = 1;
  bool ballMovement = false;
  bool ballDirectionUp = true;
  bool colitionCheck = true;
    1ad2:	e3 94       	inc	r14
    1ad4:	31 2c       	mov	r3, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:414
  uint16_t ballSpeed = 800;
  uint16_t playerOneScore = 0;
  uint16_t playerTwoScore = 0;
  int ballEffect = 1;
  bool ballMovement = false;
  bool ballDirectionUp = true;
    1ad6:	31 e0       	ldi	r19, 0x01	; 1
    1ad8:	39 ab       	std	Y+49, r19	; 0x31
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:413
  uint16_t ballTimer = 0;
  uint16_t ballSpeed = 800;
  uint16_t playerOneScore = 0;
  uint16_t playerTwoScore = 0;
  int ballEffect = 1;
  bool ballMovement = false;
    1ada:	91 2c       	mov	r9, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:412
  uint8_t blocksPosition = 0;
  uint16_t ballTimer = 0;
  uint16_t ballSpeed = 800;
  uint16_t playerOneScore = 0;
  uint16_t playerTwoScore = 0;
  int ballEffect = 1;
    1adc:	81 2c       	mov	r8, r1
    1ade:	71 2c       	mov	r7, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:411
  uint8_t ledKanoidLives = 1;
  uint8_t blocksPosition = 0;
  uint16_t ballTimer = 0;
  uint16_t ballSpeed = 800;
  uint16_t playerOneScore = 0;
  uint16_t playerTwoScore = 0;
    1ae0:	61 2c       	mov	r6, r1
    1ae2:	d1 2c       	mov	r13, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:410
  uint8_t ballPosition = 84;
  uint8_t ledKanoidLives = 1;
  uint8_t blocksPosition = 0;
  uint16_t ballTimer = 0;
  uint16_t ballSpeed = 800;
  uint16_t playerOneScore = 0;
    1ae4:	c1 2c       	mov	r12, r1
    1ae6:	34 e5       	ldi	r19, 0x54	; 84
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:408
  uint8_t playerTwoPos = 4;
  uint8_t lastPlayerTwoPos = 0;
  uint8_t ballPosition = 84;
  uint8_t ledKanoidLives = 1;
  uint8_t blocksPosition = 0;
  uint16_t ballTimer = 0;
    1ae8:	f3 2e       	mov	r15, r19
    1aea:	1b aa       	std	Y+51, r1	; 0x33
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:405
  uint8_t blocksRemaining = arrayElements;
  uint8_t playerOnePos = 94;
  uint8_t lastPlayerOnePos = 0;
  uint8_t playerTwoPos = 4;
  uint8_t lastPlayerTwoPos = 0;
  uint8_t ballPosition = 84;
    1aec:	48 e1       	ldi	r20, 0x18	; 24
    1aee:	4a ab       	std	Y+50, r20	; 0x32
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:404
  uint8_t blocksDestroyed [arrayElements];// another array that contains only enemies killed
  uint8_t blocksRemaining = arrayElements;
  uint8_t playerOnePos = 94;
  uint8_t lastPlayerOnePos = 0;
  uint8_t playerTwoPos = 4;
  uint8_t lastPlayerTwoPos = 0;
    1af0:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:400
//Game ledKanoid code
void gameLedKanoid() {
  uint8_t arrayElements = 24; // reads enemy position
  uint8_t actualBlocks [arrayElements];// because enemies array cointains 1 extra element with number of elements information
  uint8_t blocksDestroyed [arrayElements];// another array that contains only enemies killed
  uint8_t blocksRemaining = arrayElements;
    1af2:	44 e0       	ldi	r20, 0x04	; 4
    1af4:	b4 2e       	mov	r11, r20
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:402
  uint8_t playerOnePos = 94;
  uint8_t lastPlayerOnePos = 0;
    1af6:	80 91 70 3b 	lds	r24, 0x3B70	; 0x803b70 <interruptTimer>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:403
  uint8_t playerTwoPos = 4;
    1afa:	88 23       	and	r24, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:437
  }
  encoder.encoderSetPosition (playerOnePos, 2);

  while (ledKanoidLives != 0 && blocksRemaining != 0) {

    if (interruptTimer) ballTimer += interruptTimer;// keeps time based on TCB0 interrupt
    1afc:	21 f0       	breq	.+8      	; 0x1b06 <gameLedKanoid()+0xf4>
    1afe:	80 91 70 3b 	lds	r24, 0x3B70	; 0x803b70 <interruptTimer>
    1b02:	c8 0e       	add	r12, r24
    1b04:	d1 1c       	adc	r13, r1
    1b06:	22 e0       	ldi	r18, 0x02	; 2
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	61 e6       	ldi	r22, 0x61	; 97
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:439

    playerOnePos = encoder.encoderRead(90, 97, false, 2);
    1b0c:	8a e5       	ldi	r24, 0x5A	; 90
    1b0e:	0e 94 31 03 	call	0x662	; 0x662 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]>
    1b12:	88 af       	std	Y+56, r24	; 0x38
    1b14:	00 e0       	ldi	r16, 0x00	; 0
    1b16:	81 17       	cp	r24, r17
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <gameLedKanoid()+0x10a>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:442

    if (playerOnePos != lastPlayerOnePos) {
      drawCharacter(lastPlayerOnePos, playerPlatform, 0, 0, 0);
    1b1a:	00 c1       	rjmp	.+512    	; 0x1d1c <gameLedKanoid()+0x30a>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:441

    if (interruptTimer) ballTimer += interruptTimer;// keeps time based on TCB0 interrupt

    playerOnePos = encoder.encoderRead(90, 97, false, 2);

    if (playerOnePos != lastPlayerOnePos) {
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	66 e9       	ldi	r22, 0x96	; 150
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:442
      drawCharacter(lastPlayerOnePos, playerPlatform, 0, 0, 0);
    1b22:	71 e0       	ldi	r23, 0x01	; 1
    1b24:	81 2f       	mov	r24, r17
    1b26:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1b2a:	33 20       	and	r3, r3
    1b2c:	11 f0       	breq	.+4      	; 0x1b32 <gameLedKanoid()+0x120>
    1b2e:	55 20       	and	r5, r5
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:444

      if (!ballMovement || ballOnPlatform) {
    1b30:	b9 f0       	breq	.+46     	; 0x1b60 <gameLedKanoid()+0x14e>
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	40 e0       	ldi	r20, 0x00	; 0
    1b36:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:445
        strip.setPixelColor(ballPosition, 0 , 0 , 0);
    1b38:	8f 2d       	mov	r24, r15
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    1b40:	22 e0       	ldi	r18, 0x02	; 2
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	61 e6       	ldi	r22, 0x61	; 97
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:446
        ballPosition = (encoder.encoderRead(90, 97, false, 2) - 9);
    1b46:	8a e5       	ldi	r24, 0x5A	; 90
    1b48:	0e 94 31 03 	call	0x662	; 0x662 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]>
    1b4c:	27 ef       	ldi	r18, 0xF7	; 247
    1b4e:	f2 2e       	mov	r15, r18
    1b50:	f8 0e       	add	r15, r24
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	40 e5       	ldi	r20, 0x50	; 80
    1b56:	60 e5       	ldi	r22, 0x50	; 80
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:447
        strip.setPixelColor(ballPosition, 80 , 80 , 0);
    1b58:	8f 2d       	mov	r24, r15
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    1b60:	80 91 6e 3b 	lds	r24, 0x3B6E	; 0x803b6e <LedKanoidNumberOfplayers>
    1b64:	82 30       	cpi	r24, 0x02	; 2
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:454
      lastPlayerOnePos = playerOnePos;
    } else {
      drawCharacter(playerOnePos, playerPlatform, 0, 100, 0);
    }

    if (LedKanoidNumberOfplayers == 2) {
    1b66:	49 f5       	brne	.+82     	; 0x1bba <gameLedKanoid()+0x1a8>
    1b68:	02 e3       	ldi	r16, 0x32	; 50
    1b6a:	10 e0       	ldi	r17, 0x00	; 0
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:456

      if (buttonDebounce(1, 0, 0, 50) && playerTwoPos > 0) {
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    1b7a:	88 23       	and	r24, r24
    1b7c:	11 f0       	breq	.+4      	; 0x1b82 <gameLedKanoid()+0x170>
    1b7e:	b1 10       	cpse	r11, r1
    1b80:	ba 94       	dec	r11
    1b82:	02 e3       	ldi	r16, 0x32	; 50
    1b84:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:457
        playerTwoPos--;
    1b86:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:460
      }

      if (buttonDebounce(0, 1, 0, 50) && playerTwoPos < 7) {
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    1b94:	88 23       	and	r24, r24
    1b96:	21 f0       	breq	.+8      	; 0x1ba0 <gameLedKanoid()+0x18e>
    1b98:	96 e0       	ldi	r25, 0x06	; 6
    1b9a:	9b 15       	cp	r25, r11
    1b9c:	08 f0       	brcs	.+2      	; 0x1ba0 <gameLedKanoid()+0x18e>
    1b9e:	b3 94       	inc	r11
    1ba0:	eb a9       	ldd	r30, Y+51	; 0x33
    1ba2:	be 16       	cp	r11, r30
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:461
        playerTwoPos++;
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <gameLedKanoid()+0x196>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:464
      }

      if (playerTwoPos != lastPlayerTwoPos) {
    1ba6:	c2 c0       	rjmp	.+388    	; 0x1d2c <gameLedKanoid()+0x31a>
    1ba8:	00 e0       	ldi	r16, 0x00	; 0
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:465
        drawCharacter(lastPlayerTwoPos, playerPlatform, 0, 0, 0);
    1bae:	66 e9       	ldi	r22, 0x96	; 150
    1bb0:	71 e0       	ldi	r23, 0x01	; 1
    1bb2:	8e 2f       	mov	r24, r30
    1bb4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1bb8:	bb aa       	std	Y+51, r11	; 0x33
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:467
      } else {
        drawCharacter(playerTwoPos, playerPlatform, 0, 0, 100);
    1bba:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    1bbe:	82 ff       	sbrs	r24, 2
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:472
      }
      lastPlayerTwoPos = playerTwoPos;
    }

    if (LEFTLOW || RIGHTLOW  && ballOnPlatform) {
    1bc0:	80 c2       	rjmp	.+1280   	; 0x20c2 <gameLedKanoid()+0x6b0>
    1bc2:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    1bc6:	81 fd       	sbrc	r24, 1
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <gameLedKanoid()+0x1bc>
    1bca:	51 10       	cpse	r5, r1
    1bcc:	7a c2       	rjmp	.+1268   	; 0x20c2 <gameLedKanoid()+0x6b0>
    1bce:	2c a9       	ldd	r18, Y+52	; 0x34
    1bd0:	3d a9       	ldd	r19, Y+53	; 0x35
    1bd2:	c2 16       	cp	r12, r18
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:477
      ballMovement = true;
      ballOnPlatform = false;
    }

    if ((ballTimer >= ballSpeed) && ballMovement) {
    1bd4:	d3 06       	cpc	r13, r19
    1bd6:	08 f4       	brcc	.+2      	; 0x1bda <gameLedKanoid()+0x1c8>
    1bd8:	5f c0       	rjmp	.+190    	; 0x1c98 <gameLedKanoid()+0x286>
    1bda:	33 20       	and	r3, r3
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <gameLedKanoid()+0x1ce>
    1bde:	5c c0       	rjmp	.+184    	; 0x1c98 <gameLedKanoid()+0x286>
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:481
      ballTimer = 0;
      colitionCheck = true;
      ballOnPlatform = false;
      strip.setPixelColor(ballPosition, 0 , 0 , 0);
    1be6:	8f 2d       	mov	r24, r15
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    1bee:	39 e0       	ldi	r19, 0x09	; 9
    1bf0:	3f 15       	cp	r19, r15
    1bf2:	28 f4       	brcc	.+10     	; 0x1bfe <gameLedKanoid()+0x1ec>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:483

      if (ballDirectionUp & ballPosition > 9) {
    1bf4:	86 ef       	ldi	r24, 0xF6	; 246
    1bf6:	49 a9       	ldd	r20, Y+49	; 0x31
    1bf8:	84 1b       	sub	r24, r20
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:484
        ballPosition -= 10 + ballEffect;
    1bfa:	e1 10       	cpse	r14, r1
    1bfc:	03 c0       	rjmp	.+6      	; 0x1c04 <gameLedKanoid()+0x1f2>
    1bfe:	8a e0       	ldi	r24, 0x0A	; 10
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:483
      ballTimer = 0;
      colitionCheck = true;
      ballOnPlatform = false;
      strip.setPixelColor(ballPosition, 0 , 0 , 0);

      if (ballDirectionUp & ballPosition > 9) {
    1c00:	99 a9       	ldd	r25, Y+49	; 0x31
    1c02:	89 1b       	sub	r24, r25
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:486
        ballPosition -= 10 + ballEffect;
      } else {
        ballPosition += 10 - ballEffect;
    1c04:	f8 0e       	add	r15, r24
    1c06:	0f 2d       	mov	r16, r15
    1c08:	10 e0       	ldi	r17, 0x00	; 0
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:488
      }
      strip.setPixelColor(ballPosition, 80 , 80 , 0);
    1c0c:	40 e5       	ldi	r20, 0x50	; 80
    1c0e:	60 e5       	ldi	r22, 0x50	; 80
    1c10:	c8 01       	movw	r24, r16
    1c12:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    1c16:	fe 01       	movw	r30, r28
    1c18:	31 96       	adiw	r30, 0x01	; 1
    1c1a:	6f 01       	movw	r12, r30
    1c1c:	9e 01       	movw	r18, r28
    1c1e:	27 5e       	subi	r18, 0xE7	; 231
    1c20:	3f 4f       	sbci	r19, 0xFF	; 255
    1c22:	29 01       	movw	r4, r18
    1c24:	31 2c       	mov	r3, r1
    1c26:	0e ab       	std	Y+54, r16	; 0x36
    1c28:	1f ab       	std	Y+55, r17	; 0x37
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:490

      for (uint8_t x = 0; x < arrayElements && colitionCheck; x++) {// if enemies are killed another array is created containing only killed enemies
    1c2a:	f2 01       	movw	r30, r4
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:491
        if (ballPosition  == (actualBlocks[x] + blocksPosition) && blocksDestroyed [x] != x) {
    1c2c:	81 91       	ld	r24, Z+
    1c2e:	2f 01       	movw	r4, r30
    1c30:	29 ad       	ldd	r18, Y+57	; 0x39
    1c32:	3a ad       	ldd	r19, Y+58	; 0x3a
    1c34:	28 0f       	add	r18, r24
    1c36:	31 1d       	adc	r19, r1
    1c38:	ee a9       	ldd	r30, Y+54	; 0x36
    1c3a:	ff a9       	ldd	r31, Y+55	; 0x37
    1c3c:	e2 17       	cp	r30, r18
    1c3e:	f3 07       	cpc	r31, r19
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <gameLedKanoid()+0x232>
    1c42:	86 c0       	rjmp	.+268    	; 0x1d50 <gameLedKanoid()+0x33e>
    1c44:	f6 01       	movw	r30, r12
    1c46:	80 81       	ld	r24, Z
    1c48:	83 15       	cp	r24, r3
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <gameLedKanoid()+0x23c>
    1c4c:	81 c0       	rjmp	.+258    	; 0x1d50 <gameLedKanoid()+0x33e>
    1c4e:	30 82       	st	Z, r3
    1c50:	fa a9       	ldd	r31, Y+50	; 0x32
    1c52:	f1 50       	subi	r31, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:492
          blocksDestroyed [x] = x;
    1c54:	fa ab       	std	Y+50, r31	; 0x32
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:493
          blocksRemaining--;
    1c56:	80 91 26 3a 	lds	r24, 0x3A26	; 0x803a26 <__data_end>
    1c5a:	90 91 27 3a 	lds	r25, 0x3A27	; 0x803a27 <__data_end+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:494
          ledKanoidScore ++;
    1c5e:	01 96       	adiw	r24, 0x01	; 1
    1c60:	80 93 26 3a 	sts	0x3A26, r24	; 0x803a26 <__data_end>
    1c64:	90 93 27 3a 	sts	0x3A27, r25	; 0x803a27 <__data_end+0x1>
    1c68:	21 e0       	ldi	r18, 0x01	; 1
    1c6a:	e2 26       	eor	r14, r18
    1c6c:	66 e9       	ldi	r22, 0x96	; 150
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:495
          ballDirectionUp = !ballDirectionUp;
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	82 e3       	ldi	r24, 0x32	; 50
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:497
          colitionCheck = false;
          beep(50, 150);
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	0e 94 7f 05 	call	0xafe	; 0xafe <beep(int, int)>
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:498
          strip.setPixelColor((actualBlocks[x] + blocksPosition), 0, 0, 0);
    1c7e:	c8 01       	movw	r24, r16
    1c80:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    1c84:	a1 2c       	mov	r10, r1
    1c86:	33 94       	inc	r3
    1c88:	38 e1       	ldi	r19, 0x18	; 24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:496
        if (ballPosition  == (actualBlocks[x] + blocksPosition) && blocksDestroyed [x] != x) {
          blocksDestroyed [x] = x;
          blocksRemaining--;
          ledKanoidScore ++;
          ballDirectionUp = !ballDirectionUp;
          colitionCheck = false;
    1c8a:	33 12       	cpse	r3, r19
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:490
      } else {
        ballPosition += 10 - ballEffect;
      }
      strip.setPixelColor(ballPosition, 80 , 80 , 0);

      for (uint8_t x = 0; x < arrayElements && colitionCheck; x++) {// if enemies are killed another array is created containing only killed enemies
    1c8c:	56 c0       	rjmp	.+172    	; 0x1d3a <gameLedKanoid()+0x328>
    1c8e:	33 24       	eor	r3, r3
    1c90:	33 94       	inc	r3
    1c92:	51 2c       	mov	r5, r1
    1c94:	d1 2c       	mov	r13, r1
    1c96:	c1 2c       	mov	r12, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:480
    }

    if ((ballTimer >= ballSpeed) && ballMovement) {
      ballTimer = 0;
      colitionCheck = true;
      ballOnPlatform = false;
    1c98:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:478
      ballMovement = true;
      ballOnPlatform = false;
    }

    if ((ballTimer >= ballSpeed) && ballMovement) {
      ballTimer = 0;
    1c9a:	00 e0       	ldi	r16, 0x00	; 0
    1c9c:	aa 20       	and	r10, r10
    1c9e:	19 f1       	breq	.+70     	; 0x1ce6 <gameLedKanoid()+0x2d4>
    1ca0:	f8 01       	movw	r30, r16
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:503
          strip.setPixelColor((actualBlocks[x] + blocksPosition), 0, 0, 0);
        }
      }
    }

    for (uint8_t x = 0; x < 10 && colitionCheck; x++) {
    1ca2:	e9 53       	subi	r30, 0x39	; 57
    1ca4:	fe 4f       	sbci	r31, 0xFE	; 254
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:505

      if ( ballPosition == pgm_read_byte_near (screenRightBounds + x)) {
    1ca6:	e4 91       	lpm	r30, Z
    1ca8:	fe 12       	cpse	r15, r30
    1caa:	09 c0       	rjmp	.+18     	; 0x1cbe <gameLedKanoid()+0x2ac>
    1cac:	62 e3       	ldi	r22, 0x32	; 50
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	82 e3       	ldi	r24, 0x32	; 50
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:508
        ballEffect = 1;
        colitionCheck = false;
        beep(50, 50);
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 94 7f 05 	call	0xafe	; 0xafe <beep(int, int)>
    1cb8:	a1 2c       	mov	r10, r1
    1cba:	41 e0       	ldi	r20, 0x01	; 1
    1cbc:	49 ab       	std	Y+49, r20	; 0x31
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:507

    for (uint8_t x = 0; x < 10 && colitionCheck; x++) {

      if ( ballPosition == pgm_read_byte_near (screenRightBounds + x)) {
        ballEffect = 1;
        colitionCheck = false;
    1cbe:	f8 01       	movw	r30, r16
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:506
    }

    for (uint8_t x = 0; x < 10 && colitionCheck; x++) {

      if ( ballPosition == pgm_read_byte_near (screenRightBounds + x)) {
        ballEffect = 1;
    1cc0:	e3 54       	subi	r30, 0x43	; 67
    1cc2:	fe 4f       	sbci	r31, 0xFE	; 254
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:511
        colitionCheck = false;
        beep(50, 50);
      }

      if ( ballPosition == pgm_read_byte_near (screenLeftBounds + x)) {
    1cc4:	e4 91       	lpm	r30, Z
    1cc6:	fe 12       	cpse	r15, r30
    1cc8:	09 c0       	rjmp	.+18     	; 0x1cdc <gameLedKanoid()+0x2ca>
    1cca:	62 e3       	ldi	r22, 0x32	; 50
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	82 e3       	ldi	r24, 0x32	; 50
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:514
        ballEffect = -1;
        colitionCheck = false;
        beep(50, 50);
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 94 7f 05 	call	0xafe	; 0xafe <beep(int, int)>
    1cd6:	a1 2c       	mov	r10, r1
    1cd8:	8f ef       	ldi	r24, 0xFF	; 255
    1cda:	89 ab       	std	Y+49, r24	; 0x31
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:513
        beep(50, 50);
      }

      if ( ballPosition == pgm_read_byte_near (screenLeftBounds + x)) {
        ballEffect = -1;
        colitionCheck = false;
    1cdc:	0f 5f       	subi	r16, 0xFF	; 255
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:512
        colitionCheck = false;
        beep(50, 50);
      }

      if ( ballPosition == pgm_read_byte_near (screenLeftBounds + x)) {
        ballEffect = -1;
    1cde:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce0:	0a 30       	cpi	r16, 0x0A	; 10
    1ce2:	11 05       	cpc	r17, r1
    1ce4:	d9 f6       	brne	.-74     	; 0x1c9c <gameLedKanoid()+0x28a>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:503
          strip.setPixelColor((actualBlocks[x] + blocksPosition), 0, 0, 0);
        }
      }
    }

    for (uint8_t x = 0; x < 10 && colitionCheck; x++) {
    1ce6:	99 e0       	ldi	r25, 0x09	; 9
    1ce8:	9f 15       	cp	r25, r15
    1cea:	a8 f1       	brcs	.+106    	; 0x1d56 <gameLedKanoid()+0x344>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:518
        colitionCheck = false;
        beep(50, 50);
      }
    }

    if (ballPosition < 10 && LedKanoidNumberOfplayers == 1) {
    1cec:	40 90 6e 3b 	lds	r4, 0x3B6E	; 0x803b6e <LedKanoidNumberOfplayers>
    1cf0:	e1 e0       	ldi	r30, 0x01	; 1
    1cf2:	4e 16       	cp	r4, r30
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <gameLedKanoid()+0x2e6>
    1cf6:	3f c0       	rjmp	.+126    	; 0x1d76 <gameLedKanoid()+0x364>
    1cf8:	80 91 26 3a 	lds	r24, 0x3A26	; 0x803a26 <__data_end>
    1cfc:	90 91 27 3a 	lds	r25, 0x3A27	; 0x803a27 <__data_end+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:521
      ballDirectionUp =  false;
    } else if (ballPosition < 10) {
      playerOneScore += ledKanoidScore;
    1d00:	68 0e       	add	r6, r24
    1d02:	79 1e       	adc	r7, r25
    1d04:	41 2c       	mov	r4, r1
    1d06:	38 c0       	rjmp	.+112    	; 0x1d78 <gameLedKanoid()+0x366>
    1d08:	e8 e5       	ldi	r30, 0x58	; 88
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:529

    if (ballPosition > 89) {
      if (LedKanoidNumberOfplayers == 2) {
        playerTwoScore += ledKanoidScore;
      }
      ledKanoidLives = 0;
    1d0a:	f2 e0       	ldi	r31, 0x02	; 2
    1d0c:	ec ab       	std	Y+52, r30	; 0x34
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:431
  }

  if (gameLevel < 30 && LedKanoidNumberOfplayers == 1) {
    ballSpeed = 812 - (gameLevel * 12);
  } else {
    ballSpeed = 600;
    1d0e:	fd ab       	std	Y+53, r31	; 0x35
    1d10:	d7 ce       	rjmp	.-594    	; 0x1ac0 <gameLedKanoid()+0xae>
    1d12:	28 e5       	ldi	r18, 0x58	; 88
    1d14:	32 e0       	ldi	r19, 0x02	; 2
    1d16:	2c ab       	std	Y+52, r18	; 0x34
    1d18:	3d ab       	std	Y+53, r19	; 0x35
    1d1a:	d2 ce       	rjmp	.-604    	; 0x1ac0 <gameLedKanoid()+0xae>
    1d1c:	24 e6       	ldi	r18, 0x64	; 100
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	66 e9       	ldi	r22, 0x96	; 150
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:451
        ballPosition = (encoder.encoderRead(90, 97, false, 2) - 9);
        strip.setPixelColor(ballPosition, 80 , 80 , 0);
      }
      lastPlayerOnePos = playerOnePos;
    } else {
      drawCharacter(playerOnePos, playerPlatform, 0, 100, 0);
    1d22:	71 e0       	ldi	r23, 0x01	; 1
    1d24:	81 2f       	mov	r24, r17
    1d26:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1d2a:	1a cf       	rjmp	.-460    	; 0x1b60 <gameLedKanoid()+0x14e>
    1d2c:	04 e6       	ldi	r16, 0x64	; 100
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:467
      }

      if (playerTwoPos != lastPlayerTwoPos) {
        drawCharacter(lastPlayerTwoPos, playerPlatform, 0, 0, 0);
      } else {
        drawCharacter(playerTwoPos, playerPlatform, 0, 0, 100);
    1d32:	66 e9       	ldi	r22, 0x96	; 150
    1d34:	71 e0       	ldi	r23, 0x01	; 1
    1d36:	8b 2d       	mov	r24, r11
    1d38:	3d cf       	rjmp	.-390    	; 0x1bb4 <gameLedKanoid()+0x1a2>
    1d3a:	3f ef       	ldi	r19, 0xFF	; 255
    1d3c:	c3 1a       	sub	r12, r19
    1d3e:	d3 0a       	sbc	r13, r19
    1d40:	a1 10       	cpse	r10, r1
    1d42:	73 cf       	rjmp	.-282    	; 0x1c2a <gameLedKanoid()+0x218>
    1d44:	51 2c       	mov	r5, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:490
      } else {
        ballPosition += 10 - ballEffect;
      }
      strip.setPixelColor(ballPosition, 80 , 80 , 0);

      for (uint8_t x = 0; x < arrayElements && colitionCheck; x++) {// if enemies are killed another array is created containing only killed enemies
    1d46:	33 24       	eor	r3, r3
    1d48:	33 94       	inc	r3
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:480
    }

    if ((ballTimer >= ballSpeed) && ballMovement) {
      ballTimer = 0;
      colitionCheck = true;
      ballOnPlatform = false;
    1d4a:	d1 2c       	mov	r13, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:490
      } else {
        ballPosition += 10 - ballEffect;
      }
      strip.setPixelColor(ballPosition, 80 , 80 , 0);

      for (uint8_t x = 0; x < arrayElements && colitionCheck; x++) {// if enemies are killed another array is created containing only killed enemies
    1d4c:	c1 2c       	mov	r12, r1
    1d4e:	cb cf       	rjmp	.-106    	; 0x1ce6 <gameLedKanoid()+0x2d4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:478
      ballMovement = true;
      ballOnPlatform = false;
    }

    if ((ballTimer >= ballSpeed) && ballMovement) {
      ballTimer = 0;
    1d50:	aa 24       	eor	r10, r10
    1d52:	a3 94       	inc	r10
    1d54:	98 cf       	rjmp	.-208    	; 0x1c86 <gameLedKanoid()+0x274>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:491
        ballPosition += 10 - ballEffect;
      }
      strip.setPixelColor(ballPosition, 80 , 80 , 0);

      for (uint8_t x = 0; x < arrayElements && colitionCheck; x++) {// if enemies are killed another array is created containing only killed enemies
        if (ballPosition  == (actualBlocks[x] + blocksPosition) && blocksDestroyed [x] != x) {
    1d56:	f9 e5       	ldi	r31, 0x59	; 89
    1d58:	44 24       	eor	r4, r4
    1d5a:	43 94       	inc	r4
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:525
    } else if (ballPosition < 10) {
      playerOneScore += ledKanoidScore;
      ledKanoidLives = 0;
    }

    if (ballPosition > 89) {
    1d5c:	ff 15       	cp	r31, r15
    1d5e:	60 f4       	brcc	.+24     	; 0x1d78 <gameLedKanoid()+0x366>
    1d60:	80 91 6e 3b 	lds	r24, 0x3B6E	; 0x803b6e <LedKanoidNumberOfplayers>
    1d64:	82 30       	cpi	r24, 0x02	; 2
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:526
      if (LedKanoidNumberOfplayers == 2) {
    1d66:	71 f6       	brne	.-100    	; 0x1d04 <gameLedKanoid()+0x2f2>
    1d68:	80 91 26 3a 	lds	r24, 0x3A26	; 0x803a26 <__data_end>
    1d6c:	90 91 27 3a 	lds	r25, 0x3A27	; 0x803a27 <__data_end+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:527
        playerTwoScore += ledKanoidScore;
    1d70:	88 0e       	add	r8, r24
    1d72:	99 1e       	adc	r9, r25
    1d74:	c7 cf       	rjmp	.-114    	; 0x1d04 <gameLedKanoid()+0x2f2>
    1d76:	e1 2c       	mov	r14, r1
    1d78:	51 10       	cpse	r5, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:519
        beep(50, 50);
      }
    }

    if (ballPosition < 10 && LedKanoidNumberOfplayers == 1) {
      ballDirectionUp =  false;
    1d7a:	c3 c1       	rjmp	.+902    	; 0x2102 <gameLedKanoid()+0x6f0>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:532
        playerTwoScore += ledKanoidScore;
      }
      ledKanoidLives = 0;
    }

    for (uint8_t x = 10; x > 7 && !ballOnPlatform; x--) { // checks if ball touched player 1 platform and effect to the ball
    1d7c:	4f 2d       	mov	r20, r15
    1d7e:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:534

      if (ballPosition == (playerOnePos - x)) {
    1d80:	28 ad       	ldd	r18, Y+56	; 0x38
    1d82:	82 2f       	mov	r24, r18
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9c 01       	movw	r18, r24
    1d88:	2a 50       	subi	r18, 0x0A	; 10
    1d8a:	31 09       	sbc	r19, r1
    1d8c:	42 17       	cp	r20, r18
    1d8e:	53 07       	cpc	r21, r19
    1d90:	09 f0       	breq	.+2      	; 0x1d94 <gameLedKanoid()+0x382>
    1d92:	a1 c1       	rjmp	.+834    	; 0x20d6 <gameLedKanoid()+0x6c4>
    1d94:	30 e5       	ldi	r19, 0x50	; 80
    1d96:	ee 24       	eor	r14, r14
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:539
        ballDirectionUp = true;
        switch (x) {
          case (10):

            if (ballPosition == 80) {
    1d98:	e3 94       	inc	r14
    1d9a:	f3 16       	cp	r15, r19
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <gameLedKanoid()+0x38e>
    1d9e:	b4 c1       	rjmp	.+872    	; 0x2108 <gameLedKanoid()+0x6f6>
    1da0:	41 e0       	ldi	r20, 0x01	; 1
    1da2:	49 ab       	std	Y+49, r20	; 0x31
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:548
            }
            break;
          case (8):

            if (ballPosition == 89) {
              ballEffect = 1;
    1da4:	ab c1       	rjmp	.+854    	; 0x20fc <gameLedKanoid()+0x6ea>
    1da6:	90 91 6e 3b 	lds	r25, 0x3B6E	; 0x803b6e <LedKanoidNumberOfplayers>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:559
        ballTimer = 250;
        ballOnPlatform = true;
      }
    }

    for (uint8_t x = 10; x < 13 && !ballOnPlatform && LedKanoidNumberOfplayers == 2; x++) { // checks if ball touched player 2 platform and effect to the ball
    1daa:	2b 2d       	mov	r18, r11
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	26 5f       	subi	r18, 0xF6	; 246
    1db0:	3f 4f       	sbci	r19, 0xFF	; 255
    1db2:	8a e0       	ldi	r24, 0x0A	; 10
    1db4:	92 30       	cpi	r25, 0x02	; 2
    1db6:	21 f0       	breq	.+8      	; 0x1dc0 <gameLedKanoid()+0x3ae>
    1db8:	51 2c       	mov	r5, r1
    1dba:	29 c0       	rjmp	.+82     	; 0x1e0e <gameLedKanoid()+0x3fc>
    1dbc:	51 10       	cpse	r5, r1
    1dbe:	27 c0       	rjmp	.+78     	; 0x1e0e <gameLedKanoid()+0x3fc>
    1dc0:	51 2c       	mov	r5, r1
    1dc2:	24 17       	cp	r18, r20
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:561

      if (ballPosition == (playerTwoPos + x)) {
    1dc4:	35 07       	cpc	r19, r21
    1dc6:	f1 f4       	brne	.+60     	; 0x1e04 <gameLedKanoid()+0x3f2>
    1dc8:	8a 30       	cpi	r24, 0x0A	; 10
    1dca:	31 f0       	breq	.+12     	; 0x1dd8 <gameLedKanoid()+0x3c6>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:563
        ballDirectionUp = false;
        switch (x) {
    1dcc:	8c 30       	cpi	r24, 0x0C	; 12
    1dce:	71 f0       	breq	.+28     	; 0x1dec <gameLedKanoid()+0x3da>
    1dd0:	e1 2c       	mov	r14, r1
    1dd2:	55 24       	eor	r5, r5
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:562
    }

    for (uint8_t x = 10; x < 13 && !ballOnPlatform && LedKanoidNumberOfplayers == 2; x++) { // checks if ball touched player 2 platform and effect to the ball

      if (ballPosition == (playerTwoPos + x)) {
        ballDirectionUp = false;
    1dd4:	53 94       	inc	r5
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:582
              ballEffect = -1;
            }
            break;
        }
        ballTimer = 250;
        ballOnPlatform = true;
    1dd6:	13 c0       	rjmp	.+38     	; 0x1dfe <gameLedKanoid()+0x3ec>
    1dd8:	ea e0       	ldi	r30, 0x0A	; 10
    1dda:	e1 2c       	mov	r14, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:566
      if (ballPosition == (playerTwoPos + x)) {
        ballDirectionUp = false;
        switch (x) {
          case (10):

            if (ballPosition == 10) {
    1ddc:	55 24       	eor	r5, r5
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:562
    }

    for (uint8_t x = 10; x < 13 && !ballOnPlatform && LedKanoidNumberOfplayers == 2; x++) { // checks if ball touched player 2 platform and effect to the ball

      if (ballPosition == (playerTwoPos + x)) {
        ballDirectionUp = false;
    1dde:	53 94       	inc	r5
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:582
              ballEffect = -1;
            }
            break;
        }
        ballTimer = 250;
        ballOnPlatform = true;
    1de0:	f1 e0       	ldi	r31, 0x01	; 1
    1de2:	fe 12       	cpse	r15, r30
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:569
          case (10):

            if (ballPosition == 10) {
              ballEffect = -1;
            } else {
              ballEffect = 1;
    1de4:	01 c0       	rjmp	.+2      	; 0x1de8 <gameLedKanoid()+0x3d6>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:566
      if (ballPosition == (playerTwoPos + x)) {
        ballDirectionUp = false;
        switch (x) {
          case (10):

            if (ballPosition == 10) {
    1de6:	ff ef       	ldi	r31, 0xFF	; 255
    1de8:	f9 ab       	std	Y+49, r31	; 0x31
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:577
          case (12):

            if (ballPosition == 19) {
              ballEffect = 1;
            } else {
              ballEffect = -1;
    1dea:	09 c0       	rjmp	.+18     	; 0x1dfe <gameLedKanoid()+0x3ec>
    1dec:	93 e1       	ldi	r25, 0x13	; 19
    1dee:	e1 2c       	mov	r14, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:574
              ballEffect = 1;
            }
            break;
          case (12):

            if (ballPosition == 19) {
    1df0:	55 24       	eor	r5, r5
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:562
    }

    for (uint8_t x = 10; x < 13 && !ballOnPlatform && LedKanoidNumberOfplayers == 2; x++) { // checks if ball touched player 2 platform and effect to the ball

      if (ballPosition == (playerTwoPos + x)) {
        ballDirectionUp = false;
    1df2:	53 94       	inc	r5
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:582
              ballEffect = -1;
            }
            break;
        }
        ballTimer = 250;
        ballOnPlatform = true;
    1df4:	f9 16       	cp	r15, r25
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <gameLedKanoid()+0x3e8>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:574
              ballEffect = 1;
            }
            break;
          case (12):

            if (ballPosition == 19) {
    1df8:	fa c0       	rjmp	.+500    	; 0x1fee <gameLedKanoid()+0x5dc>
    1dfa:	ef ef       	ldi	r30, 0xFF	; 255
    1dfc:	e9 ab       	std	Y+49, r30	; 0x31
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:577
              ballEffect = 1;
            } else {
              ballEffect = -1;
    1dfe:	9a ef       	ldi	r25, 0xFA	; 250
    1e00:	c9 2e       	mov	r12, r25
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:581
            }
            break;
        }
        ballTimer = 250;
    1e02:	d1 2c       	mov	r13, r1
    1e04:	8f 5f       	subi	r24, 0xFF	; 255
    1e06:	2f 5f       	subi	r18, 0xFF	; 255
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:559
        ballTimer = 250;
        ballOnPlatform = true;
      }
    }

    for (uint8_t x = 10; x < 13 && !ballOnPlatform && LedKanoidNumberOfplayers == 2; x++) { // checks if ball touched player 2 platform and effect to the ball
    1e08:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0a:	8d 30       	cpi	r24, 0x0D	; 13
    1e0c:	b9 f6       	brne	.-82     	; 0x1dbc <gameLedKanoid()+0x3aa>
    1e0e:	08 ec       	ldi	r16, 0xC8	; 200
    1e10:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:586
        ballTimer = 250;
        ballOnPlatform = true;
      }
    }

    if (buttonDebounce(0, 0, 1, 200)) {//Pause menu
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	41 e0       	ldi	r20, 0x01	; 1
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    1e20:	88 23       	and	r24, r24
    1e22:	f1 f0       	breq	.+60     	; 0x1e60 <gameLedKanoid()+0x44e>
    1e24:	09 d9       	rcall	.-3566   	; 0x1038 <gameMenu()>
    1e26:	8e 01       	movw	r16, r28
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:587
      gameMenu ();
    1e28:	07 5e       	subi	r16, 0xE7	; 231
    1e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	31 96       	adiw	r30, 0x01	; 1
    1e30:	ee ab       	std	Y+54, r30	; 0x36
    1e32:	ff ab       	std	Y+55, r31	; 0x37
    1e34:	21 2c       	mov	r2, r1
    1e36:	ee a9       	ldd	r30, Y+54	; 0x36
    1e38:	ff a9       	ldd	r31, Y+55	; 0x37
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:588
      for (uint8_t x = 0; x < arrayElements; x++) {
    1e3a:	81 91       	ld	r24, Z+
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:589
        if (x != blocksDestroyed [x])  strip.setPixelColor(actualBlocks[x], 100, 0, 0);// led enemy position musn´t be less than 0
    1e3c:	ee ab       	std	Y+54, r30	; 0x36
    1e3e:	ff ab       	std	Y+55, r31	; 0x37
    1e40:	82 15       	cp	r24, r2
    1e42:	41 f0       	breq	.+16     	; 0x1e54 <gameLedKanoid()+0x442>
    1e44:	f8 01       	movw	r30, r16
    1e46:	80 81       	ld	r24, Z
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	64 e6       	ldi	r22, 0x64	; 100
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    1e54:	23 94       	inc	r2
    1e56:	0f 5f       	subi	r16, 0xFF	; 255
    1e58:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:588
      }
    }

    if (buttonDebounce(0, 0, 1, 200)) {//Pause menu
      gameMenu ();
      for (uint8_t x = 0; x < arrayElements; x++) {
    1e5a:	f8 e1       	ldi	r31, 0x18	; 24
    1e5c:	2f 12       	cpse	r2, r31
    1e5e:	eb cf       	rjmp	.-42     	; 0x1e36 <gameLedKanoid()+0x424>
    1e60:	80 91 77 3b 	lds	r24, 0x3B77	; 0x803b77 <endGame>
    1e64:	81 11       	cpse	r24, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:593
        if (x != blocksDestroyed [x])  strip.setPixelColor(actualBlocks[x], 100, 0, 0);// led enemy position musn´t be less than 0
      }
    }

    if (endGame)  break;
    1e66:	06 c0       	rjmp	.+12     	; 0x1e74 <gameLedKanoid()+0x462>
    1e68:	44 20       	and	r4, r4
    1e6a:	21 f0       	breq	.+8      	; 0x1e74 <gameLedKanoid()+0x462>
    1e6c:	18 ad       	ldd	r17, Y+56	; 0x38
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:435
  } else {
    ballSpeed = 600;
  }
  encoder.encoderSetPosition (playerOnePos, 2);

  while (ledKanoidLives != 0 && blocksRemaining != 0) {
    1e6e:	8a a9       	ldd	r24, Y+50	; 0x32
    1e70:	81 11       	cpse	r24, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:439

    if (interruptTimer) ballTimer += interruptTimer;// keeps time based on TCB0 interrupt

    playerOnePos = encoder.encoderRead(90, 97, false, 2);
    1e72:	41 ce       	rjmp	.-894    	; 0x1af6 <gameLedKanoid()+0xe4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:435
  } else {
    ballSpeed = 600;
  }
  encoder.encoderSetPosition (playerOnePos, 2);

  while (ledKanoidLives != 0 && blocksRemaining != 0) {
    1e74:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
    1e78:	0e 94 a6 02 	call	0x54c	; 0x54c <millis>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:595
      }
    }

    if (endGame)  break;
  }
  strip.clear();
    1e7c:	60 93 79 3b 	sts	0x3B79, r22	; 0x803b79 <timer>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:596
  timer = millis();
    1e80:	70 93 7a 3b 	sts	0x3B7A, r23	; 0x803b7a <timer+0x1>
    1e84:	80 93 7b 3b 	sts	0x3B7B, r24	; 0x803b7b <timer+0x2>
    1e88:	90 93 7c 3b 	sts	0x3B7C, r25	; 0x803b7c <timer+0x3>
    1e8c:	2a a9       	ldd	r18, Y+50	; 0x32
    1e8e:	21 11       	cpse	r18, r1
    1e90:	24 c0       	rjmp	.+72     	; 0x1eda <gameLedKanoid()+0x4c8>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:598

  if (blocksRemaining == 0) {// go to next level
    1e92:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <gameLevel>
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:599
    gameLevel++;
    1e98:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <gameLevel>
    1e9c:	84 36       	cpi	r24, 0x64	; 100
    1e9e:	e8 f0       	brcs	.+58     	; 0x1eda <gameLedKanoid()+0x4c8>
    1ea0:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:601

    if (gameLevel > 99) {// for now  game continues only to level 99
    1ea2:	44 e6       	ldi	r20, 0x64	; 100
    1ea4:	6d e9       	ldi	r22, 0x9D	; 157
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:602
      drawCharacter(20, letterW, 100, 0, 0);
    1ea6:	72 e0       	ldi	r23, 0x02	; 2
    1ea8:	84 e1       	ldi	r24, 0x14	; 20
    1eaa:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	44 e6       	ldi	r20, 0x64	; 100
    1eb2:	6c e8       	ldi	r22, 0x8C	; 140
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:603
      drawCharacter(23, letterI, 100, 0, 0);
    1eb4:	72 e0       	ldi	r23, 0x02	; 2
    1eb6:	87 e1       	ldi	r24, 0x17	; 23
    1eb8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	44 e6       	ldi	r20, 0x64	; 100
    1ec0:	65 eb       	ldi	r22, 0xB5	; 181
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:604
      drawCharacter(26, letterN, 100, 0, 0);
    1ec2:	72 e0       	ldi	r23, 0x02	; 2
    1ec4:	8a e1       	ldi	r24, 0x1A	; 26
    1ec6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
delay():
    1eca:	60 ed       	ldi	r22, 0xD0	; 208
    1ecc:	77 e0       	ldi	r23, 0x07	; 7
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <delay.part.0>
_Z13gameLedKanoidv():
    1ed6:	10 92 1e 3a 	sts	0x3A1E, r1	; 0x803a1e <contGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:606
      delay(2000);
      contGame = false;
    1eda:	41 10       	cpse	r4, r1
    1edc:	03 c0       	rjmp	.+6      	; 0x1ee4 <gameLedKanoid()+0x4d2>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:610
    }
  }

  if (ledKanoidLives == 0) gameLevel = 1;// Game over
    1ede:	31 e0       	ldi	r19, 0x01	; 1
    1ee0:	30 93 5a 38 	sts	0x385A, r19	; 0x80385a <gameLevel>
    1ee4:	80 91 26 3a 	lds	r24, 0x3A26	; 0x803a26 <__data_end>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:612

  if (ledKanoidScore > 999) ledKanoidScore = 999;
    1ee8:	90 91 27 3a 	lds	r25, 0x3A27	; 0x803a27 <__data_end+0x1>
    1eec:	88 3e       	cpi	r24, 0xE8	; 232
    1eee:	93 40       	sbci	r25, 0x03	; 3
    1ef0:	30 f0       	brcs	.+12     	; 0x1efe <gameLedKanoid()+0x4ec>
    1ef2:	87 ee       	ldi	r24, 0xE7	; 231
    1ef4:	93 e0       	ldi	r25, 0x03	; 3
    1ef6:	80 93 26 3a 	sts	0x3A26, r24	; 0x803a26 <__data_end>
    1efa:	90 93 27 3a 	sts	0x3A27, r25	; 0x803a27 <__data_end+0x1>
    1efe:	80 91 6e 3b 	lds	r24, 0x3B6E	; 0x803b6e <LedKanoidNumberOfplayers>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:614

  if ( LedKanoidNumberOfplayers == 2) {
    1f02:	82 30       	cpi	r24, 0x02	; 2
    1f04:	09 f0       	breq	.+2      	; 0x1f08 <gameLedKanoid()+0x4f6>
    1f06:	7d c0       	rjmp	.+250    	; 0x2002 <gameLedKanoid()+0x5f0>
    1f08:	00 e0       	ldi	r16, 0x00	; 0
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:615
    drawCharacter(0, letterP, 100, 0, 0);
    1f0c:	44 e6       	ldi	r20, 0x64	; 100
    1f0e:	6f e1       	ldi	r22, 0x1F	; 31
    1f10:	72 e0       	ldi	r23, 0x02	; 2
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1f18:	04 e6       	ldi	r16, 0x64	; 100
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:618

    if (playerOneScore > playerTwoScore) {
      drawCharacter(3, number1, 0, 0, 100);
    1f1c:	40 e0       	ldi	r20, 0x00	; 0
    1f1e:	86 14       	cp	r8, r6
    1f20:	97 04       	cpc	r9, r7
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:617
  if (ledKanoidScore > 999) ledKanoidScore = 999;

  if ( LedKanoidNumberOfplayers == 2) {
    drawCharacter(0, letterP, 100, 0, 0);

    if (playerOneScore > playerTwoScore) {
    1f22:	08 f0       	brcs	.+2      	; 0x1f26 <gameLedKanoid()+0x514>
    1f24:	67 c0       	rjmp	.+206    	; 0x1ff4 <gameLedKanoid()+0x5e2>
    1f26:	60 e9       	ldi	r22, 0x90	; 144
    1f28:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:618
      drawCharacter(3, number1, 0, 0, 100);
    1f2a:	83 e0       	ldi	r24, 0x03	; 3
    1f2c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1f30:	c3 01       	movw	r24, r6
    1f32:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <showScore(unsigned int)>
delay():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:622
      showScore(playerOneScore);
    } else {
      drawCharacter(3, number2, 0, 0, 100);
      showScore(playerTwoScore);
    1f36:	68 e5       	ldi	r22, 0x58	; 88
    1f38:	72 e0       	ldi	r23, 0x02	; 2
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <delay.part.0>
_Z13gameLedKanoidv():
    1f42:	04 e6       	ldi	r16, 0x64	; 100
    1f44:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:637
    drawCharacter(0, letterH, 100, 0, 0);
    drawCharacter(3, letterI, 100, 0, 0);
    showScore(readScoreFromEEPROM(11));
  }

  while (!buttonDebounce(1, 1, 0, 100)) {
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	61 e0       	ldi	r22, 0x01	; 1
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    1f54:	81 11       	cpse	r24, r1
    1f56:	3f c0       	rjmp	.+126    	; 0x1fd6 <gameLedKanoid()+0x5c4>
    1f58:	00 ed       	ldi	r16, 0xD0	; 208
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:639

    if (buttonDebounce(0, 0, 1, 2000)) {
    1f5a:	17 e0       	ldi	r17, 0x07	; 7
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	41 e0       	ldi	r20, 0x01	; 1
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    1f68:	88 23       	and	r24, r24
    1f6a:	e1 f0       	breq	.+56     	; 0x1fa4 <gameLedKanoid()+0x592>
    1f6c:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:640
      strip.clear();
    1f70:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:641
      writeScoreToEEPROM(11, 0);
    1f72:	60 e0       	ldi	r22, 0x00	; 0
    1f74:	8b e0       	ldi	r24, 0x0B	; 11
    1f76:	4e d8       	rcall	.-3940   	; 0x1014 <writeScoreToEEPROM(unsigned char, unsigned int)>
    1f78:	00 e0       	ldi	r16, 0x00	; 0
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:642
      drawCharacter(0, letterC, 100, 0, 0);
    1f7c:	44 e6       	ldi	r20, 0x64	; 100
    1f7e:	64 e8       	ldi	r22, 0x84	; 132
    1f80:	72 e0       	ldi	r23, 0x02	; 2
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	44 e6       	ldi	r20, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:643
      drawCharacter(3, letterL, 100, 0, 0);
    1f8c:	6c e7       	ldi	r22, 0x7C	; 124
    1f8e:	72 e0       	ldi	r23, 0x02	; 2
    1f90:	83 e0       	ldi	r24, 0x03	; 3
    1f92:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	44 e6       	ldi	r20, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:644
      drawCharacter(6, letterR, 100, 0, 0);
    1f9a:	61 e7       	ldi	r22, 0x71	; 113
    1f9c:	72 e0       	ldi	r23, 0x02	; 2
    1f9e:	86 e0       	ldi	r24, 0x06	; 6
    1fa0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1fa4:	0e 94 a6 02 	call	0x54c	; 0x54c <millis>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:647
    }

    if ((millis() - timer) > 30000) {// if no button is pressed in 30sec ends game
    1fa8:	00 91 79 3b 	lds	r16, 0x3B79	; 0x803b79 <timer>
    1fac:	10 91 7a 3b 	lds	r17, 0x3B7A	; 0x803b7a <timer+0x1>
    1fb0:	20 91 7b 3b 	lds	r18, 0x3B7B	; 0x803b7b <timer+0x2>
    1fb4:	30 91 7c 3b 	lds	r19, 0x3B7C	; 0x803b7c <timer+0x3>
    1fb8:	60 1b       	sub	r22, r16
    1fba:	71 0b       	sbc	r23, r17
    1fbc:	82 0b       	sbc	r24, r18
    1fbe:	93 0b       	sbc	r25, r19
    1fc0:	61 33       	cpi	r22, 0x31	; 49
    1fc2:	75 47       	sbci	r23, 0x75	; 117
    1fc4:	81 05       	cpc	r24, r1
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	08 f4       	brcc	.+2      	; 0x1fcc <gameLedKanoid()+0x5ba>
    1fca:	bb cf       	rjmp	.-138    	; 0x1f42 <gameLedKanoid()+0x530>
    1fcc:	10 92 1e 3a 	sts	0x3A1E, r1	; 0x803a1e <contGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:648
      contGame = false;
    1fd0:	f1 e0       	ldi	r31, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:649
      endGame = true;
    1fd2:	f0 93 77 3b 	sts	0x3B77, r31	; 0x803b77 <endGame>
    1fd6:	10 92 26 3a 	sts	0x3A26, r1	; 0x803a26 <__data_end>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:653
      break;
    }
  }
  ledKanoidScore = 0;
    1fda:	10 92 27 3a 	sts	0x3A27, r1	; 0x803a27 <__data_end+0x1>
    1fde:	80 91 1e 3a 	lds	r24, 0x3A1E	; 0x803a1e <contGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:655

  if (contGame) {
    1fe2:	88 23       	and	r24, r24
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <gameLedKanoid()+0x5d6>
    1fe6:	45 c0       	rjmp	.+138    	; 0x2072 <gameLedKanoid()+0x660>
    1fe8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <levelTitle()>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:656
    levelTitle();
    1fec:	29 cd       	rjmp	.-1454   	; 0x1a40 <gameLedKanoid()+0x2e>
    1fee:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:569
          case (10):

            if (ballPosition == 10) {
              ballEffect = -1;
            } else {
              ballEffect = 1;
    1ff0:	99 ab       	std	Y+49, r25	; 0x31
    1ff2:	05 cf       	rjmp	.-502    	; 0x1dfe <gameLedKanoid()+0x3ec>
    1ff4:	64 e8       	ldi	r22, 0x84	; 132
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:621

    if (playerOneScore > playerTwoScore) {
      drawCharacter(3, number1, 0, 0, 100);
      showScore(playerOneScore);
    } else {
      drawCharacter(3, number2, 0, 0, 100);
    1ff6:	71 e0       	ldi	r23, 0x01	; 1
    1ff8:	83 e0       	ldi	r24, 0x03	; 3
    1ffa:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    1ffe:	c4 01       	movw	r24, r8
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:622
      showScore(playerTwoScore);
    2000:	98 cf       	rjmp	.-208    	; 0x1f32 <gameLedKanoid()+0x520>
    2002:	8b e0       	ldi	r24, 0x0B	; 11
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:625
    }
    delay(600);
  } else if (ledKanoidScore > readScoreFromEEPROM(11)) {
    2004:	db d8       	rcall	.-3658   	; 0x11bc <readScoreFromEEPROM(unsigned char)>
    2006:	e0 90 26 3a 	lds	r14, 0x3A26	; 0x803a26 <__data_end>
    200a:	f0 90 27 3a 	lds	r15, 0x3A27	; 0x803a27 <__data_end+0x1>
    200e:	00 e0       	ldi	r16, 0x00	; 0
    2010:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:626
    drawCharacter(0, letterN, 100, 0, 0);
    2012:	44 e6       	ldi	r20, 0x64	; 100
    2014:	8e 15       	cp	r24, r14
    2016:	9f 05       	cpc	r25, r15
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:625
    } else {
      drawCharacter(3, number2, 0, 0, 100);
      showScore(playerTwoScore);
    }
    delay(600);
  } else if (ledKanoidScore > readScoreFromEEPROM(11)) {
    2018:	d8 f4       	brcc	.+54     	; 0x2050 <gameLedKanoid()+0x63e>
    201a:	65 eb       	ldi	r22, 0xB5	; 181
    201c:	72 e0       	ldi	r23, 0x02	; 2
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:626
    drawCharacter(0, letterN, 100, 0, 0);
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	44 e6       	ldi	r20, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:627
    drawCharacter(3, letterE, 100, 0, 0);
    2028:	69 ea       	ldi	r22, 0xA9	; 169
    202a:	72 e0       	ldi	r23, 0x02	; 2
    202c:	83 e0       	ldi	r24, 0x03	; 3
    202e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	44 e6       	ldi	r20, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:628
    drawCharacter(6, letterW, 100, 0, 0);
    2036:	6d e9       	ldi	r22, 0x9D	; 157
    2038:	72 e0       	ldi	r23, 0x02	; 2
    203a:	86 e0       	ldi	r24, 0x06	; 6
    203c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    2040:	c7 01       	movw	r24, r14
    2042:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <showScore(unsigned int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:629
    showScore(ledKanoidScore);
    2046:	b7 01       	movw	r22, r14
    2048:	8b e0       	ldi	r24, 0x0B	; 11
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:630
    writeScoreToEEPROM(11, ledKanoidScore);
    204a:	0e 94 0a 08 	call	0x1014	; 0x1014 <writeScoreToEEPROM(unsigned char, unsigned int)>
    204e:	79 cf       	rjmp	.-270    	; 0x1f42 <gameLedKanoid()+0x530>
    2050:	61 e9       	ldi	r22, 0x91	; 145
    2052:	72 e0       	ldi	r23, 0x02	; 2
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:632
  } else {
    drawCharacter(0, letterH, 100, 0, 0);
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	44 e6       	ldi	r20, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:633
    drawCharacter(3, letterI, 100, 0, 0);
    205e:	6c e8       	ldi	r22, 0x8C	; 140
    2060:	72 e0       	ldi	r23, 0x02	; 2
    2062:	83 e0       	ldi	r24, 0x03	; 3
    2064:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
    2068:	8b e0       	ldi	r24, 0x0B	; 11
    206a:	a8 d8       	rcall	.-3760   	; 0x11bc <readScoreFromEEPROM(unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:634
    showScore(readScoreFromEEPROM(11));
    206c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <showScore(unsigned int)>
    2070:	68 cf       	rjmp	.-304    	; 0x1f42 <gameLedKanoid()+0x530>
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	80 93 1e 3a 	sts	0x3A1E, r24	; 0x803a1e <contGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:659

  if (contGame) {
    levelTitle();
    gameLedKanoid();
  } else {
    contGame = true;
    2078:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
    207c:	0e 94 a6 02 	call	0x54c	; 0x54c <millis>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:660
    strip.clear();
    2080:	60 93 79 3b 	sts	0x3B79, r22	; 0x803b79 <timer>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:661
    timer = millis();
    2084:	70 93 7a 3b 	sts	0x3B7A, r23	; 0x803b7a <timer+0x1>
    2088:	80 93 7b 3b 	sts	0x3B7B, r24	; 0x803b7b <timer+0x2>
    208c:	90 93 7c 3b 	sts	0x3B7C, r25	; 0x803b7c <timer+0x3>
    2090:	8c e3       	ldi	r24, 0x3C	; 60
    2092:	80 93 1f 3a 	sts	0x3A1F, r24	; 0x803a1f <lastMinute>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:662
    lastMinute = 60;
    2096:	ea 96       	adiw	r28, 0x3a	; 58
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	de bf       	out	0x3e, r29	; 62
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:664
  }
}
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	ff 90       	pop	r15
    20a6:	ef 90       	pop	r14
    20a8:	df 90       	pop	r13
    20aa:	cf 90       	pop	r12
    20ac:	bf 90       	pop	r11
    20ae:	af 90       	pop	r10
    20b0:	9f 90       	pop	r9
    20b2:	8f 90       	pop	r8
    20b4:	7f 90       	pop	r7
    20b6:	6f 90       	pop	r6
    20b8:	5f 90       	pop	r5
    20ba:	4f 90       	pop	r4
    20bc:	3f 90       	pop	r3
    20be:	2f 90       	pop	r2
    20c0:	08 95       	ret
    20c2:	2c a9       	ldd	r18, Y+52	; 0x34
    20c4:	3d a9       	ldd	r19, Y+53	; 0x35
    20c6:	33 24       	eor	r3, r3
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:477
    if (LEFTLOW || RIGHTLOW  && ballOnPlatform) {
      ballMovement = true;
      ballOnPlatform = false;
    }

    if ((ballTimer >= ballSpeed) && ballMovement) {
    20c8:	33 94       	inc	r3
    20ca:	51 2c       	mov	r5, r1
    20cc:	c2 16       	cp	r12, r18
    20ce:	d3 06       	cpc	r13, r19
    20d0:	08 f4       	brcc	.+2      	; 0x20d4 <gameLedKanoid()+0x6c2>
    20d2:	e2 cd       	rjmp	.-1084   	; 0x1c98 <gameLedKanoid()+0x286>
    20d4:	85 cd       	rjmp	.-1270   	; 0x1be0 <gameLedKanoid()+0x1ce>
    20d6:	9c 01       	movw	r18, r24
    20d8:	29 50       	subi	r18, 0x09	; 9
    20da:	31 09       	sbc	r19, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:534
      ledKanoidLives = 0;
    }

    for (uint8_t x = 10; x > 7 && !ballOnPlatform; x--) { // checks if ball touched player 1 platform and effect to the ball

      if (ballPosition == (playerOnePos - x)) {
    20dc:	42 17       	cp	r20, r18
    20de:	53 07       	cpc	r21, r19
    20e0:	b1 f0       	breq	.+44     	; 0x210e <gameLedKanoid()+0x6fc>
    20e2:	08 97       	sbiw	r24, 0x08	; 8
    20e4:	48 17       	cp	r20, r24
    20e6:	59 07       	cpc	r21, r25
    20e8:	09 f0       	breq	.+2      	; 0x20ec <gameLedKanoid()+0x6da>
    20ea:	5d ce       	rjmp	.-838    	; 0x1da6 <gameLedKanoid()+0x394>
    20ec:	89 e5       	ldi	r24, 0x59	; 89
    20ee:	ee 24       	eor	r14, r14
    20f0:	e3 94       	inc	r14
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:547
              ballEffect = 1;
            }
            break;
          case (8):

            if (ballPosition == 89) {
    20f2:	f8 16       	cp	r15, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:535
    }

    for (uint8_t x = 10; x > 7 && !ballOnPlatform; x--) { // checks if ball touched player 1 platform and effect to the ball

      if (ballPosition == (playerOnePos - x)) {
        ballDirectionUp = true;
    20f4:	09 f4       	brne	.+2      	; 0x20f8 <gameLedKanoid()+0x6e6>
    20f6:	54 ce       	rjmp	.-856    	; 0x1da0 <gameLedKanoid()+0x38e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:547
              ballEffect = 1;
            }
            break;
          case (8):

            if (ballPosition == 89) {
    20f8:	9f ef       	ldi	r25, 0xFF	; 255
    20fa:	99 ab       	std	Y+49, r25	; 0x31
    20fc:	8a ef       	ldi	r24, 0xFA	; 250
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:540
        ballDirectionUp = true;
        switch (x) {
          case (10):

            if (ballPosition == 80) {
              ballEffect = -1;
    20fe:	c8 2e       	mov	r12, r24
    2100:	d1 2c       	mov	r13, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:554
            } else {
              ballEffect = -1;
            }
            break;
        }
        ballTimer = 250;
    2102:	55 24       	eor	r5, r5
    2104:	53 94       	inc	r5
    2106:	83 ce       	rjmp	.-762    	; 0x1e0e <gameLedKanoid()+0x3fc>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:559
        ballOnPlatform = true;
      }
    }

    for (uint8_t x = 10; x < 13 && !ballOnPlatform && LedKanoidNumberOfplayers == 2; x++) { // checks if ball touched player 2 platform and effect to the ball
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	39 ab       	std	Y+49, r19	; 0x31
    210c:	f7 cf       	rjmp	.-18     	; 0x20fc <gameLedKanoid()+0x6ea>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:540
        ballDirectionUp = true;
        switch (x) {
          case (10):

            if (ballPosition == 80) {
              ballEffect = -1;
    210e:	ee 24       	eor	r14, r14
    2110:	e3 94       	inc	r14
    2112:	f4 cf       	rjmp	.-24     	; 0x20fc <gameLedKanoid()+0x6ea>

00002114 <__vector_6>:
__vector_6():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:535
    }

    for (uint8_t x = 10; x > 7 && !ballOnPlatform; x--) { // checks if ball touched player 1 platform and effect to the ball

      if (ballPosition == (playerOnePos - x)) {
        ballDirectionUp = true;
    2114:	1f 92       	push	r1
    2116:	0f 92       	push	r0
    2118:	0f b6       	in	r0, 0x3f	; 63
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:223
    #endif
  } timingStruct;

  // Now for the ISRs. This gets a little bit more interesting now...
  #if defined (MILLIS_USE_TIMERRTC)
    ISR(MILLIS_TIMER_VECTOR) {
    211a:	0f 92       	push	r0
    211c:	11 24       	eor	r1, r1
    211e:	8f 93       	push	r24
    2120:	9f 93       	push	r25
    2122:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <encoderDir+0x7f45e7>
    2126:	80 ff       	sbrs	r24, 0
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:226
      // if RTC is used as timer, we only increment the overflow count
      // Overflow count isn't used for TCB's
      if (RTC.INTFLAGS & RTC_OVF_bm) {
    2128:	09 c0       	rjmp	.+18     	; 0x213c <__vector_6+0x28>
    212a:	80 91 65 3b 	lds	r24, 0x3B65	; 0x803b65 <timingStruct>
    212e:	90 91 66 3b 	lds	r25, 0x3B66	; 0x803b66 <timingStruct+0x1>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:227
        timingStruct.timer_overflow_count++;
    2132:	01 96       	adiw	r24, 0x01	; 1
    2134:	80 93 65 3b 	sts	0x3B65, r24	; 0x803b65 <timingStruct>
    2138:	90 93 66 3b 	sts	0x3B66, r25	; 0x803b66 <timingStruct+0x1>
    213c:	83 e0       	ldi	r24, 0x03	; 3
    213e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <encoderDir+0x7f45e7>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:229
      }
      RTC.INTFLAGS = RTC_OVF_bm | RTC_CMP_bm; // clear flag
    2142:	9f 91       	pop	r25
    2144:	8f 91       	pop	r24
    2146:	0f 90       	pop	r0
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:230
    }
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	0f 90       	pop	r0
    214c:	1f 90       	pop	r1
    214e:	18 95       	reti

00002150 <__vector_3>:
__vector_3():
    2150:	1f 92       	push	r1
    2152:	0f 92       	push	r0
    2154:	0f b6       	in	r0, 0x3f	; 63
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1739
    interruptTimer = 10;
  }
  TCB0_INTFLAGS = 1; // clear flag
}

ISR(PORTA_PORT_vect) {
    2156:	0f 92       	push	r0
    2158:	11 24       	eor	r1, r1
    215a:	8f 93       	push	r24
    215c:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <encoderDir+0x7f48ad>
    2160:	83 ff       	sbrs	r24, 3
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1741
  
  if (PA3_INTERRUPT) {
    2162:	17 c0       	rjmp	.+46     	; 0x2192 <__vector_3+0x42>
    2164:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <encoderDir+0x7f48ad>
    2168:	88 70       	andi	r24, 0x08	; 8
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1742
    PA3_CLEAR_INTERRUPT_FLAG;// clear interrupt flag
    216a:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <encoderDir+0x7f48ad>
    216e:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <encoderDir+0x7f44f4>
    2172:	8e 7f       	andi	r24, 0xFE	; 254
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1743
    sleep_disable();
    2174:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <encoderDir+0x7f44f4>
    2178:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <encoderDir+0x7f48b7>
    217c:	8e 7f       	andi	r24, 0xFE	; 254
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1744
    PORTA.PIN3CTRL &= ~ PORT_ISC_BOTHEDGES_gc; // deattach interrupt
    217e:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <encoderDir+0x7f48b7>
    2182:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <encoderDir+0x7f48a8>
    2186:	8f 7e       	andi	r24, 0xEF	; 239
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1745
    PORTA.OUT &= ~PIN4_bm;// P CHANNEL mosfet low to activate
    2188:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <encoderDir+0x7f48a8>
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	80 93 20 3a 	sts	0x3A20, r24	; 0x803a20 <shouldWakeUp>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1746
    shouldWakeUp = true;
    2192:	8f 91       	pop	r24
    2194:	0f 90       	pop	r0
    2196:	0f be       	out	0x3f, r0	; 63
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1748
  }
}
    2198:	0f 90       	pop	r0
    219a:	1f 90       	pop	r1
    219c:	18 95       	reti

0000219e <__vector_13>:
__vector_13():
    219e:	1f 92       	push	r1
    21a0:	0f 92       	push	r0
    21a2:	0f b6       	in	r0, 0x3f	; 63
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1729
  if (SLEEPMENULOW && RIGHTLOW && LEFTLOW) { // if all 3 button are pressed, reset.
    _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
  }
}

ISR(TCB0_INT_vect) {// anoter interrupt to show pixels on screen, because micros are lost using RTC and .show cna´t be called one after another  this is the best way I found to call "strip.show"
    21a4:	0f 92       	push	r0
    21a6:	11 24       	eor	r1, r1
    21a8:	2f 93       	push	r18
    21aa:	3f 93       	push	r19
    21ac:	4f 93       	push	r20
    21ae:	5f 93       	push	r21
    21b0:	6f 93       	push	r22
    21b2:	7f 93       	push	r23
    21b4:	8f 93       	push	r24
    21b6:	9f 93       	push	r25
    21b8:	af 93       	push	r26
    21ba:	bf 93       	push	r27
    21bc:	ef 93       	push	r30
    21be:	ff 93       	push	r31
show():
    21c0:	80 91 90 3b 	lds	r24, 0x3B90	; 0x803b90 <strip+0x6>
    21c4:	90 91 91 3b 	lds	r25, 0x3B91	; 0x803b91 <strip+0x7>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:76
}

// *INDENT-OFF*   astyle don't like assembly
void tinyNeoPixel::show(void) {

  if ((!pixels) || pin >= NUM_DIGITAL_PINS)  {
    21c8:	89 2b       	or	r24, r25
    21ca:	31 f0       	breq	.+12     	; 0x21d8 <__vector_13+0x3a>
    21cc:	80 91 8e 3b 	lds	r24, 0x3B8E	; 0x803b8e <strip+0x4>
    21d0:	8c 30       	cpi	r24, 0x0C	; 12
    21d2:	14 f4       	brge	.+4      	; 0x21d8 <__vector_13+0x3a>
    21d4:	0e 94 28 02 	call	0x450	; 0x450 <tinyNeoPixel::show() [clone .part.1] [clone .constprop.1]>
__vector_13():
    21d8:	80 91 70 3b 	lds	r24, 0x3B70	; 0x803b70 <interruptTimer>
    21dc:	88 23       	and	r24, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1731
  strip.show();
  if (interruptTimer > 0) { // used in game to keep track of time
    21de:	b1 f0       	breq	.+44     	; 0x220c <__vector_13+0x6e>
    21e0:	10 92 70 3b 	sts	0x3B70, r1	; 0x803b70 <interruptTimer>
    21e4:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1732
    interruptTimer = 0;
    21e6:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <encoderDir+0x7f4eea>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1736
  } else {
    interruptTimer = 10;
  }
  TCB0_INTFLAGS = 1; // clear flag
    21ea:	ff 91       	pop	r31
    21ec:	ef 91       	pop	r30
    21ee:	bf 91       	pop	r27
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1737
}
    21f0:	af 91       	pop	r26
    21f2:	9f 91       	pop	r25
    21f4:	8f 91       	pop	r24
    21f6:	7f 91       	pop	r23
    21f8:	6f 91       	pop	r22
    21fa:	5f 91       	pop	r21
    21fc:	4f 91       	pop	r20
    21fe:	3f 91       	pop	r19
    2200:	2f 91       	pop	r18
    2202:	0f 90       	pop	r0
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	0f 90       	pop	r0
    2208:	1f 90       	pop	r1
    220a:	18 95       	reti
    220c:	8a e0       	ldi	r24, 0x0A	; 10
    220e:	80 93 70 3b 	sts	0x3B70, r24	; 0x803b70 <interruptTimer>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1734
ISR(TCB0_INT_vect) {// anoter interrupt to show pixels on screen, because micros are lost using RTC and .show cna´t be called one after another  this is the best way I found to call "strip.show"
  strip.show();
  if (interruptTimer > 0) { // used in game to keep track of time
    interruptTimer = 0;
  } else {
    interruptTimer = 10;
    2212:	e8 cf       	rjmp	.-48     	; 0x21e4 <__vector_13+0x46>

00002214 <__vector_7>:
__vector_7():
    2214:	1f 92       	push	r1
    2216:	0f 92       	push	r0
    2218:	0f b6       	in	r0, 0x3f	; 63
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1706
  for (uint16_t x = 0; x < 500; x += 25) {// game start music
    beep(50, x);
  }
}

ISR(RTC_PIT_vect) {// rtc interupt
    221a:	0f 92       	push	r0
    221c:	11 24       	eor	r1, r1
    221e:	8f 93       	push	r24
    2220:	9f 93       	push	r25
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <encoderDir+0x7f45f7>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1709

  /* Clear flag by writing '1': */
  RTC.PITINTFLAGS = RTC_PI_bm;
    2228:	80 91 7e 3b 	lds	r24, 0x3B7E	; 0x803b7e <seconds>
    222c:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1711

  if (seconds++, seconds > 59) {// acutal time keeping
    222e:	80 93 7e 3b 	sts	0x3B7E, r24	; 0x803b7e <seconds>
    2232:	80 91 7e 3b 	lds	r24, 0x3B7E	; 0x803b7e <seconds>
    2236:	8c 33       	cpi	r24, 0x3C	; 60
    2238:	c0 f0       	brcs	.+48     	; 0x226a <__vector_7+0x56>
    223a:	10 92 7e 3b 	sts	0x3B7E, r1	; 0x803b7e <seconds>
    223e:	80 91 67 3b 	lds	r24, 0x3B67	; 0x803b67 <minutes>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1712
    seconds = 0;
    2242:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1713
    if (minutes++, minutes > 59) {
    2244:	80 93 67 3b 	sts	0x3B67, r24	; 0x803b67 <minutes>
    2248:	80 91 67 3b 	lds	r24, 0x3B67	; 0x803b67 <minutes>
    224c:	8c 33       	cpi	r24, 0x3C	; 60
    224e:	68 f0       	brcs	.+26     	; 0x226a <__vector_7+0x56>
    2250:	10 92 67 3b 	sts	0x3B67, r1	; 0x803b67 <minutes>
    2254:	80 91 68 3b 	lds	r24, 0x3B68	; 0x803b68 <hours>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1714
      minutes = 0;
    2258:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1715
      if (hours++, hours > 23) {
    225a:	80 93 68 3b 	sts	0x3B68, r24	; 0x803b68 <hours>
    225e:	80 91 68 3b 	lds	r24, 0x3B68	; 0x803b68 <hours>
    2262:	88 31       	cpi	r24, 0x18	; 24
    2264:	10 f0       	brcs	.+4      	; 0x226a <__vector_7+0x56>
    2266:	10 92 68 3b 	sts	0x3B68, r1	; 0x803b68 <hours>
    226a:	80 91 20 3a 	lds	r24, 0x3A20	; 0x803a20 <shouldWakeUp>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1716
        hours = 0;
    226e:	81 11       	cpse	r24, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1720
      }
    }
  }
  if (!shouldWakeUp) {// beacause of interrupt only if true wake up
    2270:	01 c0       	rjmp	.+2      	; 0x2274 <__vector_7+0x60>
    2272:	88 95       	sleep
    2274:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1721
    sleep_cpu();
    2278:	83 fd       	sbrc	r24, 3
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1724
  }

  if (SLEEPMENULOW && RIGHTLOW && LEFTLOW) { // if all 3 button are pressed, reset.
    227a:	0d c0       	rjmp	.+26     	; 0x2296 <__vector_7+0x82>
    227c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2280:	81 fd       	sbrc	r24, 1
    2282:	09 c0       	rjmp	.+18     	; 0x2296 <__vector_7+0x82>
    2284:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2288:	82 fd       	sbrc	r24, 2
    228a:	05 c0       	rjmp	.+10     	; 0x2296 <__vector_7+0x82>
    228c:	88 ed       	ldi	r24, 0xD8	; 216
    228e:	91 e0       	ldi	r25, 0x01	; 1
    2290:	84 bf       	out	0x34, r24	; 52
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1725
    _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
    2292:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <encoderDir+0x7f44e5>
    2296:	9f 91       	pop	r25
    2298:	8f 91       	pop	r24
    229a:	0f 90       	pop	r0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1727
  }
}
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	0f 90       	pop	r0
    22a0:	1f 90       	pop	r1
    22a2:	18 95       	reti

000022a4 <main>:
main():
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	cd b7       	in	r28, 0x3d	; 61
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/main.cpp:49
 * called first in non-optiboot configurations (neither is needed on Optibooot configurations() *
 * an extra bit of initialization code in .init3 to fix the vectors and still happen if user    *
 * overrides main. In the past there was a USB-related function here, that is removed, as work  *
 * will be needed in any event at the core level if VUSB-based "stuff" arrives, but really I'm  *
 * just waiting for the DU-series now                                                           */
int main() {
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	c6 5d       	subi	r28, 0xD6	; 214
    22ae:	d1 09       	sbc	r29, r1
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	de bf       	out	0x3e, r29	; 62
init_clock():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1533
      #elif (F_CPU == 10000000) // 20MHz prescaled by 2
        /* Clock DIV2 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc));
      #elif (F_CPU == 8000000) // 16MHz prescaled by 2
        /* Clock DIV2 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc));
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	98 ed       	ldi	r25, 0xD8	; 216
    22b8:	94 bf       	out	0x34, r25	; 52
    22ba:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <encoderDir+0x7f4505>
init_ADC0():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1660
    #if   F_CPU   > 24000000     // 24 MHz / 16 = 1.5 MHz,  25 MHz / 32 =  780 kHz
      ADC0.CTRLC  = ADC_PRESC_DIV32_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >= 12000000    // 16 MHz / 16 = 1.0 MHz,  20 MHz / 16 = 1.25 MHz
      ADC0.CTRLC  = ADC_PRESC_DIV16_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  6000000    //  8 MHz /  8 = 1.0 MHz,  10 MHz /  8 = 1.25 MHz
      ADC0.CTRLC  =  ADC_PRESC_DIV8_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    22be:	92 e5       	ldi	r25, 0x52	; 82
    22c0:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <encoderDir+0x7f4aa6>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1671
    #if   (F_CPU == 6000000 || F_CPU == 12000000 || F_CPU == 24000000 || F_CPU ==25000000)
      ADC0.SAMPCTRL = (7); // 9 ADC clocks, 12 us
    #elif (F_CPU == 5000000 || F_CPU == 10000000 || F_CPU == 20000000)
      ADC0.SAMPCTRL = (13);   // 15 ADC clock,s 12 us
    #else
      ADC0.SAMPCTRL = (10); // 12 ADC clocks, 12 us
    22c4:	9a e0       	ldi	r25, 0x0A	; 10
    22c6:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <encoderDir+0x7f4aa9>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1673
    #endif
    ADC0.CTRLD    = ADC_INITDLY_DLY16_gc;
    22ca:	90 e2       	ldi	r25, 0x20	; 32
    22cc:	90 93 03 06 	sts	0x0603, r25	; 0x800603 <encoderDir+0x7f4aa7>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1674
    ADC0.CTRLA    = ADC_ENABLE_bm;
    22d0:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <encoderDir+0x7f4aa4>
init_TCA0():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1766
  #ifdef __AVR_ATtinyxy2__
    PORTMUX.CTRLC = 1; // move WO0 output to PA7 so PA3 can be used with WO3
  #endif

  /* Enable Split Mode */
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
    22d4:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <encoderDir+0x7f4ea7>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1771

  // Only 1 WGM so no need to specifically set up.

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
    22d8:	8e ef       	ldi	r24, 0xFE	; 254
    22da:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <encoderDir+0x7f4eca>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1772
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
    22de:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <encoderDir+0x7f4ecb>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1785
    TCA0.SPLIT.HCMP1 = 0;
    TCA0.SPLIT.LCMP2 = 0;
    TCA0.SPLIT.HCMP2 = 0;
  */

  TCA0.SPLIT.CTRLA = (TIMERA_PRESCALER_bm | TCA_SPLIT_ENABLE_bm);
    22e2:	8b e0       	ldi	r24, 0x0B	; 11
    22e4:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <encoderDir+0x7f4ea4>
init_millis():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1422
      TCD0.CTRLB          = 0x00; // oneramp mode
      TCD0.CTRLC          = 0x80;
      TCD0.INTCTRL        = 0x01; // enable interrupt
      TCD0.CTRLA          = TIMERD0_PRESCALER | 0x01; // set clock source and enable!
    #elif defined(MILLIS_USE_TIMERRTC)
      while(RTC.STATUS); // if RTC is currently busy, spin until it's not.
    22e8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <encoderDir+0x7f45e5>
    22ec:	81 11       	cpse	r24, r1
    22ee:	fc cf       	rjmp	.-8      	; 0x22e8 <main+0x44>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1424
      // to do: add support for RTC timer initialization
      RTC.PER             = 0xFFFF;
    22f0:	8f ef       	ldi	r24, 0xFF	; 255
    22f2:	9f ef       	ldi	r25, 0xFF	; 255
    22f4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <encoderDir+0x7f45ee>
    22f8:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <encoderDir+0x7f45ef>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1426
      #ifdef MILLIS_USE_TIMERRTC_XTAL
        _PROTECTED_WRITE(CLKCTRL.XOSC32KCTRLA,0x03);
    22fc:	83 e0       	ldi	r24, 0x03	; 3
    22fe:	98 ed       	ldi	r25, 0xD8	; 216
    2300:	94 bf       	out	0x34, r25	; 52
    2302:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <encoderDir+0x7f4520>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1427
        RTC.CLKSEL        = 2; // external crystal
    2306:	92 e0       	ldi	r25, 0x02	; 2
    2308:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <encoderDir+0x7f45eb>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1432
      #else
        _PROTECTED_WRITE(CLKCTRL.OSC32KCTRLA,0x02);
        // RTC.CLKSEL=0; this is the power on value
      #endif
      RTC.INTCTRL         = 0x01; // enable overflow interrupt
    230c:	91 e0       	ldi	r25, 0x01	; 1
    230e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <encoderDir+0x7f45e6>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1433
      RTC.CTRLA           = (RTC_RUNSTDBY_bm|RTC_RTCEN_bm|RTC_PRESCALER_DIV32_gc);//fire it up, prescale by 32.
    2312:	99 ea       	ldi	r25, 0xA9	; 169
    2314:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <encoderDir+0x7f45e4>
init():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring.c:1505
    init_millis();
  #endif
  /*************************** ENABLE GLOBAL INTERRUPTS *************************/
  // Finally, after everything is initialized, we go ahead and enable interrupts.
  if (onAfterInit()) {
    sei();
    2318:	78 94       	sei
setup():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:95
byte pixels[NUMLEDS * 3];
tinyNeoPixel strip = tinyNeoPixel(NUMLEDS, NEOPIN, NEO_GRB, pixels);

void setup() {

  PORTA.DIR = 0b10010000;//configs port A pins as input or output
    231a:	90 e9       	ldi	r25, 0x90	; 144
    231c:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <encoderDir+0x7f48a4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:96
  PORTB.DIR = 0b00000011;//configs port B pins as input or output
    2320:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <encoderDir+0x7f48c4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:98

  PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    2324:	88 e0       	ldi	r24, 0x08	; 8
    2326:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <encoderDir+0x7f48b9>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:99
  PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    232a:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <encoderDir+0x7f48ba>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:101

  PORTA.OUT &= ~PIN4_bm;// P CHANNEL mosfet low to activate
    232e:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <encoderDir+0x7f48a8>
    2332:	8f 7e       	andi	r24, 0xEF	; 239
    2334:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <encoderDir+0x7f48a8>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:103

  if (eeprom_read_byte((uint8_t*)255) != 131) { // prevents excessive flash write and default values if first time used or no colors are choose
    2338:	8f ef       	ldi	r24, 0xFF	; 255
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <eeprom_read_byte>
    2340:	83 38       	cpi	r24, 0x83	; 131
    2342:	41 f1       	breq	.+80     	; 0x2394 <main+0xf0>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:104
    eeprom_write_byte((uint8_t*)255, 131); // 255B of aviable EEPROM on the ATTINY1614
    2344:	63 e8       	ldi	r22, 0x83	; 131
    2346:	8f ef       	ldi	r24, 0xFF	; 255
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	0e 94 de 1c 	call	0x39bc	; 0x39bc <eeprom_write_byte>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:105
    eeprom_write_byte((uint8_t*)2, 1);//color
    234e:	61 e0       	ldi	r22, 0x01	; 1
    2350:	82 e0       	ldi	r24, 0x02	; 2
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	0e 94 de 1c 	call	0x39bc	; 0x39bc <eeprom_write_byte>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:106
    eeprom_write_byte((uint8_t*)3, 2);//brightness level
    2358:	62 e0       	ldi	r22, 0x02	; 2
    235a:	83 e0       	ldi	r24, 0x03	; 3
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	0e 94 de 1c 	call	0x39bc	; 0x39bc <eeprom_write_byte>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:107
    eeprom_write_byte((uint8_t*)4, true);//sound on/off
    2362:	61 e0       	ldi	r22, 0x01	; 1
    2364:	84 e0       	ldi	r24, 0x04	; 4
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	0e 94 de 1c 	call	0x39bc	; 0x39bc <eeprom_write_byte>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:108
    writeScoreToEEPROM(5, 0); // LedIvaders Score function to store uint16 in two uint8 eeprom slots
    236c:	70 e0       	ldi	r23, 0x00	; 0
    236e:	60 e0       	ldi	r22, 0x00	; 0
    2370:	85 e0       	ldi	r24, 0x05	; 5
    2372:	0e 94 0a 08 	call	0x1014	; 0x1014 <writeScoreToEEPROM(unsigned char, unsigned int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:110
    //eeprom_write_byte((uint8_t*)6, 0);This is reserved to ledInvadersScore don´t uncoment and don´t use in any other part of code.
    writeScoreToEEPROM(7, 0); // Ledtris score
    2376:	70 e0       	ldi	r23, 0x00	; 0
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	87 e0       	ldi	r24, 0x07	; 7
    237c:	0e 94 0a 08 	call	0x1014	; 0x1014 <writeScoreToEEPROM(unsigned char, unsigned int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:112
    //eeprom_write_byte((uint8_t*)8, 0);// reserved for ledtris score
    writeScoreToEEPROM(9, 0); // FlappyLed score
    2380:	70 e0       	ldi	r23, 0x00	; 0
    2382:	60 e0       	ldi	r22, 0x00	; 0
    2384:	89 e0       	ldi	r24, 0x09	; 9
    2386:	0e 94 0a 08 	call	0x1014	; 0x1014 <writeScoreToEEPROM(unsigned char, unsigned int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:114
    //eeprom_write_byte((uint8_t*)10, 0);// reserved for ledtris score
    writeScoreToEEPROM(11, 0); // Ledkanoid score
    238a:	70 e0       	ldi	r23, 0x00	; 0
    238c:	60 e0       	ldi	r22, 0x00	; 0
    238e:	8b e0       	ldi	r24, 0x0B	; 11
    2390:	0e 94 0a 08 	call	0x1014	; 0x1014 <writeScoreToEEPROM(unsigned char, unsigned int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:119
    //eeprom_write_byte((uint8_t*)12, 0);// reserved for ledkanoid score
  }

  //read from EEPROM
  color = eeprom_read_byte((uint8_t*)2); //read stored color
    2394:	82 e0       	ldi	r24, 0x02	; 2
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <eeprom_read_byte>
    239c:	80 93 6d 3b 	sts	0x3B6D, r24	; 0x803b6d <color>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:120
  sound = eeprom_read_byte((uint8_t*)4); //read if mute on/off
    23a0:	84 e0       	ldi	r24, 0x04	; 4
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <eeprom_read_byte>
    23a8:	91 e0       	ldi	r25, 0x01	; 1
    23aa:	81 11       	cpse	r24, r1
    23ac:	01 c0       	rjmp	.+2      	; 0x23b0 <main+0x10c>
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	90 93 6f 3b 	sts	0x3B6F, r25	; 0x803b6f <sound>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:123

  strip.begin();
  brightLevel = eeprom_read_byte((uint8_t*)3); // read brightness from eeprom
    23b4:	83 e0       	ldi	r24, 0x03	; 3
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <eeprom_read_byte>
    23bc:	80 93 69 3b 	sts	0x3B69, r24	; 0x803b69 <brightLevel>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:124
  strip.setBrightness(brightLevel * 3);// brightness select from 0 to 255
    23c0:	98 2f       	mov	r25, r24
    23c2:	99 0f       	add	r25, r25
    23c4:	89 0f       	add	r24, r25
    23c6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <tinyNeoPixel::setBrightness(unsigned char) [clone .constprop.6]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:126

  RTC.PITINTCTRL = RTC_PI_bm; /* Periodic Interrupt: enabled */
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <encoderDir+0x7f45f6>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:127
  RTC.PITCTRLA = RTC_PERIOD_CYC32768_gc /* RTC Clock Cycles 32768 */
    23d0:	91 e7       	ldi	r25, 0x71	; 113
    23d2:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <encoderDir+0x7f45f4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:130
                 | RTC_PITEN_bm; /* Enable: enabled */

  TCB0.INTCTRL = TCB_CAPT_bm; // Setup Timer B as compare capture mode to trigger interrupt
    23d6:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <encoderDir+0x7f4ee9>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:131
  TCB0_CCMP = 8000;// CLK
    23da:	80 e4       	ldi	r24, 0x40	; 64
    23dc:	9f e1       	ldi	r25, 0x1F	; 31
    23de:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <encoderDir+0x7f4ef0>
    23e2:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <encoderDir+0x7f4ef1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:132
  TCB0_CTRLA = (1 << 1) | TCB_ENABLE_bm;
    23e6:	83 e0       	ldi	r24, 0x03	; 3
    23e8:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <encoderDir+0x7f4ee4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:134

  sei(); // enable interrupts
    23ec:	78 94       	sei
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:135
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);// configure sleep mode
    23ee:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <encoderDir+0x7f44f4>
    23f2:	89 7f       	andi	r24, 0xF9	; 249
    23f4:	84 60       	ori	r24, 0x04	; 4
    23f6:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <encoderDir+0x7f44f4>
    23fa:	9e 01       	movw	r18, r28
    23fc:	2f 5f       	subi	r18, 0xFF	; 255
    23fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2400:	c7 53       	subi	r28, 0x37	; 55
    2402:	df 4f       	sbci	r29, 0xFF	; 255
    2404:	28 83       	st	Y, r18
    2406:	39 83       	std	Y+1, r19	; 0x01
    2408:	c9 5c       	subi	r28, 0xC9	; 201
    240a:	d0 40       	sbci	r29, 0x00	; 0
loop():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:139
}

void loop() {
  showclock();
    240c:	0e 94 bb 05 	call	0xb76	; 0xb76 <showclock()>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:141

  if (seconds != lastSecond) {
    2410:	90 91 7e 3b 	lds	r25, 0x3B7E	; 0x803b7e <seconds>
    2414:	80 91 7d 3b 	lds	r24, 0x3B7D	; 0x803b7d <lastSecond>
    2418:	98 17       	cp	r25, r24
    241a:	31 f0       	breq	.+12     	; 0x2428 <main+0x184>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:142
    lastSecond = seconds;
    241c:	80 91 7e 3b 	lds	r24, 0x3B7E	; 0x803b7e <seconds>
    2420:	80 93 7d 3b 	sts	0x3B7D, r24	; 0x803b7d <lastSecond>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:143
    battStatus();// update batt status when seconds change
    2424:	0e 94 d0 05 	call	0xba0	; 0xba0 <battStatus()>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:146
  }

  if ((millis() - timer) > 10000 && shouldWakeUp) { // sleep code while in clock mode
    2428:	0e 94 a6 02 	call	0x54c	; 0x54c <millis>
    242c:	00 91 79 3b 	lds	r16, 0x3B79	; 0x803b79 <timer>
    2430:	10 91 7a 3b 	lds	r17, 0x3B7A	; 0x803b7a <timer+0x1>
    2434:	20 91 7b 3b 	lds	r18, 0x3B7B	; 0x803b7b <timer+0x2>
    2438:	30 91 7c 3b 	lds	r19, 0x3B7C	; 0x803b7c <timer+0x3>
    243c:	60 1b       	sub	r22, r16
    243e:	71 0b       	sbc	r23, r17
    2440:	82 0b       	sbc	r24, r18
    2442:	93 0b       	sbc	r25, r19
    2444:	61 31       	cpi	r22, 0x11	; 17
    2446:	77 42       	sbci	r23, 0x27	; 39
    2448:	81 05       	cpc	r24, r1
    244a:	91 05       	cpc	r25, r1
    244c:	08 f4       	brcc	.+2      	; 0x2450 <main+0x1ac>
    244e:	4f c0       	rjmp	.+158    	; 0x24ee <main+0x24a>
    2450:	80 91 20 3a 	lds	r24, 0x3A20	; 0x803a20 <shouldWakeUp>
    2454:	88 23       	and	r24, r24
    2456:	09 f4       	brne	.+2      	; 0x245a <main+0x1b6>
    2458:	4a c0       	rjmp	.+148    	; 0x24ee <main+0x24a>
analogRead():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:698
      // don't waste flash on smallest parts.
      if ((pin & 0x7F) > 0x1F) { // highest valid mux value for any 0 or 1-series part.
        return ADC_ERROR_BAD_PIN_OR_CHANNEL;
      }
    #endif
    if (!ADC0.CTRLA & 0x01) return ADC_ERROR_DISABLED;
    245a:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <encoderDir+0x7f4aa4>
main():
    245e:	69 ef       	ldi	r22, 0xF9	; 249
    2460:	72 e8       	ldi	r23, 0x82	; 130
analogRead():
    2462:	88 23       	and	r24, r24
    2464:	71 f0       	breq	.+28     	; 0x2482 <main+0x1de>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:702
    pin &= 0x1F;
    /* Reference should be already set up */
    /* Select channel */
    ADC0.MUXPOS = (pin << ADC_MUXPOS_gp);
    2466:	87 e0       	ldi	r24, 0x07	; 7
    2468:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <encoderDir+0x7f4aaa>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:709
    #if defined(STRICT_ERROR_CHECKING)
      if (ADC0.COMMAND) return ADC_ERROR_BUSY;
    #endif

    /* Start conversion */
    ADC0.COMMAND = ADC_STCONV_bm;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <encoderDir+0x7f4aac>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:712

    /* Wait for result ready */
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm));
    2472:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <encoderDir+0x7f4aaf>
    2476:	80 ff       	sbrs	r24, 0
    2478:	fc cf       	rjmp	.-8      	; 0x2472 <main+0x1ce>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/wiring_analog.c:715

    /* Combine two bytes */
    return ADC0.RES;
    247a:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <encoderDir+0x7f4ab4>
    247e:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <encoderDir+0x7f4ab5>
loop():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:147
    randomSeed(analogRead(EXT));
    2482:	07 2e       	mov	r0, r23
    2484:	00 0c       	add	r0, r0
    2486:	88 0b       	sbc	r24, r24
    2488:	99 0b       	sbc	r25, r25
randomSeed():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/WMath.cpp:29
extern "C" {
#include "stdlib.h"
}

void randomSeed(unsigned long seed) {
  if (seed != 0) {
    248a:	61 15       	cp	r22, r1
    248c:	71 05       	cpc	r23, r1
    248e:	81 05       	cpc	r24, r1
    2490:	91 05       	cpc	r25, r1
    2492:	11 f0       	breq	.+4      	; 0x2498 <main+0x1f4>
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/WMath.cpp:30
    srandom(seed);
    2494:	0e 94 cd 1c 	call	0x399a	; 0x399a <srandom>
loop():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:148
    timer = millis();
    2498:	0e 94 a6 02 	call	0x54c	; 0x54c <millis>
    249c:	60 93 79 3b 	sts	0x3B79, r22	; 0x803b79 <timer>
    24a0:	70 93 7a 3b 	sts	0x3B7A, r23	; 0x803b7a <timer+0x1>
    24a4:	80 93 7b 3b 	sts	0x3B7B, r24	; 0x803b7b <timer+0x2>
    24a8:	90 93 7c 3b 	sts	0x3B7C, r25	; 0x803b7c <timer+0x3>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:149
    strip.clear();
    24ac:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
show():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:76
    24b0:	80 91 90 3b 	lds	r24, 0x3B90	; 0x803b90 <strip+0x6>
    24b4:	90 91 91 3b 	lds	r25, 0x3B91	; 0x803b91 <strip+0x7>
    24b8:	89 2b       	or	r24, r25
    24ba:	31 f0       	breq	.+12     	; 0x24c8 <main+0x224>
    24bc:	80 91 8e 3b 	lds	r24, 0x3B8E	; 0x803b8e <strip+0x4>
    24c0:	8c 30       	cpi	r24, 0x0C	; 12
    24c2:	14 f4       	brge	.+4      	; 0x24c8 <main+0x224>
    24c4:	0e 94 28 02 	call	0x450	; 0x450 <tinyNeoPixel::show() [clone .part.1] [clone .constprop.1]>
loop():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:151
    strip.show();
    lastMinute = 60;
    24c8:	8c e3       	ldi	r24, 0x3C	; 60
    24ca:	80 93 1f 3a 	sts	0x3A1F, r24	; 0x803a1f <lastMinute>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:152
    shouldWakeUp = false;
    24ce:	10 92 20 3a 	sts	0x3A20, r1	; 0x803a20 <shouldWakeUp>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:153
    PORTA.OUT |= PIN4_bm;// P CHANNEL mosfet High to deactivate
    24d2:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <encoderDir+0x7f48a8>
    24d6:	80 61       	ori	r24, 0x10	; 16
    24d8:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <encoderDir+0x7f48a8>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:154
    PORTA.PIN3CTRL = PORT_ISC_BOTHEDGES_gc; //attach interrupt to portA pin 3
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <encoderDir+0x7f48b7>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:155
    sleep_enable();
    24e2:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <encoderDir+0x7f44f4>
    24e6:	81 60       	ori	r24, 0x01	; 1
    24e8:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <encoderDir+0x7f44f4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:156
    sleep_cpu();// go to sleep
    24ec:	88 95       	sleep
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:159
  }

  if (LEFTLOW && RIGHTLOW && buttonDebounce(1, 1, 0, 400)) clockAlwaysOn (); // Clock always on function
    24ee:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    24f2:	82 fd       	sbrc	r24, 2
    24f4:	51 c0       	rjmp	.+162    	; 0x2598 <main+0x2f4>
    24f6:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    24fa:	81 fd       	sbrc	r24, 1
    24fc:	4d c0       	rjmp	.+154    	; 0x2598 <main+0x2f4>
    24fe:	00 e9       	ldi	r16, 0x90	; 144
    2500:	11 e0       	ldi	r17, 0x01	; 1
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	61 e0       	ldi	r22, 0x01	; 1
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    2510:	88 23       	and	r24, r24
    2512:	09 f4       	brne	.+2      	; 0x2516 <main+0x272>
    2514:	41 c0       	rjmp	.+130    	; 0x2598 <main+0x2f4>
clockAlwaysOn():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:201
    }
  }
}

void clockAlwaysOn (void) {
  encoder.encoderSetPosition(5, 2);
    2516:	62 e0       	ldi	r22, 0x02	; 2
    2518:	85 e0       	ldi	r24, 0x05	; 5
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	0e 94 1a 03 	call	0x634	; 0x634 <encoder::encoderSetPosition(int, unsigned char) [clone .constprop.9]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:202
  set_sleep_mode(SLEEP_MODE_IDLE);// configure sleep mode
    2520:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <encoderDir+0x7f44f4>
    2524:	89 7f       	andi	r24, 0xF9	; 249
    2526:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <encoderDir+0x7f44f4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:205
  uint8_t lastRotaryCounter = 0;

  while (LEFTLOW || RIGHTLOW);
    252a:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    252e:	82 ff       	sbrs	r24, 2
    2530:	fc cf       	rjmp	.-8      	; 0x252a <main+0x286>
    2532:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2536:	81 ff       	sbrs	r24, 1
    2538:	f8 cf       	rjmp	.-16     	; 0x252a <main+0x286>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:203
}

void clockAlwaysOn (void) {
  encoder.encoderSetPosition(5, 2);
  set_sleep_mode(SLEEP_MODE_IDLE);// configure sleep mode
  uint8_t lastRotaryCounter = 0;
    253a:	e1 2c       	mov	r14, r1
clockAlwaysOn():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:214
    uint8_t actualValue =  encoder.encoderRead(2, 25, false, 2);

    while (actualValue != lastRotaryCounter) {
      strip.setBrightness(actualValue);// brightness select from 0 to 255
      lastRotaryCounter = actualValue;
      lastMinute = 60;
    253c:	5c e3       	ldi	r21, 0x3C	; 60
    253e:	d5 2e       	mov	r13, r21
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:206
  encoder.encoderSetPosition(5, 2);
  set_sleep_mode(SLEEP_MODE_IDLE);// configure sleep mode
  uint8_t lastRotaryCounter = 0;

  while (LEFTLOW || RIGHTLOW);
  while (LEFTHIGH && RIGHTHIGH) {
    2540:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2544:	82 ff       	sbrs	r24, 2
    2546:	04 c0       	rjmp	.+8      	; 0x2550 <main+0x2ac>
    2548:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    254c:	81 fd       	sbrc	r24, 1
    254e:	67 c0       	rjmp	.+206    	; 0x261e <main+0x37a>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:221
    strip.setPixelColor(61, red, green, blue);
    strip.setPixelColor(81, red, green, blue);
    sleep_enable();
    sleep_cpu();// go to sleep
  }
  strip.clear();
    2550:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:222
  strip.setBrightness(brightLevel * 3);// brightness select from 0 to 255
    2554:	80 91 69 3b 	lds	r24, 0x3B69	; 0x803b69 <brightLevel>
    2558:	98 2f       	mov	r25, r24
    255a:	99 0f       	add	r25, r25
    255c:	89 0f       	add	r24, r25
    255e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <tinyNeoPixel::setBrightness(unsigned char) [clone .constprop.6]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:223
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);// configure sleep mode
    2562:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <encoderDir+0x7f44f4>
    2566:	89 7f       	andi	r24, 0xF9	; 249
    2568:	84 60       	ori	r24, 0x04	; 4
    256a:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <encoderDir+0x7f44f4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:225

  while (LEFTLOW || RIGHTLOW);
    256e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2572:	82 ff       	sbrs	r24, 2
    2574:	fc cf       	rjmp	.-8      	; 0x256e <main+0x2ca>
    2576:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    257a:	81 ff       	sbrs	r24, 1
    257c:	f8 cf       	rjmp	.-16     	; 0x256e <main+0x2ca>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:226
  timer = millis();
    257e:	0e 94 a6 02 	call	0x54c	; 0x54c <millis>
    2582:	60 93 79 3b 	sts	0x3B79, r22	; 0x803b79 <timer>
    2586:	70 93 7a 3b 	sts	0x3B7A, r23	; 0x803b7a <timer+0x1>
    258a:	80 93 7b 3b 	sts	0x3B7B, r24	; 0x803b7b <timer+0x2>
    258e:	90 93 7c 3b 	sts	0x3B7C, r25	; 0x803b7c <timer+0x3>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:227
  lastMinute = 60;
    2592:	8c e3       	ldi	r24, 0x3C	; 60
    2594:	80 93 1f 3a 	sts	0x3A1F, r24	; 0x803a1f <lastMinute>
loop():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:161
    sleep_cpu();// go to sleep
  }

  if (LEFTLOW && RIGHTLOW && buttonDebounce(1, 1, 0, 400)) clockAlwaysOn (); // Clock always on function

  if (buttonDebounce(0, 0, 1, 400)) { // enters menu options
    2598:	00 e9       	ldi	r16, 0x90	; 144
    259a:	11 e0       	ldi	r17, 0x01	; 1
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	60 e0       	ldi	r22, 0x00	; 0
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    25aa:	88 23       	and	r24, r24
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <main+0x30c>
    25ae:	d3 c0       	rjmp	.+422    	; 0x2756 <main+0x4b2>
setOptions():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1532
  }
}

// main screen options menu
void setOptions() {
  strip.clear();
    25b0:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1535
  int8_t option = 0;
  uint8_t actualValue = 0;
  encoder.encoderSetPosition(color, 1);
    25b4:	80 91 6d 3b 	lds	r24, 0x3B6D	; 0x803b6d <color>
encoderSetPosition():
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	0e 94 04 03 	call	0x608	; 0x608 <encoder::encoderSetPosition(int, unsigned char) [clone .part.0]>
setOptions():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1537

  while (SLEEPMENULOW) {
    25be:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    25c2:	83 fd       	sbrc	r24, 3
    25c4:	5b c0       	rjmp	.+182    	; 0x267c <main+0x3d8>
    25c6:	e0 90 6c 3b 	lds	r14, 0x3B6C	; 0x803b6c <blue>
    25ca:	f0 90 6b 3b 	lds	r15, 0x3B6B	; 0x803b6b <green>
    25ce:	10 91 6a 3b 	lds	r17, 0x3B6A	; 0x803b6a <red>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1538
    drawCharacter(0, letterM, red, green, blue);
    25d2:	0e 2d       	mov	r16, r14
    25d4:	2f 2d       	mov	r18, r15
    25d6:	41 2f       	mov	r20, r17
    25d8:	68 e0       	ldi	r22, 0x08	; 8
    25da:	72 e0       	ldi	r23, 0x02	; 2
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1539
    drawCharacter(4, letterE, red, green, blue);
    25e2:	2f 2d       	mov	r18, r15
    25e4:	41 2f       	mov	r20, r17
    25e6:	69 ea       	ldi	r22, 0xA9	; 169
    25e8:	72 e0       	ldi	r23, 0x02	; 2
    25ea:	84 e0       	ldi	r24, 0x04	; 4
    25ec:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1540
    drawCharacter(52, letterN, red, green, blue);
    25f0:	2f 2d       	mov	r18, r15
    25f2:	41 2f       	mov	r20, r17
    25f4:	65 eb       	ldi	r22, 0xB5	; 181
    25f6:	72 e0       	ldi	r23, 0x02	; 2
    25f8:	84 e3       	ldi	r24, 0x34	; 52
    25fa:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1541
    drawCharacter(56, letterU, red, green, blue);
    25fe:	2f 2d       	mov	r18, r15
    2600:	41 2f       	mov	r20, r17
    2602:	6c ef       	ldi	r22, 0xFC	; 252
    2604:	71 e0       	ldi	r23, 0x01	; 1
    2606:	88 e3       	ldi	r24, 0x38	; 56
    2608:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
delay():
    260c:	6c ed       	ldi	r22, 0xDC	; 220
    260e:	75 e0       	ldi	r23, 0x05	; 5
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <delay.part.0>
setOptions():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1543
    delay(1500);
    strip.clear();
    2618:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
    261c:	d0 cf       	rjmp	.-96     	; 0x25be <main+0x31a>
clockAlwaysOn():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:207
  set_sleep_mode(SLEEP_MODE_IDLE);// configure sleep mode
  uint8_t lastRotaryCounter = 0;

  while (LEFTLOW || RIGHTLOW);
  while (LEFTHIGH && RIGHTHIGH) {
    battStatus();
    261e:	0e 94 d0 05 	call	0xba0	; 0xba0 <battStatus()>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:208
    showclock();
    2622:	0e 94 bb 05 	call	0xb76	; 0xb76 <showclock()>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:209
    uint8_t actualValue =  encoder.encoderRead(2, 25, false, 2);
    2626:	22 e0       	ldi	r18, 0x02	; 2
    2628:	40 e0       	ldi	r20, 0x00	; 0
    262a:	69 e1       	ldi	r22, 0x19	; 25
    262c:	82 e0       	ldi	r24, 0x02	; 2
    262e:	0e 94 31 03 	call	0x662	; 0x662 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]>
    2632:	18 2f       	mov	r17, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:211

    while (actualValue != lastRotaryCounter) {
    2634:	1e 15       	cp	r17, r14
    2636:	39 f0       	breq	.+14     	; 0x2646 <main+0x3a2>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:212
      strip.setBrightness(actualValue);// brightness select from 0 to 255
    2638:	81 2f       	mov	r24, r17
    263a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <tinyNeoPixel::setBrightness(unsigned char) [clone .constprop.6]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:214
      lastRotaryCounter = actualValue;
      lastMinute = 60;
    263e:	d0 92 1f 3a 	sts	0x3A1F, r13	; 0x803a1f <lastMinute>
    2642:	e1 2e       	mov	r14, r17
    2644:	f7 cf       	rjmp	.-18     	; 0x2634 <main+0x390>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:216
    }
    strip.setPixelColor(61, red, green, blue);
    2646:	f0 90 6c 3b 	lds	r15, 0x3B6C	; 0x803b6c <blue>
    264a:	00 91 6b 3b 	lds	r16, 0x3B6B	; 0x803b6b <green>
    264e:	10 91 6a 3b 	lds	r17, 0x3B6A	; 0x803b6a <red>
    2652:	2f 2d       	mov	r18, r15
    2654:	40 2f       	mov	r20, r16
    2656:	61 2f       	mov	r22, r17
    2658:	8d e3       	ldi	r24, 0x3D	; 61
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:217
    strip.setPixelColor(81, red, green, blue);
    2660:	2f 2d       	mov	r18, r15
    2662:	40 2f       	mov	r20, r16
    2664:	61 2f       	mov	r22, r17
    2666:	81 e5       	ldi	r24, 0x51	; 81
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:218
    sleep_enable();
    266e:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <encoderDir+0x7f44f4>
    2672:	81 60       	ori	r24, 0x01	; 1
    2674:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <encoderDir+0x7f44f4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:219
    sleep_cpu();// go to sleep
    2678:	88 95       	sleep
    267a:	62 cf       	rjmp	.-316    	; 0x2540 <main+0x29c>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1533
}

// main screen options menu
void setOptions() {
  strip.clear();
  int8_t option = 0;
    267c:	f1 2c       	mov	r15, r1
setOptions():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1548
    strip.clear();
  }

  while (option < 5) {

    if (RIGHTLOW) {
    267e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2682:	81 fd       	sbrc	r24, 1
    2684:	07 c0       	rjmp	.+14     	; 0x2694 <main+0x3f0>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1549
      if (option++, option > 4)  option = 0;
    2686:	f3 94       	inc	r15
    2688:	45 e0       	ldi	r20, 0x05	; 5
    268a:	f4 12       	cpse	r15, r20
    268c:	01 c0       	rjmp	.+2      	; 0x2690 <main+0x3ec>
    268e:	f1 2c       	mov	r15, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1550
      strip.clear();
    2690:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1553
    }

    if (LEFTLOW) {
    2694:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2698:	82 fd       	sbrc	r24, 2
    269a:	08 c0       	rjmp	.+16     	; 0x26ac <main+0x408>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1554
      if (option--, option < 0)  option = 4;
    269c:	fa 94       	dec	r15
    269e:	8f ef       	ldi	r24, 0xFF	; 255
    26a0:	f8 12       	cpse	r15, r24
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <main+0x404>
main():
    26a4:	44 e0       	ldi	r20, 0x04	; 4
    26a6:	f4 2e       	mov	r15, r20
setOptions():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1555
      strip.clear();
    26a8:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1558
    }

    while (RIGHTLOW || LEFTLOW); // button debounce
    26ac:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    26b0:	81 ff       	sbrs	r24, 1
    26b2:	fc cf       	rjmp	.-8      	; 0x26ac <main+0x408>
    26b4:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    26b8:	82 ff       	sbrs	r24, 2
    26ba:	f8 cf       	rjmp	.-16     	; 0x26ac <main+0x408>
    26bc:	d0 90 6c 3b 	lds	r13, 0x3B6C	; 0x803b6c <blue>
    26c0:	e0 90 6b 3b 	lds	r14, 0x3B6B	; 0x803b6b <green>
    26c4:	10 91 6a 3b 	lds	r17, 0x3B6A	; 0x803b6a <red>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1560

    switch (option) { // color NeoPixel LED number from first to last
    26c8:	92 e0       	ldi	r25, 0x02	; 2
    26ca:	f9 16       	cp	r15, r25
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <main+0x42c>
    26ce:	2f c1       	rjmp	.+606    	; 0x292e <main+0x68a>
    26d0:	9f 15       	cp	r25, r15
    26d2:	0c f4       	brge	.+2      	; 0x26d6 <main+0x432>
    26d4:	cd c0       	rjmp	.+410    	; 0x2870 <main+0x5cc>
    26d6:	e1 e0       	ldi	r30, 0x01	; 1
    26d8:	fe 16       	cp	r15, r30
    26da:	09 f4       	brne	.+2      	; 0x26de <main+0x43a>
    26dc:	f5 c0       	rjmp	.+490    	; 0x28c8 <main+0x624>
    26de:	f0 90 6d 3b 	lds	r15, 0x3B6D	; 0x803b6d <color>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1562
      case 0:
        drawCharacter(0, letterC, red, green, blue); // color selection
    26e2:	0d 2d       	mov	r16, r13
    26e4:	2e 2d       	mov	r18, r14
    26e6:	41 2f       	mov	r20, r17
    26e8:	64 e8       	ldi	r22, 0x84	; 132
    26ea:	72 e0       	ldi	r23, 0x02	; 2
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1563
        drawCharacter(4, letterO, red, green, blue);
    26f2:	2e 2d       	mov	r18, r14
    26f4:	41 2f       	mov	r20, r17
    26f6:	63 ef       	ldi	r22, 0xF3	; 243
    26f8:	71 e0       	ldi	r23, 0x01	; 1
    26fa:	84 e0       	ldi	r24, 0x04	; 4
    26fc:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1564
        showTime(53, color);
    2700:	6f 2d       	mov	r22, r15
    2702:	85 e3       	ldi	r24, 0x35	; 53
    2704:	0e 94 17 04 	call	0x82e	; 0x82e <showTime(unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1565
        actualValue = encoder.encoderRead(1, 4, true, 1);
    2708:	21 e0       	ldi	r18, 0x01	; 1
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	64 e0       	ldi	r22, 0x04	; 4
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	0e 94 31 03 	call	0x662	; 0x662 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]>
    2714:	18 2f       	mov	r17, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1567

        if (actualValue != color) {
    2716:	8f 15       	cp	r24, r15
    2718:	49 f0       	breq	.+18     	; 0x272c <main+0x488>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1568
          strip.clear();
    271a:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1569
          color = actualValue;
    271e:	10 93 6d 3b 	sts	0x3B6D, r17	; 0x803b6d <color>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1570
          if (color > 4) {
    2722:	15 30       	cpi	r17, 0x05	; 5
    2724:	18 f0       	brcs	.+6      	; 0x272c <main+0x488>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1571
            color = 1;
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	80 93 6d 3b 	sts	0x3B6D, r24	; 0x803b6d <color>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1574
          }
        }
        colorSelect();
    272c:	0e 94 bf 03 	call	0x77e	; 0x77e <colorSelect()>
    2730:	f1 2c       	mov	r15, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1627
        if (buttonDebounce(0, 0, 1, 50)) {
          option = 5;
        }
        break;
    }
    eeprom_write_byte((uint8_t*)2, color); // values are store in EEPROM
    2732:	60 91 6d 3b 	lds	r22, 0x3B6D	; 0x803b6d <color>
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	0e 94 de 1c 	call	0x39bc	; 0x39bc <eeprom_write_byte>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1628
    eeprom_write_byte((uint8_t*)3, brightLevel);
    273e:	60 91 69 3b 	lds	r22, 0x3B69	; 0x803b69 <brightLevel>
    2742:	83 e0       	ldi	r24, 0x03	; 3
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	0e 94 de 1c 	call	0x39bc	; 0x39bc <eeprom_write_byte>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1546
    drawCharacter(56, letterU, red, green, blue);
    delay(1500);
    strip.clear();
  }

  while (option < 5) {
    274a:	35 e0       	ldi	r19, 0x05	; 5
    274c:	f3 12       	cpse	r15, r19
    274e:	97 cf       	rjmp	.-210    	; 0x267e <main+0x3da>
loop():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:163

  if (LEFTLOW && RIGHTLOW && buttonDebounce(1, 1, 0, 400)) clockAlwaysOn (); // Clock always on function

  if (buttonDebounce(0, 0, 1, 400)) { // enters menu options
    setOptions();
    lastMinute = 60;// so time will be updated
    2750:	8c e3       	ldi	r24, 0x3C	; 60
    2752:	80 93 1f 3a 	sts	0x3A1F, r24	; 0x803a1f <lastMinute>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:166
  }

  if (buttonDebounce(1, 1, 0, 700)) { // enters game mode
    2756:	0c eb       	ldi	r16, 0xBC	; 188
    2758:	12 e0       	ldi	r17, 0x02	; 2
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	61 e0       	ldi	r22, 0x01	; 1
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    2768:	d8 2e       	mov	r13, r24
    276a:	88 23       	and	r24, r24
    276c:	09 f4       	brne	.+2      	; 0x2770 <main+0x4cc>
    276e:	6a c0       	rjmp	.+212    	; 0x2844 <main+0x5a0>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:167
    strip.clear();
    2770:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
gameSelection():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:232
  lastMinute = 60;
}

//game selection menu
void gameSelection() {
  strip.clear();
    2774:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:233
  enterGame = true;
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	80 93 78 3b 	sts	0x3B78, r24	; 0x803b78 <enterGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:236
  bool gameSelection = true;

  while (RIGHTLOW && LEFTLOW); //prevents immediately enter a game
    277e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2782:	81 fd       	sbrc	r24, 1
    2784:	04 c0       	rjmp	.+8      	; 0x278e <main+0x4ea>
    2786:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    278a:	82 ff       	sbrs	r24, 2
    278c:	f8 cf       	rjmp	.-16     	; 0x277e <main+0x4da>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:248
      strip.clear();
    }

    if (buttonDebounce(1, 0, 0, 500)) {

      if (gameSelect--, gameSelect < 0) gameSelect = 4;
    278e:	94 e0       	ldi	r25, 0x04	; 4
    2790:	e9 2e       	mov	r14, r25
    2792:	f1 2c       	mov	r15, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:364
        drawCharacter(3, letterN, 100, 0, 0);
        drawCharacter(6, letterD, 100, 0, 0);

        if (SLEEPMENULOW || (LEFTLOW && RIGHTLOW)) {
          enterGame = false;
          lastMinute = 60;
    2794:	2c e3       	ldi	r18, 0x3C	; 60
    2796:	c2 2e       	mov	r12, r18
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:240

  while (RIGHTLOW && LEFTLOW); //prevents immediately enter a game

  while (gameSelection) {

    if (buttonDebounce(0, 1, 0, 500)) {
    2798:	04 ef       	ldi	r16, 0xF4	; 244
    279a:	11 e0       	ldi	r17, 0x01	; 1
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e0       	ldi	r20, 0x00	; 0
    27a2:	61 e0       	ldi	r22, 0x01	; 1
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    27aa:	88 23       	and	r24, r24
    27ac:	79 f0       	breq	.+30     	; 0x27cc <main+0x528>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:242

      if (gameSelect++, gameSelect > 4) gameSelect = 0;
    27ae:	80 91 75 3b 	lds	r24, 0x3B75	; 0x803b75 <gameSelect>
    27b2:	90 91 76 3b 	lds	r25, 0x3B76	; 0x803b76 <gameSelect+0x1>
    27b6:	01 96       	adiw	r24, 0x01	; 1
    27b8:	85 30       	cpi	r24, 0x05	; 5
    27ba:	91 05       	cpc	r25, r1
    27bc:	0c f0       	brlt	.+2      	; 0x27c0 <main+0x51c>
    27be:	fd c0       	rjmp	.+506    	; 0x29ba <main+0x716>
    27c0:	80 93 75 3b 	sts	0x3B75, r24	; 0x803b75 <gameSelect>
    27c4:	90 93 76 3b 	sts	0x3B76, r25	; 0x803b76 <gameSelect+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:243
      strip.clear();
    27c8:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:246
    }

    if (buttonDebounce(1, 0, 0, 500)) {
    27cc:	04 ef       	ldi	r16, 0xF4	; 244
    27ce:	11 e0       	ldi	r17, 0x01	; 1
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	60 e0       	ldi	r22, 0x00	; 0
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    27de:	88 23       	and	r24, r24
    27e0:	69 f0       	breq	.+26     	; 0x27fc <main+0x558>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:248

      if (gameSelect--, gameSelect < 0) gameSelect = 4;
    27e2:	80 91 75 3b 	lds	r24, 0x3B75	; 0x803b75 <gameSelect>
    27e6:	90 91 76 3b 	lds	r25, 0x3B76	; 0x803b76 <gameSelect+0x1>
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	97 fd       	sbrc	r25, 7
    27ee:	ea c0       	rjmp	.+468    	; 0x29c4 <main+0x720>
    27f0:	80 93 75 3b 	sts	0x3B75, r24	; 0x803b75 <gameSelect>
    27f4:	90 93 76 3b 	sts	0x3B76, r25	; 0x803b76 <gameSelect+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:249
      strip.clear();
    27f8:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:252
    }

    switch (gameSelect) { // select game ad scroll game title
    27fc:	80 91 75 3b 	lds	r24, 0x3B75	; 0x803b75 <gameSelect>
    2800:	90 91 76 3b 	lds	r25, 0x3B76	; 0x803b76 <gameSelect+0x1>
    2804:	82 30       	cpi	r24, 0x02	; 2
    2806:	91 05       	cpc	r25, r1
    2808:	09 f4       	brne	.+2      	; 0x280c <main+0x568>
    280a:	a9 c1       	rjmp	.+850    	; 0x2b5e <main+0x8ba>
    280c:	0c f0       	brlt	.+2      	; 0x2810 <main+0x56c>
    280e:	df c0       	rjmp	.+446    	; 0x29ce <main+0x72a>
    2810:	00 97       	sbiw	r24, 0x00	; 0
    2812:	09 f4       	brne	.+2      	; 0x2816 <main+0x572>
    2814:	22 c1       	rjmp	.+580    	; 0x2a5a <main+0x7b6>
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	09 f4       	brne	.+2      	; 0x281c <main+0x578>
    281a:	65 c1       	rjmp	.+714    	; 0x2ae6 <main+0x842>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:365
        drawCharacter(6, letterD, 100, 0, 0);

        if (SLEEPMENULOW || (LEFTLOW && RIGHTLOW)) {
          enterGame = false;
          lastMinute = 60;
          timer = millis();
    281c:	8d 2d       	mov	r24, r13
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:369
        }
        break;
    }
    if (SLEEPMENULOW || (LEFTLOW && RIGHTLOW)) gameSelection = false;
    281e:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2822:	93 ff       	sbrs	r25, 3
    2824:	0a c0       	rjmp	.+20     	; 0x283a <main+0x596>
    2826:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    282a:	92 fd       	sbrc	r25, 2
    282c:	04 c0       	rjmp	.+8      	; 0x2836 <main+0x592>
    282e:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2832:	91 ff       	sbrs	r25, 1
    2834:	02 c0       	rjmp	.+4      	; 0x283a <main+0x596>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:238
  enterGame = true;
  bool gameSelection = true;

  while (RIGHTLOW && LEFTLOW); //prevents immediately enter a game

  while (gameSelection) {
    2836:	81 11       	cpse	r24, r1
    2838:	af cf       	rjmp	.-162    	; 0x2798 <main+0x4f4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:371
        }
        break;
    }
    if (SLEEPMENULOW || (LEFTLOW && RIGHTLOW)) gameSelection = false;
  }
  PORTA.PIN6CTRL &= ~ PORT_ISC_BOTHEDGES_gc; // detach interrupt
    283a:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <encoderDir+0x7f48ba>
    283e:	8e 7f       	andi	r24, 0xFE	; 254
    2840:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <encoderDir+0x7f48ba>
loop():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:171
  if (buttonDebounce(1, 1, 0, 700)) { // enters game mode
    strip.clear();
    gameSelection();
  }

  while (enterGame) { // end game or continue
    2844:	40 91 78 3b 	lds	r20, 0x3B78	; 0x803b78 <enterGame>
    2848:	c5 53       	subi	r28, 0x35	; 53
    284a:	df 4f       	sbci	r29, 0xFF	; 255
    284c:	48 83       	st	Y, r20
    284e:	cb 5c       	subi	r28, 0xCB	; 203
    2850:	d0 40       	sbci	r29, 0x00	; 0
    2852:	44 23       	and	r20, r20
    2854:	09 f4       	brne	.+2      	; 0x2858 <main+0x5b4>
    2856:	da cd       	rjmp	.-1100   	; 0x240c <main+0x168>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:173

    if (endGame) {
    2858:	80 91 77 3b 	lds	r24, 0x3B77	; 0x803b77 <endGame>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1701
    }
  }
}

void gameMusic() {
  for (uint16_t x = 0; x < 500; x += 25) {// game start music
    285c:	10 e0       	ldi	r17, 0x00	; 0
    285e:	00 e0       	ldi	r16, 0x00	; 0
loop():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:173
    gameSelection();
  }

  while (enterGame) { // end game or continue

    if (endGame) {
    2860:	88 23       	and	r24, r24
    2862:	09 f4       	brne	.+2      	; 0x2866 <main+0x5c2>
    2864:	60 c2       	rjmp	.+1216   	; 0x2d26 <main+0xa82>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:174
      endGame = false;
    2866:	10 92 77 3b 	sts	0x3B77, r1	; 0x803b77 <endGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:175
      enterGame = false;
    286a:	10 92 78 3b 	sts	0x3B78, r1	; 0x803b78 <enterGame>
    286e:	ea cf       	rjmp	.-44     	; 0x2844 <main+0x5a0>
setOptions():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1560
      strip.clear();
    }

    while (RIGHTLOW || LEFTLOW); // button debounce

    switch (option) { // color NeoPixel LED number from first to last
    2870:	f3 e0       	ldi	r31, 0x03	; 3
    2872:	ff 16       	cp	r15, r31
    2874:	09 f4       	brne	.+2      	; 0x2878 <main+0x5d4>
    2876:	7f c0       	rjmp	.+254    	; 0x2976 <main+0x6d2>
    2878:	24 e0       	ldi	r18, 0x04	; 4
    287a:	f2 12       	cpse	r15, r18
    287c:	30 cf       	rjmp	.-416    	; 0x26de <main+0x43a>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1619
          minutes = actualValue;
          strip.clear();
        }
        break;
      case 4:
        drawCharacter(20, letterE, red, green, blue);
    287e:	0d 2d       	mov	r16, r13
    2880:	2e 2d       	mov	r18, r14
    2882:	41 2f       	mov	r20, r17
    2884:	69 ea       	ldi	r22, 0xA9	; 169
    2886:	72 e0       	ldi	r23, 0x02	; 2
    2888:	84 e1       	ldi	r24, 0x14	; 20
    288a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1620
        drawCharacter(23, letterN, red, green, blue);
    288e:	2e 2d       	mov	r18, r14
    2890:	41 2f       	mov	r20, r17
    2892:	65 eb       	ldi	r22, 0xB5	; 181
    2894:	72 e0       	ldi	r23, 0x02	; 2
    2896:	87 e1       	ldi	r24, 0x17	; 23
    2898:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1621
        drawCharacter(26, letterD, red, green, blue);
    289c:	2e 2d       	mov	r18, r14
    289e:	41 2f       	mov	r20, r17
    28a0:	64 e1       	ldi	r22, 0x14	; 20
    28a2:	72 e0       	ldi	r23, 0x02	; 2
    28a4:	8a e1       	ldi	r24, 0x1A	; 26
    28a6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1622
        if (buttonDebounce(0, 0, 1, 50)) {
    28aa:	02 e3       	ldi	r16, 0x32	; 50
    28ac:	10 e0       	ldi	r17, 0x00	; 0
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	41 e0       	ldi	r20, 0x01	; 1
    28b4:	60 e0       	ldi	r22, 0x00	; 0
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    28bc:	88 23       	and	r24, r24
    28be:	09 f4       	brne	.+2      	; 0x28c2 <main+0x61e>
    28c0:	38 cf       	rjmp	.-400    	; 0x2732 <main+0x48e>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1623
          option = 5;
    28c2:	35 e0       	ldi	r19, 0x05	; 5
    28c4:	f3 2e       	mov	r15, r19
    28c6:	35 cf       	rjmp	.-406    	; 0x2732 <main+0x48e>
setOptions():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1577
          }
        }
        colorSelect();
        break;
      case 1:
        drawCharacter(0, letterB, red, green, blue);
    28c8:	0d 2d       	mov	r16, r13
    28ca:	2e 2d       	mov	r18, r14
    28cc:	41 2f       	mov	r20, r17
    28ce:	68 ee       	ldi	r22, 0xE8	; 232
    28d0:	71 e0       	ldi	r23, 0x01	; 1
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1578
        drawCharacter(4, letterR, red, green, blue);
    28d8:	2e 2d       	mov	r18, r14
    28da:	41 2f       	mov	r20, r17
    28dc:	61 e7       	ldi	r22, 0x71	; 113
    28de:	72 e0       	ldi	r23, 0x02	; 2
    28e0:	84 e0       	ldi	r24, 0x04	; 4
    28e2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1579
        showTime(53, brightLevel);
    28e6:	00 91 69 3b 	lds	r16, 0x3B69	; 0x803b69 <brightLevel>
    28ea:	60 2f       	mov	r22, r16
    28ec:	85 e3       	ldi	r24, 0x35	; 53
    28ee:	0e 94 17 04 	call	0x82e	; 0x82e <showTime(unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1580
        actualValue = encoder.encoderRead(1, 5, true, 1);
    28f2:	21 e0       	ldi	r18, 0x01	; 1
    28f4:	41 e0       	ldi	r20, 0x01	; 1
    28f6:	65 e0       	ldi	r22, 0x05	; 5
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	0e 94 31 03 	call	0x662	; 0x662 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]>
    28fe:	18 2f       	mov	r17, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1582

        if (actualValue != brightLevel) {
    2900:	08 17       	cp	r16, r24
    2902:	09 f4       	brne	.+2      	; 0x2906 <main+0x662>
    2904:	16 cf       	rjmp	.-468    	; 0x2732 <main+0x48e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1583
          strip.clear();
    2906:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1584
          brightLevel = actualValue;
    290a:	10 93 69 3b 	sts	0x3B69, r17	; 0x803b69 <brightLevel>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1586

          if (brightLevel > 5) {
    290e:	16 30       	cpi	r17, 0x06	; 6
    2910:	10 f0       	brcs	.+4      	; 0x2916 <main+0x672>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1587
            brightLevel = 1;
    2912:	f0 92 69 3b 	sts	0x3B69, r15	; 0x803b69 <brightLevel>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1589
          }
          if (brightLevel == 1) {
    2916:	80 91 69 3b 	lds	r24, 0x3B69	; 0x803b69 <brightLevel>
    291a:	81 30       	cpi	r24, 0x01	; 1
    291c:	21 f4       	brne	.+8      	; 0x2926 <main+0x682>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1590
            strip.setBrightness(5);
    291e:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1592
          } else {
            strip.setBrightness((brightLevel * 3));
    2920:	0e 94 e6 01 	call	0x3cc	; 0x3cc <tinyNeoPixel::setBrightness(unsigned char) [clone .constprop.6]>
    2924:	06 cf       	rjmp	.-500    	; 0x2732 <main+0x48e>
    2926:	98 2f       	mov	r25, r24
    2928:	99 0f       	add	r25, r25
    292a:	89 0f       	add	r24, r25
    292c:	f9 cf       	rjmp	.-14     	; 0x2920 <main+0x67c>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1597
          }
        }
        break;
      case 2:
        drawCharacter(0, letterH, red, green, blue);
    292e:	0d 2d       	mov	r16, r13
    2930:	2e 2d       	mov	r18, r14
    2932:	41 2f       	mov	r20, r17
    2934:	61 e9       	ldi	r22, 0x91	; 145
    2936:	72 e0       	ldi	r23, 0x02	; 2
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1598
        drawCharacter(4, letterR, red, green, blue);
    293e:	2e 2d       	mov	r18, r14
    2940:	41 2f       	mov	r20, r17
    2942:	61 e7       	ldi	r22, 0x71	; 113
    2944:	72 e0       	ldi	r23, 0x02	; 2
    2946:	84 e0       	ldi	r24, 0x04	; 4
    2948:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1599
        showTime(53, hours);
    294c:	60 91 68 3b 	lds	r22, 0x3B68	; 0x803b68 <hours>
    2950:	85 e3       	ldi	r24, 0x35	; 53
    2952:	0e 94 17 04 	call	0x82e	; 0x82e <showTime(unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1600
        actualValue = encoder.encoderRead(0, 23, true, 1);
    2956:	21 e0       	ldi	r18, 0x01	; 1
    2958:	41 e0       	ldi	r20, 0x01	; 1
    295a:	67 e1       	ldi	r22, 0x17	; 23
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	0e 94 31 03 	call	0x662	; 0x662 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1602

        if (actualValue != hours ) {
    2962:	90 91 68 3b 	lds	r25, 0x3B68	; 0x803b68 <hours>
    2966:	89 17       	cp	r24, r25
    2968:	09 f4       	brne	.+2      	; 0x296c <main+0x6c8>
    296a:	e3 ce       	rjmp	.-570    	; 0x2732 <main+0x48e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1603
          hours = actualValue;
    296c:	80 93 68 3b 	sts	0x3B68, r24	; 0x803b68 <hours>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1615
        showTime(53, minutes);
        actualValue = encoder.encoderRead(0, 59, true, 1);

        if (actualValue != minutes) {
          minutes = actualValue;
          strip.clear();
    2970:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
    2974:	de ce       	rjmp	.-580    	; 0x2732 <main+0x48e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1608
          hours = actualValue;
          strip.clear();
        }
        break;
      case 3:
        drawCharacter(0, letterM, red, green, blue);
    2976:	0d 2d       	mov	r16, r13
    2978:	2e 2d       	mov	r18, r14
    297a:	41 2f       	mov	r20, r17
    297c:	68 e0       	ldi	r22, 0x08	; 8
    297e:	72 e0       	ldi	r23, 0x02	; 2
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1609
        drawCharacter(4, letterI, red, green, blue);
    2986:	2e 2d       	mov	r18, r14
    2988:	41 2f       	mov	r20, r17
    298a:	6c e8       	ldi	r22, 0x8C	; 140
    298c:	72 e0       	ldi	r23, 0x02	; 2
    298e:	84 e0       	ldi	r24, 0x04	; 4
    2990:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1610
        showTime(53, minutes);
    2994:	60 91 67 3b 	lds	r22, 0x3B67	; 0x803b67 <minutes>
    2998:	85 e3       	ldi	r24, 0x35	; 53
    299a:	0e 94 17 04 	call	0x82e	; 0x82e <showTime(unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1611
        actualValue = encoder.encoderRead(0, 59, true, 1);
    299e:	21 e0       	ldi	r18, 0x01	; 1
    29a0:	41 e0       	ldi	r20, 0x01	; 1
    29a2:	6b e3       	ldi	r22, 0x3B	; 59
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	0e 94 31 03 	call	0x662	; 0x662 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1613

        if (actualValue != minutes) {
    29aa:	90 91 67 3b 	lds	r25, 0x3B67	; 0x803b67 <minutes>
    29ae:	89 17       	cp	r24, r25
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <main+0x710>
    29b2:	bf ce       	rjmp	.-642    	; 0x2732 <main+0x48e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1614
          minutes = actualValue;
    29b4:	80 93 67 3b 	sts	0x3B67, r24	; 0x803b67 <minutes>
    29b8:	db cf       	rjmp	.-74     	; 0x2970 <main+0x6cc>
gameSelection():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:242

  while (gameSelection) {

    if (buttonDebounce(0, 1, 0, 500)) {

      if (gameSelect++, gameSelect > 4) gameSelect = 0;
    29ba:	10 92 75 3b 	sts	0x3B75, r1	; 0x803b75 <gameSelect>
    29be:	10 92 76 3b 	sts	0x3B76, r1	; 0x803b76 <gameSelect+0x1>
    29c2:	02 cf       	rjmp	.-508    	; 0x27c8 <main+0x524>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:248
      strip.clear();
    }

    if (buttonDebounce(1, 0, 0, 500)) {

      if (gameSelect--, gameSelect < 0) gameSelect = 4;
    29c4:	e0 92 75 3b 	sts	0x3B75, r14	; 0x803b75 <gameSelect>
    29c8:	f0 92 76 3b 	sts	0x3B76, r15	; 0x803b76 <gameSelect+0x1>
    29cc:	15 cf       	rjmp	.-470    	; 0x27f8 <main+0x554>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:252
      strip.clear();
    }

    switch (gameSelect) { // select game ad scroll game title
    29ce:	83 30       	cpi	r24, 0x03	; 3
    29d0:	91 05       	cpc	r25, r1
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <main+0x732>
    29d4:	00 c1       	rjmp	.+512    	; 0x2bd6 <main+0x932>
    29d6:	04 97       	sbiw	r24, 0x04	; 4
    29d8:	09 f0       	breq	.+2      	; 0x29dc <main+0x738>
    29da:	20 cf       	rjmp	.-448    	; 0x281c <main+0x578>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:356
          }
          gameSelection = false;
        }
        break;
      case 4:
        drawCharacter(50, arrowLeft, 100, 0, 0);
    29dc:	00 e0       	ldi	r16, 0x00	; 0
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	44 e6       	ldi	r20, 0x64	; 100
    29e2:	6a e4       	ldi	r22, 0x4A	; 74
    29e4:	72 e0       	ldi	r23, 0x02	; 2
    29e6:	82 e3       	ldi	r24, 0x32	; 50
    29e8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:357
        drawCharacter(57, arrowRight, 100, 0, 0);
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	44 e6       	ldi	r20, 0x64	; 100
    29f0:	64 e4       	ldi	r22, 0x44	; 68
    29f2:	72 e0       	ldi	r23, 0x02	; 2
    29f4:	89 e3       	ldi	r24, 0x39	; 57
    29f6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:358
        drawCharacter(0, letterE, 100, 0, 0);
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	44 e6       	ldi	r20, 0x64	; 100
    29fe:	69 ea       	ldi	r22, 0xA9	; 169
    2a00:	72 e0       	ldi	r23, 0x02	; 2
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:359
        drawCharacter(3, letterN, 100, 0, 0);
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	44 e6       	ldi	r20, 0x64	; 100
    2a0c:	65 eb       	ldi	r22, 0xB5	; 181
    2a0e:	72 e0       	ldi	r23, 0x02	; 2
    2a10:	83 e0       	ldi	r24, 0x03	; 3
    2a12:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:360
        drawCharacter(6, letterD, 100, 0, 0);
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	44 e6       	ldi	r20, 0x64	; 100
    2a1a:	64 e1       	ldi	r22, 0x14	; 20
    2a1c:	72 e0       	ldi	r23, 0x02	; 2
    2a1e:	86 e0       	ldi	r24, 0x06	; 6
    2a20:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:362

        if (SLEEPMENULOW || (LEFTLOW && RIGHTLOW)) {
    2a24:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2a28:	83 ff       	sbrs	r24, 3
    2a2a:	08 c0       	rjmp	.+16     	; 0x2a3c <main+0x798>
    2a2c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2a30:	82 fd       	sbrc	r24, 2
    2a32:	f4 ce       	rjmp	.-536    	; 0x281c <main+0x578>
    2a34:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2a38:	81 fd       	sbrc	r24, 1
    2a3a:	f0 ce       	rjmp	.-544    	; 0x281c <main+0x578>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:363
          enterGame = false;
    2a3c:	10 92 78 3b 	sts	0x3B78, r1	; 0x803b78 <enterGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:364
          lastMinute = 60;
    2a40:	c0 92 1f 3a 	sts	0x3A1F, r12	; 0x803a1f <lastMinute>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:365
          timer = millis();
    2a44:	0e 94 a6 02 	call	0x54c	; 0x54c <millis>
    2a48:	60 93 79 3b 	sts	0x3B79, r22	; 0x803b79 <timer>
    2a4c:	70 93 7a 3b 	sts	0x3B7A, r23	; 0x803b7a <timer+0x1>
    2a50:	80 93 7b 3b 	sts	0x3B7B, r24	; 0x803b7b <timer+0x2>
    2a54:	90 93 7c 3b 	sts	0x3B7C, r25	; 0x803b7c <timer+0x3>
    2a58:	e1 ce       	rjmp	.-574    	; 0x281c <main+0x578>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:254
      strip.clear();
    }

    switch (gameSelect) { // select game ad scroll game title
      case 0:
        drawCharacter(50, arrowLeft, 100, 0, 0);
    2a5a:	00 e0       	ldi	r16, 0x00	; 0
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	44 e6       	ldi	r20, 0x64	; 100
    2a60:	6a e4       	ldi	r22, 0x4A	; 74
    2a62:	72 e0       	ldi	r23, 0x02	; 2
    2a64:	82 e3       	ldi	r24, 0x32	; 50
    2a66:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:255
        drawCharacter(57, arrowRight, 100, 0, 0);
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	44 e6       	ldi	r20, 0x64	; 100
    2a6e:	64 e4       	ldi	r22, 0x44	; 68
    2a70:	72 e0       	ldi	r23, 0x02	; 2
    2a72:	89 e3       	ldi	r24, 0x39	; 57
    2a74:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:256
        strip.setPixelColor(73, 0, 0, 100);
    2a78:	24 e6       	ldi	r18, 0x64	; 100
    2a7a:	40 e0       	ldi	r20, 0x00	; 0
    2a7c:	60 e0       	ldi	r22, 0x00	; 0
    2a7e:	89 e4       	ldi	r24, 0x49	; 73
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:258

        for (uint8_t x = 0; x < 5 && RIGHTHIGH && LEFTHIGH; x++) {
    2a86:	10 e0       	ldi	r17, 0x00	; 0
gameSelection():
    2a88:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2a8c:	81 ff       	sbrs	r24, 1
    2a8e:	c6 ce       	rjmp	.-628    	; 0x281c <main+0x578>
    2a90:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2a94:	82 ff       	sbrs	r24, 2
    2a96:	c2 ce       	rjmp	.-636    	; 0x281c <main+0x578>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:259
          switch (x) {
    2a98:	12 30       	cpi	r17, 0x02	; 2
    2a9a:	c9 f0       	breq	.+50     	; 0x2ace <main+0x82a>
    2a9c:	30 f4       	brcc	.+12     	; 0x2aaa <main+0x806>
    2a9e:	11 30       	cpi	r17, 0x01	; 1
    2aa0:	71 f0       	breq	.+28     	; 0x2abe <main+0x81a>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:258
      case 0:
        drawCharacter(50, arrowLeft, 100, 0, 0);
        drawCharacter(57, arrowRight, 100, 0, 0);
        strip.setPixelColor(73, 0, 0, 100);

        for (uint8_t x = 0; x < 5 && RIGHTHIGH && LEFTHIGH; x++) {
    2aa2:	1f 5f       	subi	r17, 0xFF	; 255
    2aa4:	15 30       	cpi	r17, 0x05	; 5
    2aa6:	81 f7       	brne	.-32     	; 0x2a88 <main+0x7e4>
    2aa8:	b9 ce       	rjmp	.-654    	; 0x281c <main+0x578>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:259
          switch (x) {
    2aaa:	13 30       	cpi	r17, 0x03	; 3
    2aac:	b1 f0       	breq	.+44     	; 0x2ada <main+0x836>
    2aae:	14 30       	cpi	r17, 0x04	; 4
    2ab0:	c1 f7       	brne	.-16     	; 0x2aa2 <main+0x7fe>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:270
              break;
            case 3:
              scrollPixels(ledInvadersTitle3, 0, 100, 0);
              break;
            case 4:
              scrollPixels(ledInvadersTitle4, 0, 100, 0);
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	44 e6       	ldi	r20, 0x64	; 100
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	8a e6       	ldi	r24, 0x6A	; 106
    2aba:	99 e3       	ldi	r25, 0x39	; 57
    2abc:	05 c0       	rjmp	.+10     	; 0x2ac8 <main+0x824>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:261
        strip.setPixelColor(73, 0, 0, 100);

        for (uint8_t x = 0; x < 5 && RIGHTHIGH && LEFTHIGH; x++) {
          switch (x) {
            case 1:
              scrollPixels(ledInvadersTitle1, 0, 100, 0);
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	44 e6       	ldi	r20, 0x64	; 100
    2ac2:	60 e0       	ldi	r22, 0x00	; 0
    2ac4:	81 ef       	ldi	r24, 0xF1	; 241
    2ac6:	99 e3       	ldi	r25, 0x39	; 57
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:270
              break;
            case 3:
              scrollPixels(ledInvadersTitle3, 0, 100, 0);
              break;
            case 4:
              scrollPixels(ledInvadersTitle4, 0, 100, 0);
    2ac8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)>
    2acc:	ea cf       	rjmp	.-44     	; 0x2aa2 <main+0x7fe>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:264
          switch (x) {
            case 1:
              scrollPixels(ledInvadersTitle1, 0, 100, 0);
              break;
            case 2:
              scrollPixels(ledInvadersTitle2, 0, 100, 0);
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	44 e6       	ldi	r20, 0x64	; 100
    2ad2:	60 e0       	ldi	r22, 0x00	; 0
    2ad4:	84 ec       	ldi	r24, 0xC4	; 196
    2ad6:	99 e3       	ldi	r25, 0x39	; 57
    2ad8:	f7 cf       	rjmp	.-18     	; 0x2ac8 <main+0x824>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:267
              break;
            case 3:
              scrollPixels(ledInvadersTitle3, 0, 100, 0);
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	44 e6       	ldi	r20, 0x64	; 100
    2ade:	60 e0       	ldi	r22, 0x00	; 0
    2ae0:	87 e9       	ldi	r24, 0x97	; 151
    2ae2:	99 e3       	ldi	r25, 0x39	; 57
    2ae4:	f1 cf       	rjmp	.-30     	; 0x2ac8 <main+0x824>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:276
              break;
          }
        }
        break;
      case 1:
        drawCharacter(50, arrowLeft, 100, 0, 0);
    2ae6:	00 e0       	ldi	r16, 0x00	; 0
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	44 e6       	ldi	r20, 0x64	; 100
    2aec:	6a e4       	ldi	r22, 0x4A	; 74
    2aee:	72 e0       	ldi	r23, 0x02	; 2
    2af0:	82 e3       	ldi	r24, 0x32	; 50
    2af2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:277
        drawCharacter(57, arrowRight, 100, 0, 0);
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	44 e6       	ldi	r20, 0x64	; 100
    2afa:	64 e4       	ldi	r22, 0x44	; 68
    2afc:	72 e0       	ldi	r23, 0x02	; 2
    2afe:	89 e3       	ldi	r24, 0x39	; 57
    2b00:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:278
        strip.setPixelColor(74, 0, 0, 100);
    2b04:	24 e6       	ldi	r18, 0x64	; 100
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	60 e0       	ldi	r22, 0x00	; 0
    2b0a:	8a e4       	ldi	r24, 0x4A	; 74
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:280

        for (uint8_t x = 0; x < 4 && RIGHTHIGH && LEFTHIGH; x++) {
    2b12:	10 e0       	ldi	r17, 0x00	; 0
gameSelection():
    2b14:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2b18:	81 ff       	sbrs	r24, 1
    2b1a:	80 ce       	rjmp	.-768    	; 0x281c <main+0x578>
    2b1c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2b20:	82 ff       	sbrs	r24, 2
    2b22:	7c ce       	rjmp	.-776    	; 0x281c <main+0x578>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:281
          switch (x) {
    2b24:	12 30       	cpi	r17, 0x02	; 2
    2b26:	79 f0       	breq	.+30     	; 0x2b46 <main+0x8a2>
    2b28:	13 30       	cpi	r17, 0x03	; 3
    2b2a:	99 f0       	breq	.+38     	; 0x2b52 <main+0x8ae>
    2b2c:	11 30       	cpi	r17, 0x01	; 1
    2b2e:	39 f4       	brne	.+14     	; 0x2b3e <main+0x89a>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:283
            case 1:
              scrollPixels(ledInvadersTitle1, 50, 80, 0);
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	40 e5       	ldi	r20, 0x50	; 80
    2b34:	62 e3       	ldi	r22, 0x32	; 50
    2b36:	81 ef       	ldi	r24, 0xF1	; 241
    2b38:	99 e3       	ldi	r25, 0x39	; 57
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:289
              break;
            case 2:
              scrollPixels(ledTrisTitle2, 50, 80, 0);
              break;
            case 3:
              scrollPixels(ledTrisTitle3, 50, 80, 0);
    2b3a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:280
      case 1:
        drawCharacter(50, arrowLeft, 100, 0, 0);
        drawCharacter(57, arrowRight, 100, 0, 0);
        strip.setPixelColor(74, 0, 0, 100);

        for (uint8_t x = 0; x < 4 && RIGHTHIGH && LEFTHIGH; x++) {
    2b3e:	1f 5f       	subi	r17, 0xFF	; 255
    2b40:	14 30       	cpi	r17, 0x04	; 4
    2b42:	41 f7       	brne	.-48     	; 0x2b14 <main+0x870>
    2b44:	6b ce       	rjmp	.-810    	; 0x281c <main+0x578>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:286
          switch (x) {
            case 1:
              scrollPixels(ledInvadersTitle1, 50, 80, 0);
              break;
            case 2:
              scrollPixels(ledTrisTitle2, 50, 80, 0);
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	40 e5       	ldi	r20, 0x50	; 80
    2b4a:	62 e3       	ldi	r22, 0x32	; 50
    2b4c:	8d e3       	ldi	r24, 0x3D	; 61
    2b4e:	99 e3       	ldi	r25, 0x39	; 57
    2b50:	f4 cf       	rjmp	.-24     	; 0x2b3a <main+0x896>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:289
              break;
            case 3:
              scrollPixels(ledTrisTitle3, 50, 80, 0);
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	40 e5       	ldi	r20, 0x50	; 80
    2b56:	62 e3       	ldi	r22, 0x32	; 50
    2b58:	80 e1       	ldi	r24, 0x10	; 16
    2b5a:	99 e3       	ldi	r25, 0x39	; 57
    2b5c:	ee cf       	rjmp	.-36     	; 0x2b3a <main+0x896>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:295
              break;
          }
        }
        break;
      case 2:
        drawCharacter(50, arrowLeft, 100, 0, 0);
    2b5e:	00 e0       	ldi	r16, 0x00	; 0
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	44 e6       	ldi	r20, 0x64	; 100
    2b64:	6a e4       	ldi	r22, 0x4A	; 74
    2b66:	72 e0       	ldi	r23, 0x02	; 2
    2b68:	82 e3       	ldi	r24, 0x32	; 50
    2b6a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:296
        drawCharacter(57, arrowRight, 100, 0, 0);
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	44 e6       	ldi	r20, 0x64	; 100
    2b72:	64 e4       	ldi	r22, 0x44	; 68
    2b74:	72 e0       	ldi	r23, 0x02	; 2
    2b76:	89 e3       	ldi	r24, 0x39	; 57
    2b78:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:297
        strip.setPixelColor(75, 0, 0, 100);
    2b7c:	24 e6       	ldi	r18, 0x64	; 100
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	60 e0       	ldi	r22, 0x00	; 0
    2b82:	8b e4       	ldi	r24, 0x4B	; 75
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:299

        for (uint8_t x = 0; x < 4 && RIGHTHIGH && LEFTHIGH; x++) {
    2b8a:	10 e0       	ldi	r17, 0x00	; 0
gameSelection():
    2b8c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2b90:	81 ff       	sbrs	r24, 1
    2b92:	44 ce       	rjmp	.-888    	; 0x281c <main+0x578>
    2b94:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2b98:	82 ff       	sbrs	r24, 2
    2b9a:	40 ce       	rjmp	.-896    	; 0x281c <main+0x578>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:300
          switch (x) {
    2b9c:	12 30       	cpi	r17, 0x02	; 2
    2b9e:	79 f0       	breq	.+30     	; 0x2bbe <main+0x91a>
    2ba0:	13 30       	cpi	r17, 0x03	; 3
    2ba2:	99 f0       	breq	.+38     	; 0x2bca <main+0x926>
    2ba4:	11 30       	cpi	r17, 0x01	; 1
    2ba6:	39 f4       	brne	.+14     	; 0x2bb6 <main+0x912>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:302
            case 1:
              scrollPixels(flappyLedTitle1, 0, 100, 50);
    2ba8:	22 e3       	ldi	r18, 0x32	; 50
    2baa:	44 e6       	ldi	r20, 0x64	; 100
    2bac:	60 e0       	ldi	r22, 0x00	; 0
    2bae:	83 ee       	ldi	r24, 0xE3	; 227
    2bb0:	98 e3       	ldi	r25, 0x38	; 56
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:308
              break;
            case 2:
              scrollPixels(flappyLedTitle2, 0, 100, 50);
              break;
            case 3:
              scrollPixels(ledInvadersTitle1, 0, 100, 50);
    2bb2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:299
      case 2:
        drawCharacter(50, arrowLeft, 100, 0, 0);
        drawCharacter(57, arrowRight, 100, 0, 0);
        strip.setPixelColor(75, 0, 0, 100);

        for (uint8_t x = 0; x < 4 && RIGHTHIGH && LEFTHIGH; x++) {
    2bb6:	1f 5f       	subi	r17, 0xFF	; 255
    2bb8:	14 30       	cpi	r17, 0x04	; 4
    2bba:	41 f7       	brne	.-48     	; 0x2b8c <main+0x8e8>
    2bbc:	2f ce       	rjmp	.-930    	; 0x281c <main+0x578>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:305
          switch (x) {
            case 1:
              scrollPixels(flappyLedTitle1, 0, 100, 50);
              break;
            case 2:
              scrollPixels(flappyLedTitle2, 0, 100, 50);
    2bbe:	22 e3       	ldi	r18, 0x32	; 50
    2bc0:	44 e6       	ldi	r20, 0x64	; 100
    2bc2:	60 e0       	ldi	r22, 0x00	; 0
    2bc4:	86 eb       	ldi	r24, 0xB6	; 182
    2bc6:	98 e3       	ldi	r25, 0x38	; 56
    2bc8:	f4 cf       	rjmp	.-24     	; 0x2bb2 <main+0x90e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:308
              break;
            case 3:
              scrollPixels(ledInvadersTitle1, 0, 100, 50);
    2bca:	22 e3       	ldi	r18, 0x32	; 50
    2bcc:	44 e6       	ldi	r20, 0x64	; 100
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	81 ef       	ldi	r24, 0xF1	; 241
    2bd2:	99 e3       	ldi	r25, 0x39	; 57
    2bd4:	ee cf       	rjmp	.-36     	; 0x2bb2 <main+0x90e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:314
              break;
          }
        }
        break;
      case 3:
        drawCharacter(50, arrowLeft, 100, 0, 0);
    2bd6:	00 e0       	ldi	r16, 0x00	; 0
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	44 e6       	ldi	r20, 0x64	; 100
    2bdc:	6a e4       	ldi	r22, 0x4A	; 74
    2bde:	72 e0       	ldi	r23, 0x02	; 2
    2be0:	82 e3       	ldi	r24, 0x32	; 50
    2be2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:315
        drawCharacter(57, arrowRight, 100, 0, 0);
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	44 e6       	ldi	r20, 0x64	; 100
    2bea:	64 e4       	ldi	r22, 0x44	; 68
    2bec:	72 e0       	ldi	r23, 0x02	; 2
    2bee:	89 e3       	ldi	r24, 0x39	; 57
    2bf0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:316
        strip.setPixelColor(76, 0, 0, 100);
    2bf4:	24 e6       	ldi	r18, 0x64	; 100
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	60 e0       	ldi	r22, 0x00	; 0
    2bfa:	8c e4       	ldi	r24, 0x4C	; 76
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:318

        for (uint8_t x = 0; x < 4 && RIGHTHIGH && LEFTHIGH; x++) {
    2c02:	10 e0       	ldi	r17, 0x00	; 0
gameSelection():
    2c04:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2c08:	81 fd       	sbrc	r24, 1
    2c0a:	60 c0       	rjmp	.+192    	; 0x2ccc <main+0xa28>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:332
              scrollPixels(ledKanoidTitle2, 0, 50, 80);
              break;
          }
        }

        if (SLEEPMENULOW || (LEFTLOW && RIGHTLOW)) { // ledkanoid number of players select.
    2c0c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2c10:	83 fd       	sbrc	r24, 3
    2c12:	7e c0       	rjmp	.+252    	; 0x2d10 <main+0xa6c>
encoderSetPosition():
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	0e 94 04 03 	call	0x608	; 0x608 <encoder::encoderSetPosition(int, unsigned char) [clone .part.0]>
gameSelection():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:334
          encoder.encoderSetPosition(1, 1);
          strip.clear();
    2c1c:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:335
          while (RIGHTLOW && LEFTLOW); //prevents immediately enter a game
    2c20:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2c24:	81 fd       	sbrc	r24, 1
    2c26:	04 c0       	rjmp	.+8      	; 0x2c30 <main+0x98c>
    2c28:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2c2c:	82 ff       	sbrs	r24, 2
    2c2e:	f8 cf       	rjmp	.-16     	; 0x2c20 <main+0x97c>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:337

          while (RIGHTHIGH || LEFTHIGH) {
    2c30:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2c34:	81 fd       	sbrc	r24, 1
    2c36:	04 c0       	rjmp	.+8      	; 0x2c40 <main+0x99c>
    2c38:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2c3c:	82 ff       	sbrs	r24, 2
    2c3e:	71 c0       	rjmp	.+226    	; 0x2d22 <main+0xa7e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:338
            uint8_t actualValue = encoder.encoderRead(1, 2, true, 1);
    2c40:	21 e0       	ldi	r18, 0x01	; 1
    2c42:	41 e0       	ldi	r20, 0x01	; 1
    2c44:	62 e0       	ldi	r22, 0x02	; 2
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	0e 94 31 03 	call	0x662	; 0x662 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]>
    2c4c:	18 2f       	mov	r17, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:339
            arrayNumberValue[0] = pgm_read_word_near(number + actualValue);
    2c4e:	e8 2f       	mov	r30, r24
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	ee 0f       	add	r30, r30
    2c54:	ff 1f       	adc	r31, r31
    2c56:	e0 5d       	subi	r30, 0xD0	; 208
    2c58:	fd 4f       	sbci	r31, 0xFD	; 253
    2c5a:	65 91       	lpm	r22, Z+
    2c5c:	74 91       	lpm	r23, Z
    2c5e:	60 93 71 3b 	sts	0x3B71, r22	; 0x803b71 <arrayNumberValue>
    2c62:	70 93 72 3b 	sts	0x3B72, r23	; 0x803b72 <arrayNumberValue+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:340
            drawCharacter(50, arrayNumberValue[0], 0, 0, 100);
    2c66:	04 e6       	ldi	r16, 0x64	; 100
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	82 e3       	ldi	r24, 0x32	; 50
    2c6e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:341
            drawCharacter(0, letterS, 100, 0, 0);
    2c72:	00 e0       	ldi	r16, 0x00	; 0
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	44 e6       	ldi	r20, 0x64	; 100
    2c78:	68 e2       	ldi	r22, 0x28	; 40
    2c7a:	72 e0       	ldi	r23, 0x02	; 2
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:342
            drawCharacter(3, letterE, 100, 0, 0);
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	44 e6       	ldi	r20, 0x64	; 100
    2c86:	69 ea       	ldi	r22, 0xA9	; 169
    2c88:	72 e0       	ldi	r23, 0x02	; 2
    2c8a:	83 e0       	ldi	r24, 0x03	; 3
    2c8c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:343
            drawCharacter(7, letterL, 100, 0, 0);
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	44 e6       	ldi	r20, 0x64	; 100
    2c94:	6c e7       	ldi	r22, 0x7C	; 124
    2c96:	72 e0       	ldi	r23, 0x02	; 2
    2c98:	87 e0       	ldi	r24, 0x07	; 7
    2c9a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:344
            drawCharacter(54, letterP, 100, 0, 0);
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	44 e6       	ldi	r20, 0x64	; 100
    2ca2:	6f e1       	ldi	r22, 0x1F	; 31
    2ca4:	72 e0       	ldi	r23, 0x02	; 2
    2ca6:	86 e3       	ldi	r24, 0x36	; 54
    2ca8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:346

            if (LedKanoidNumberOfplayers != actualValue) {
    2cac:	80 91 6e 3b 	lds	r24, 0x3B6E	; 0x803b6e <LedKanoidNumberOfplayers>
    2cb0:	18 17       	cp	r17, r24
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <main+0xa12>
    2cb4:	bd cf       	rjmp	.-134    	; 0x2c30 <main+0x98c>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:347
              strip.clear();
    2cb6:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:348
              beep(50, 50);
    2cba:	62 e3       	ldi	r22, 0x32	; 50
    2cbc:	70 e0       	ldi	r23, 0x00	; 0
    2cbe:	82 e3       	ldi	r24, 0x32	; 50
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	0e 94 7f 05 	call	0xafe	; 0xafe <beep(int, int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:349
              LedKanoidNumberOfplayers = actualValue;
    2cc6:	10 93 6e 3b 	sts	0x3B6E, r17	; 0x803b6e <LedKanoidNumberOfplayers>
    2cca:	b2 cf       	rjmp	.-156    	; 0x2c30 <main+0x98c>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:318
      case 3:
        drawCharacter(50, arrowLeft, 100, 0, 0);
        drawCharacter(57, arrowRight, 100, 0, 0);
        strip.setPixelColor(76, 0, 0, 100);

        for (uint8_t x = 0; x < 4 && RIGHTHIGH && LEFTHIGH; x++) {
    2ccc:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2cd0:	82 ff       	sbrs	r24, 2
    2cd2:	9c cf       	rjmp	.-200    	; 0x2c0c <main+0x968>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:319
          switch (x) {
    2cd4:	12 30       	cpi	r17, 0x02	; 2
    2cd6:	81 f0       	breq	.+32     	; 0x2cf8 <main+0xa54>
    2cd8:	13 30       	cpi	r17, 0x03	; 3
    2cda:	a1 f0       	breq	.+40     	; 0x2d04 <main+0xa60>
    2cdc:	11 30       	cpi	r17, 0x01	; 1
    2cde:	39 f4       	brne	.+14     	; 0x2cee <main+0xa4a>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:321
            case 1:
              scrollPixels(ledInvadersTitle1, 0, 50, 80);
    2ce0:	20 e5       	ldi	r18, 0x50	; 80
    2ce2:	42 e3       	ldi	r20, 0x32	; 50
    2ce4:	60 e0       	ldi	r22, 0x00	; 0
    2ce6:	81 ef       	ldi	r24, 0xF1	; 241
    2ce8:	99 e3       	ldi	r25, 0x39	; 57
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:327
              break;
            case 2:
              scrollPixels(ledKanoidTitle1, 0, 50, 80);
              break;
            case 3:
              scrollPixels(ledKanoidTitle2, 0, 50, 80);
    2cea:	0e 94 4f 06 	call	0xc9e	; 0xc9e <scrollPixels(unsigned char (*) [9], unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:318
      case 3:
        drawCharacter(50, arrowLeft, 100, 0, 0);
        drawCharacter(57, arrowRight, 100, 0, 0);
        strip.setPixelColor(76, 0, 0, 100);

        for (uint8_t x = 0; x < 4 && RIGHTHIGH && LEFTHIGH; x++) {
    2cee:	1f 5f       	subi	r17, 0xFF	; 255
    2cf0:	14 30       	cpi	r17, 0x04	; 4
    2cf2:	09 f0       	breq	.+2      	; 0x2cf6 <main+0xa52>
    2cf4:	87 cf       	rjmp	.-242    	; 0x2c04 <main+0x960>
    2cf6:	8a cf       	rjmp	.-236    	; 0x2c0c <main+0x968>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:324
          switch (x) {
            case 1:
              scrollPixels(ledInvadersTitle1, 0, 50, 80);
              break;
            case 2:
              scrollPixels(ledKanoidTitle1, 0, 50, 80);
    2cf8:	20 e5       	ldi	r18, 0x50	; 80
    2cfa:	42 e3       	ldi	r20, 0x32	; 50
    2cfc:	60 e0       	ldi	r22, 0x00	; 0
    2cfe:	89 e8       	ldi	r24, 0x89	; 137
    2d00:	98 e3       	ldi	r25, 0x38	; 56
    2d02:	f3 cf       	rjmp	.-26     	; 0x2cea <main+0xa46>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:327
              break;
            case 3:
              scrollPixels(ledKanoidTitle2, 0, 50, 80);
    2d04:	20 e5       	ldi	r18, 0x50	; 80
    2d06:	42 e3       	ldi	r20, 0x32	; 50
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	8c e5       	ldi	r24, 0x5C	; 92
    2d0c:	98 e3       	ldi	r25, 0x38	; 56
    2d0e:	ed cf       	rjmp	.-38     	; 0x2cea <main+0xa46>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:332
              break;
          }
        }

        if (SLEEPMENULOW || (LEFTLOW && RIGHTLOW)) { // ledkanoid number of players select.
    2d10:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2d14:	82 fd       	sbrc	r24, 2
    2d16:	82 cd       	rjmp	.-1276   	; 0x281c <main+0x578>
    2d18:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2d1c:	81 fd       	sbrc	r24, 1
    2d1e:	7e cd       	rjmp	.-1284   	; 0x281c <main+0x578>
    2d20:	79 cf       	rjmp	.-270    	; 0x2c14 <main+0x970>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:352
              strip.clear();
              beep(50, 50);
              LedKanoidNumberOfplayers = actualValue;
            }
          }
          gameSelection = false;
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	7c cd       	rjmp	.-1288   	; 0x281e <main+0x57a>
gameMusic():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1702
  }
}

void gameMusic() {
  for (uint16_t x = 0; x < 500; x += 25) {// game start music
    beep(50, x);
    2d26:	b8 01       	movw	r22, r16
    2d28:	82 e3       	ldi	r24, 0x32	; 50
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	0e 94 7f 05 	call	0xafe	; 0xafe <beep(int, int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1701
    }
  }
}

void gameMusic() {
  for (uint16_t x = 0; x < 500; x += 25) {// game start music
    2d30:	07 5e       	subi	r16, 0xE7	; 231
    2d32:	1f 4f       	sbci	r17, 0xFF	; 255
    2d34:	04 3f       	cpi	r16, 0xF4	; 244
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	18 07       	cpc	r17, r24
    2d3a:	a9 f7       	brne	.-22     	; 0x2d26 <main+0xa82>
loop():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:178
    if (endGame) {
      endGame = false;
      enterGame = false;
    } else {
      gameMusic();
      strip.clear();
    2d3c:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:179
      switch (gameSelect) {
    2d40:	80 91 75 3b 	lds	r24, 0x3B75	; 0x803b75 <gameSelect>
    2d44:	90 91 76 3b 	lds	r25, 0x3B76	; 0x803b76 <gameSelect+0x1>
    2d48:	81 30       	cpi	r24, 0x01	; 1
    2d4a:	91 05       	cpc	r25, r1
    2d4c:	e9 f0       	breq	.+58     	; 0x2d88 <main+0xae4>
    2d4e:	84 f4       	brge	.+32     	; 0x2d70 <main+0xacc>
    2d50:	89 2b       	or	r24, r25
    2d52:	09 f0       	breq	.+2      	; 0x2d56 <main+0xab2>
    2d54:	77 cd       	rjmp	.-1298   	; 0x2844 <main+0x5a0>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:181
        case 0:
          gameSpeed =  pgm_read_word_near (enemySpeed + 0);
    2d56:	eb ec       	ldi	r30, 0xCB	; 203
    2d58:	f2 e0       	ldi	r31, 0x02	; 2
    2d5a:	85 91       	lpm	r24, Z+
    2d5c:	94 91       	lpm	r25, Z
    2d5e:	80 93 73 3b 	sts	0x3B73, r24	; 0x803b73 <gameSpeed>
    2d62:	90 93 74 3b 	sts	0x3B74, r25	; 0x803b74 <gameSpeed+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:182
          levelTitle ();
    2d66:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <levelTitle()>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:183
          gameLedInvaders();
    2d6a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <gameLedInvaders()>
    2d6e:	6a cd       	rjmp	.-1324   	; 0x2844 <main+0x5a0>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:179
      endGame = false;
      enterGame = false;
    } else {
      gameMusic();
      strip.clear();
      switch (gameSelect) {
    2d70:	82 30       	cpi	r24, 0x02	; 2
    2d72:	91 05       	cpc	r25, r1
    2d74:	09 f4       	brne	.+2      	; 0x2d78 <main+0xad4>
    2d76:	a4 c3       	rjmp	.+1864   	; 0x34c0 <main+0x121c>
    2d78:	03 97       	sbiw	r24, 0x03	; 3
    2d7a:	09 f0       	breq	.+2      	; 0x2d7e <main+0xada>
    2d7c:	63 cd       	rjmp	.-1338   	; 0x2844 <main+0x5a0>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:192
          break;
        case 2:
          gameFlappyLed();
          break;
        case 3:
          levelTitle ();
    2d7e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <levelTitle()>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:193
          gameLedKanoid();
    2d82:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <gameLedKanoid()>
    2d86:	5e cd       	rjmp	.-1348   	; 0x2844 <main+0x5a0>
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:798
void gameLedTris() {
  uint8_t tetrominoRotation;
  uint8_t tetrominoLastRotation = 0;
  uint8_t randomTetromino = 0;
  uint8_t ledtrisLives = 1;// if a tetromino cant`t go lower than row 2, is game over
  uint16_t actualTetromino[1] = {tetromino1A};// Load tetromino from "character.h"
    2d88:	ec e6       	ldi	r30, 0x6C	; 108
    2d8a:	f2 e0       	ldi	r31, 0x02	; 2
    2d8c:	cc 52       	subi	r28, 0x2C	; 44
    2d8e:	df 4f       	sbci	r29, 0xFF	; 255
    2d90:	e8 83       	st	Y, r30
    2d92:	f9 83       	std	Y+1, r31	; 0x01
    2d94:	c4 5d       	subi	r28, 0xD4	; 212
    2d96:	d0 40       	sbci	r29, 0x00	; 0
    2d98:	ae 01       	movw	r20, r28
    2d9a:	4f 5f       	subi	r20, 0xFF	; 255
    2d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d9e:	2a e0       	ldi	r18, 0x0A	; 10
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:816
  bool moveTetrominos = false;// once a line is complete allow remaining tetrominos to get down

  //fills all the tetrominos pos with 0.
  for ( uint8_t row = 0; row < 10; row++ ) {
    for ( uint8_t column = 0; column < 10; column++ ) {
      tetrominoInPos [row][column] = 0;
    2da4:	fc 01       	movw	r30, r24
    2da6:	ee 0f       	add	r30, r30
    2da8:	ff 1f       	adc	r31, r31
    2daa:	e4 0f       	add	r30, r20
    2dac:	f5 1f       	adc	r31, r21
    2dae:	10 82       	st	Z, r1
    2db0:	11 82       	std	Z+1, r1	; 0x01
    2db2:	01 96       	adiw	r24, 0x01	; 1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:815
  bool tetrominoStop = false;// if the piece touch nother or the bottom sceen
  bool moveTetrominos = false;// once a line is complete allow remaining tetrominos to get down

  //fills all the tetrominos pos with 0.
  for ( uint8_t row = 0; row < 10; row++ ) {
    for ( uint8_t column = 0; column < 10; column++ ) {
    2db4:	8a 30       	cpi	r24, 0x0A	; 10
    2db6:	91 05       	cpc	r25, r1
    2db8:	a9 f7       	brne	.-22     	; 0x2da4 <main+0xb00>
    2dba:	21 50       	subi	r18, 0x01	; 1
    2dbc:	4c 5e       	subi	r20, 0xEC	; 236
    2dbe:	5f 4f       	sbci	r21, 0xFF	; 255
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:814
  bool tetrominoMoveLeft = true;
  bool tetrominoStop = false;// if the piece touch nother or the bottom sceen
  bool moveTetrominos = false;// once a line is complete allow remaining tetrominos to get down

  //fills all the tetrominos pos with 0.
  for ( uint8_t row = 0; row < 10; row++ ) {
    2dc0:	21 11       	cpse	r18, r1
    2dc2:	ee cf       	rjmp	.-36     	; 0x2da0 <main+0xafc>
    2dc4:	9e 01       	movw	r18, r28
    2dc6:	2f 5f       	subi	r18, 0xFF	; 255
    2dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dca:	69 01       	movw	r12, r18
    2dcc:	f1 2c       	mov	r15, r1
    2dce:	e1 2c       	mov	r14, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:822
    }
  }

  //creates the left and right walls
  for (uint8_t x = 0; x < 10; x++) {
    tetrominoInPos [x][0] = pgm_read_byte_near (wallLeft + x);
    2dd0:	f7 01       	movw	r30, r14
    2dd2:	ee 59       	subi	r30, 0x9E	; 158
    2dd4:	fd 4f       	sbci	r31, 0xFD	; 253
    2dd6:	84 91       	lpm	r24, Z
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	f6 01       	movw	r30, r12
    2ddc:	80 83       	st	Z, r24
    2dde:	91 83       	std	Z+1, r25	; 0x01
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:823
    tetrominoInPos [x][9] = pgm_read_byte_near (wallRight + x);
    2de0:	f7 01       	movw	r30, r14
    2de2:	e8 5a       	subi	r30, 0xA8	; 168
    2de4:	fd 4f       	sbci	r31, 0xFD	; 253
    2de6:	e4 91       	lpm	r30, Z
    2de8:	0e 2f       	mov	r16, r30
    2dea:	10 e0       	ldi	r17, 0x00	; 0
    2dec:	f6 01       	movw	r30, r12
    2dee:	02 8b       	std	Z+18, r16	; 0x12
    2df0:	13 8b       	std	Z+19, r17	; 0x13
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:824
    strip.setPixelColor(tetrominoInPos [x][0], 0, 0, 50);
    2df2:	22 e3       	ldi	r18, 0x32	; 50
    2df4:	40 e0       	ldi	r20, 0x00	; 0
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:825
    strip.setPixelColor(tetrominoInPos [x][9], 0, 0, 50);
    2dfc:	22 e3       	ldi	r18, 0x32	; 50
    2dfe:	40 e0       	ldi	r20, 0x00	; 0
    2e00:	60 e0       	ldi	r22, 0x00	; 0
    2e02:	c8 01       	movw	r24, r16
    2e04:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    2e08:	ff ef       	ldi	r31, 0xFF	; 255
    2e0a:	ef 1a       	sub	r14, r31
    2e0c:	ff 0a       	sbc	r15, r31
    2e0e:	24 e1       	ldi	r18, 0x14	; 20
    2e10:	c2 0e       	add	r12, r18
    2e12:	d1 1c       	adc	r13, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:821
      tetrominoInPos [row][column] = 0;
    }
  }

  //creates the left and right walls
  for (uint8_t x = 0; x < 10; x++) {
    2e14:	3a e0       	ldi	r19, 0x0A	; 10
    2e16:	e3 16       	cp	r14, r19
    2e18:	f1 04       	cpc	r15, r1
    2e1a:	d1 f6       	brne	.-76     	; 0x2dd0 <main+0xb2c>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:810
  int tetrominoLastPos = -6;
  int tetrominoPos = -6;
  bool tetris = false; // if a line is completed
  bool tetrominoMoveRight = true; // checks if moving is allowed
  bool tetrominoMoveLeft = true;
  bool tetrominoStop = false;// if the piece touch nother or the bottom sceen
    2e1c:	81 2c       	mov	r8, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:804
  uint16_t lastTetromino[1] = {tetromino1A};// Last tetromino used
  uint16_t tetrominoInPos [10][10]; // variable to compare if the screen position has a tetromino
  uint16_t tetrominoTimer = 0;// overal timer used todrive the game
  uint16_t ledTrisSpeed = 400;
  uint16_t actualLedTrisSpeed = 400;
  uint16_t ledTrisScore = 0;
    2e1e:	ce 52       	subi	r28, 0x2E	; 46
    2e20:	df 4f       	sbci	r29, 0xFF	; 255
    2e22:	18 82       	st	Y, r1
    2e24:	19 82       	std	Y+1, r1	; 0x01
    2e26:	c2 5d       	subi	r28, 0xD2	; 210
    2e28:	d0 40       	sbci	r29, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:803
  uint16_t actualTetromino[1] = {tetromino1A};// Load tetromino from "character.h"
  uint16_t lastTetromino[1] = {tetromino1A};// Last tetromino used
  uint16_t tetrominoInPos [10][10]; // variable to compare if the screen position has a tetromino
  uint16_t tetrominoTimer = 0;// overal timer used todrive the game
  uint16_t ledTrisSpeed = 400;
  uint16_t actualLedTrisSpeed = 400;
    2e2a:	80 e9       	ldi	r24, 0x90	; 144
    2e2c:	91 e0       	ldi	r25, 0x01	; 1
    2e2e:	c4 53       	subi	r28, 0x34	; 52
    2e30:	df 4f       	sbci	r29, 0xFF	; 255
    2e32:	88 83       	st	Y, r24
    2e34:	99 83       	std	Y+1, r25	; 0x01
    2e36:	cc 5c       	subi	r28, 0xCC	; 204
    2e38:	d0 40       	sbci	r29, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:805
  uint16_t ledTrisScore = 0;
  int tetrominoLastPos = -6;
    2e3a:	ba ef       	ldi	r27, 0xFA	; 250
    2e3c:	cb 2e       	mov	r12, r27
    2e3e:	dd 24       	eor	r13, r13
    2e40:	da 94       	dec	r13
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:806
  int tetrominoPos = -6;
    2e42:	1a ef       	ldi	r17, 0xFA	; 250
    2e44:	e1 2e       	mov	r14, r17
    2e46:	ff 24       	eor	r15, r15
    2e48:	fa 94       	dec	r15
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:802
  uint8_t ledtrisLives = 1;// if a tetromino cant`t go lower than row 2, is game over
  uint16_t actualTetromino[1] = {tetromino1A};// Load tetromino from "character.h"
  uint16_t lastTetromino[1] = {tetromino1A};// Last tetromino used
  uint16_t tetrominoInPos [10][10]; // variable to compare if the screen position has a tetromino
  uint16_t tetrominoTimer = 0;// overal timer used todrive the game
  uint16_t ledTrisSpeed = 400;
    2e4a:	e0 e9       	ldi	r30, 0x90	; 144
    2e4c:	f1 e0       	ldi	r31, 0x01	; 1
    2e4e:	c1 53       	subi	r28, 0x31	; 49
    2e50:	df 4f       	sbci	r29, 0xFF	; 255
    2e52:	e8 83       	st	Y, r30
    2e54:	f9 83       	std	Y+1, r31	; 0x01
    2e56:	cf 5c       	subi	r28, 0xCF	; 207
    2e58:	d0 40       	sbci	r29, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:801
  uint8_t randomTetromino = 0;
  uint8_t ledtrisLives = 1;// if a tetromino cant`t go lower than row 2, is game over
  uint16_t actualTetromino[1] = {tetromino1A};// Load tetromino from "character.h"
  uint16_t lastTetromino[1] = {tetromino1A};// Last tetromino used
  uint16_t tetrominoInPos [10][10]; // variable to compare if the screen position has a tetromino
  uint16_t tetrominoTimer = 0;// overal timer used todrive the game
    2e5a:	51 2c       	mov	r5, r1
    2e5c:	41 2c       	mov	r4, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:795
}

// Game LedTris code
void gameLedTris() {
  uint8_t tetrominoRotation;
  uint8_t tetrominoLastRotation = 0;
    2e5e:	91 2c       	mov	r9, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:796
  uint8_t randomTetromino = 0;
    2e60:	ca 52       	subi	r28, 0x2A	; 42
    2e62:	df 4f       	sbci	r29, 0xFF	; 255
    2e64:	18 82       	st	Y, r1
    2e66:	c6 5d       	subi	r28, 0xD6	; 214
    2e68:	d0 40       	sbci	r29, 0x00	; 0
    2e6a:	4f c1       	rjmp	.+670    	; 0x310a <main+0xe66>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:864

          if (tetrominoRotation != tetrominoLastRotation) {// only if rotation happen the tetromino is checked and positioned in a valid place

            if (!tetrominoMoveRight) {
              if ((pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos) == tetrominoInPos [row][column]) {
                tetrominoPos --;
    2e6c:	7a 01       	movw	r14, r20
    2e6e:	de c1       	rjmp	.+956    	; 0x322c <main+0xf88>
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:887
          }
        }
      }
    }

    if (ledtrisLives == 0) { //stops the while loop
    2e70:	cf 52       	subi	r28, 0x2F	; 47
    2e72:	df 4f       	sbci	r29, 0xFF	; 255
    2e74:	88 81       	ld	r24, Y
    2e76:	c1 5d       	subi	r28, 0xD1	; 209
    2e78:	d0 40       	sbci	r29, 0x00	; 0
    2e7a:	88 23       	and	r24, r24
    2e7c:	09 f4       	brne	.+2      	; 0x2e80 <main+0xbdc>
    2e7e:	58 c2       	rjmp	.+1200   	; 0x3330 <main+0x108c>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:892
      break;
    }

    //The tetromino3B looks odd if not moved one place when rotated
    if (tetrominoRotation != tetrominoLastRotation && actualTetromino[0] == tetromino3B && tetrominoMoveLeft) tetrominoPos--;
    2e80:	b9 14       	cp	r11, r9
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <main+0xbe2>
    2e84:	cf c4       	rjmp	.+2462   	; 0x3824 <main+0x1580>
    2e86:	94 e5       	ldi	r25, 0x54	; 84
    2e88:	29 16       	cp	r2, r25
    2e8a:	92 e0       	ldi	r25, 0x02	; 2
    2e8c:	39 06       	cpc	r3, r25
    2e8e:	09 f0       	breq	.+2      	; 0x2e92 <main+0xbee>
    2e90:	bc c4       	rjmp	.+2424   	; 0x380a <main+0x1566>
    2e92:	c2 53       	subi	r28, 0x32	; 50
    2e94:	df 4f       	sbci	r29, 0xFF	; 255
    2e96:	e8 81       	ld	r30, Y
    2e98:	ce 5c       	subi	r28, 0xCE	; 206
    2e9a:	d0 40       	sbci	r29, 0x00	; 0
    2e9c:	ee 23       	and	r30, r30
    2e9e:	19 f0       	breq	.+6      	; 0x2ea6 <main+0xc02>
    2ea0:	f1 e0       	ldi	r31, 0x01	; 1
    2ea2:	ef 1a       	sub	r14, r31
    2ea4:	f1 08       	sbc	r15, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:898

    if (tetrominoRotation != tetrominoLastRotation && actualTetromino[0] == tetromino3A && tetrominoMoveRight) tetrominoPos++;

    //Here it draws the screen
    if (tetrominoPos != tetrominoLastPos || tetrominoRotation != tetrominoLastRotation) {
      drawCharacter(tetrominoLastPos, lastTetromino[0], 0, 0, 0);
    2ea6:	00 e0       	ldi	r16, 0x00	; 0
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	40 e0       	ldi	r20, 0x00	; 0
    2eac:	cc 52       	subi	r28, 0x2C	; 44
    2eae:	df 4f       	sbci	r29, 0xFF	; 255
    2eb0:	68 81       	ld	r22, Y
    2eb2:	79 81       	ldd	r23, Y+1	; 0x01
    2eb4:	c4 5d       	subi	r28, 0xD4	; 212
    2eb6:	d0 40       	sbci	r29, 0x00	; 0
    2eb8:	8c 2d       	mov	r24, r12
    2eba:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:902
      tetrominoLastPos = tetrominoPos;
      tetrominoLastRotation = tetrominoRotation;
      lastTetromino[0] = actualTetromino[0];
      drawCharacter(tetrominoPos, actualTetromino[0], 0, 50, 0);
    2ebe:	22 e3       	ldi	r18, 0x32	; 50
    2ec0:	40 e0       	ldi	r20, 0x00	; 0
    2ec2:	b1 01       	movw	r22, r2
    2ec4:	8e 2d       	mov	r24, r14
    2ec6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:901
    //Here it draws the screen
    if (tetrominoPos != tetrominoLastPos || tetrominoRotation != tetrominoLastRotation) {
      drawCharacter(tetrominoLastPos, lastTetromino[0], 0, 0, 0);
      tetrominoLastPos = tetrominoPos;
      tetrominoLastRotation = tetrominoRotation;
      lastTetromino[0] = actualTetromino[0];
    2eca:	cc 52       	subi	r28, 0x2C	; 44
    2ecc:	df 4f       	sbci	r29, 0xFF	; 255
    2ece:	28 82       	st	Y, r2
    2ed0:	39 82       	std	Y+1, r3	; 0x01
    2ed2:	c4 5d       	subi	r28, 0xD4	; 212
    2ed4:	d0 40       	sbci	r29, 0x00	; 0
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:902
      drawCharacter(tetrominoPos, actualTetromino[0], 0, 50, 0);
    2ed6:	67 01       	movw	r12, r14
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:905
    }

    if (tetrominoStop) {//All calcultions done when a tetromino stops moving
    2ed8:	88 20       	and	r8, r8
    2eda:	09 f4       	brne	.+2      	; 0x2ede <main+0xc3a>
    2edc:	c7 c1       	rjmp	.+910    	; 0x326c <main+0xfc8>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:907

      if (RIGHTHIGH && LEFTHIGH || tetrominoTimer > 400) {//Some conditions have to be met before stoping so some time is given to last moment moves
    2ede:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2ee2:	81 ff       	sbrs	r24, 1
    2ee4:	04 c0       	rjmp	.+8      	; 0x2eee <main+0xc4a>
    2ee6:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    2eea:	82 fd       	sbrc	r24, 2
    2eec:	06 c0       	rjmp	.+12     	; 0x2efa <main+0xc56>
    2eee:	31 e9       	ldi	r19, 0x91	; 145
    2ef0:	43 16       	cp	r4, r19
    2ef2:	31 e0       	ldi	r19, 0x01	; 1
    2ef4:	53 06       	cpc	r5, r19
    2ef6:	08 f4       	brcc	.+2      	; 0x2efa <main+0xc56>
    2ef8:	b9 c1       	rjmp	.+882    	; 0x326c <main+0xfc8>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:908
        beep(50, 150);
    2efa:	66 e9       	ldi	r22, 0x96	; 150
    2efc:	70 e0       	ldi	r23, 0x00	; 0
    2efe:	82 e3       	ldi	r24, 0x32	; 50
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	0e 94 7f 05 	call	0xafe	; 0xafe <beep(int, int)>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:909
        for (uint8_t x = 1; x < pgm_read_byte_near (actualTetromino[0] + 0); x++) {// reads all tetromino leds position
    2f06:	cf 52       	subi	r28, 0x2F	; 47
    2f08:	df 4f       	sbci	r29, 0xFF	; 255
    2f0a:	18 81       	ld	r17, Y
    2f0c:	c1 5d       	subi	r28, 0xD1	; 209
    2f0e:	d0 40       	sbci	r29, 0x00	; 0
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:913
          uint8_t valueDecimal = (pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos) / 10 ;// takes the decimal of the position for example: from 91 takes the 9
          uint8_t valueUnits = pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos;// same as above but takes the units

          for (uint8_t y = 0; y < (valueDecimal * 10) ; y++) {// here actually get the units
    2f10:	0a e0       	ldi	r16, 0x0A	; 10
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:909

    if (tetrominoStop) {//All calcultions done when a tetromino stops moving

      if (RIGHTHIGH && LEFTHIGH || tetrominoTimer > 400) {//Some conditions have to be met before stoping so some time is given to last moment moves
        beep(50, 150);
        for (uint8_t x = 1; x < pgm_read_byte_near (actualTetromino[0] + 0); x++) {// reads all tetromino leds position
    2f12:	f1 01       	movw	r30, r2
    2f14:	84 91       	lpm	r24, Z
    2f16:	18 17       	cp	r17, r24
    2f18:	08 f0       	brcs	.+2      	; 0x2f1c <main+0xc78>
    2f1a:	35 c0       	rjmp	.+106    	; 0x2f86 <main+0xce2>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:910
          uint8_t valueDecimal = (pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos) / 10 ;// takes the decimal of the position for example: from 91 takes the 9
    2f1c:	e1 0f       	add	r30, r17
    2f1e:	f1 1d       	adc	r31, r1
    2f20:	84 91       	lpm	r24, Z
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:911
          uint8_t valueUnits = pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos;// same as above but takes the units
    2f22:	24 91       	lpm	r18, Z
    2f24:	2c 0d       	add	r18, r12
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:910
    if (tetrominoStop) {//All calcultions done when a tetromino stops moving

      if (RIGHTHIGH && LEFTHIGH || tetrominoTimer > 400) {//Some conditions have to be met before stoping so some time is given to last moment moves
        beep(50, 150);
        for (uint8_t x = 1; x < pgm_read_byte_near (actualTetromino[0] + 0); x++) {// reads all tetromino leds position
          uint8_t valueDecimal = (pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos) / 10 ;// takes the decimal of the position for example: from 91 takes the 9
    2f26:	8c 0d       	add	r24, r12
    2f28:	9d 2d       	mov	r25, r13
    2f2a:	91 1d       	adc	r25, r1
    2f2c:	6a e0       	ldi	r22, 0x0A	; 10
    2f2e:	70 e0       	ldi	r23, 0x00	; 0
    2f30:	d6 d5       	rcall	.+2988   	; 0x3ade <__divmodhi4>
    2f32:	77 27       	eor	r23, r23
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:913
          uint8_t valueUnits = pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos;// same as above but takes the units

          for (uint8_t y = 0; y < (valueDecimal * 10) ; y++) {// here actually get the units
    2f34:	06 9f       	mul	r16, r22
    2f36:	c0 01       	movw	r24, r0
    2f38:	07 9f       	mul	r16, r23
    2f3a:	90 0d       	add	r25, r0
    2f3c:	11 24       	eor	r1, r1
main():
    2f3e:	40 e0       	ldi	r20, 0x00	; 0
    2f40:	32 2f       	mov	r19, r18
    2f42:	34 1b       	sub	r19, r20
gameLedTris():
    2f44:	48 17       	cp	r20, r24
    2f46:	19 06       	cpc	r1, r25
    2f48:	14 f4       	brge	.+4      	; 0x2f4e <main+0xcaa>
    2f4a:	4f 5f       	subi	r20, 0xFF	; 255
    2f4c:	f9 cf       	rjmp	.-14     	; 0x2f40 <main+0xc9c>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:916
            valueUnits--;
          }
          tetrominoInPos [valueDecimal][valueUnits] = (pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos);// stores the tetromino position in an array to know the position cant`t be used
    2f4e:	84 91       	lpm	r24, Z
    2f50:	8c 0d       	add	r24, r12
    2f52:	9d 2d       	mov	r25, r13
    2f54:	91 1d       	adc	r25, r1
    2f56:	06 9f       	mul	r16, r22
    2f58:	f0 01       	movw	r30, r0
    2f5a:	07 9f       	mul	r16, r23
    2f5c:	f0 0d       	add	r31, r0
    2f5e:	11 24       	eor	r1, r1
    2f60:	e3 0f       	add	r30, r19
    2f62:	f1 1d       	adc	r31, r1
    2f64:	ee 0f       	add	r30, r30
    2f66:	ff 1f       	adc	r31, r31
    2f68:	21 e0       	ldi	r18, 0x01	; 1
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	2c 0f       	add	r18, r28
    2f6e:	3d 1f       	adc	r19, r29
    2f70:	e2 0f       	add	r30, r18
    2f72:	f3 1f       	adc	r31, r19
    2f74:	80 83       	st	Z, r24
    2f76:	91 83       	std	Z+1, r25	; 0x01
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:917
          strip.setPixelColor(tetrominoInPos [valueDecimal][valueUnits], 50, 0, 0);
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	40 e0       	ldi	r20, 0x00	; 0
    2f7c:	62 e3       	ldi	r22, 0x32	; 50
    2f7e:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:909

    if (tetrominoStop) {//All calcultions done when a tetromino stops moving

      if (RIGHTHIGH && LEFTHIGH || tetrominoTimer > 400) {//Some conditions have to be met before stoping so some time is given to last moment moves
        beep(50, 150);
        for (uint8_t x = 1; x < pgm_read_byte_near (actualTetromino[0] + 0); x++) {// reads all tetromino leds position
    2f82:	1f 5f       	subi	r17, 0xFF	; 255
    2f84:	c6 cf       	rjmp	.-116    	; 0x2f12 <main+0xc6e>
    2f86:	13 e0       	ldi	r17, 0x03	; 3
    2f88:	a1 2e       	mov	r10, r17
    2f8a:	7e 01       	movw	r14, r28
    2f8c:	35 eb       	ldi	r19, 0xB5	; 181
    2f8e:	e3 0e       	add	r14, r19
    2f90:	f1 1c       	adc	r15, r1
    2f92:	61 2c       	mov	r6, r1
    2f94:	87 01       	movw	r16, r14
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:924

        //If a line is complete the tetrominos above it are moved one space dow, the check is done 3 times because the tetrominos max height is 3 leds so the player can complete 3 lines at once
        for ( uint8_t repeatTetrisCheck = 0; repeatTetrisCheck < 3; repeatTetrisCheck++ ) {

          for ( uint8_t row = 9; row > 0; row-- ) {
            tetris = true;
    2f96:	98 2c       	mov	r9, r8
    2f98:	b8 e0       	ldi	r27, 0x08	; 8
    2f9a:	7b 2e       	mov	r7, r27
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:928

            for ( uint8_t column = 1; column < 9; column++ ) {

              if (moveTetrominos && tetrominoInPos [row][column] != 0) {
    2f9c:	66 20       	and	r6, r6
    2f9e:	01 f1       	breq	.+64     	; 0x2fe0 <main+0xd3c>
    2fa0:	f8 01       	movw	r30, r16
    2fa2:	82 81       	ldd	r24, Z+2	; 0x02
    2fa4:	93 81       	ldd	r25, Z+3	; 0x03
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	d9 f0       	breq	.+54     	; 0x2fe0 <main+0xd3c>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:929
                tetrominoInPos [(row + 1)][column] = (tetrominoInPos [row][column] + 10);
    2faa:	6c 01       	movw	r12, r24
    2fac:	fa e0       	ldi	r31, 0x0A	; 10
    2fae:	cf 0e       	add	r12, r31
    2fb0:	d1 1c       	adc	r13, r1
    2fb2:	f8 01       	movw	r30, r16
    2fb4:	c6 8a       	std	Z+22, r12	; 0x16
    2fb6:	d7 8a       	std	Z+23, r13	; 0x17
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:930
                strip.setPixelColor(tetrominoInPos [row][column], 0, 0, 0);
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	40 e0       	ldi	r20, 0x00	; 0
    2fbc:	60 e0       	ldi	r22, 0x00	; 0
    2fbe:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:931
                beep(80, 80);
    2fc2:	60 e5       	ldi	r22, 0x50	; 80
    2fc4:	70 e0       	ldi	r23, 0x00	; 0
    2fc6:	80 e5       	ldi	r24, 0x50	; 80
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	0e 94 7f 05 	call	0xafe	; 0xafe <beep(int, int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:932
                strip.setPixelColor(tetrominoInPos [(row + 1)][column], 0, 0, 50);
    2fce:	22 e3       	ldi	r18, 0x32	; 50
    2fd0:	40 e0       	ldi	r20, 0x00	; 0
    2fd2:	60 e0       	ldi	r22, 0x00	; 0
    2fd4:	c6 01       	movw	r24, r12
    2fd6:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:933
                tetrominoInPos [row][column] = 0;
    2fda:	f8 01       	movw	r30, r16
    2fdc:	12 82       	std	Z+2, r1	; 0x02
    2fde:	13 82       	std	Z+3, r1	; 0x03
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:935
              }
              if (tetrominoInPos [row][column] == 0)   tetris = false;// if there is nothig on the position it stops because the line isnt`t complete
    2fe0:	f8 01       	movw	r30, r16
    2fe2:	82 81       	ldd	r24, Z+2	; 0x02
    2fe4:	93 81       	ldd	r25, Z+3	; 0x03
    2fe6:	89 2b       	or	r24, r25
    2fe8:	09 f4       	brne	.+2      	; 0x2fec <main+0xd48>
main():
    2fea:	91 2c       	mov	r9, r1
    2fec:	7a 94       	dec	r7
    2fee:	0e 5f       	subi	r16, 0xFE	; 254
    2ff0:	1f 4f       	sbci	r17, 0xFF	; 255
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:926
        for ( uint8_t repeatTetrisCheck = 0; repeatTetrisCheck < 3; repeatTetrisCheck++ ) {

          for ( uint8_t row = 9; row > 0; row-- ) {
            tetris = true;

            for ( uint8_t column = 1; column < 9; column++ ) {
    2ff2:	71 10       	cpse	r7, r1
    2ff4:	d3 cf       	rjmp	.-90     	; 0x2f9c <main+0xcf8>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:938
                tetrominoInPos [row][column] = 0;
              }
              if (tetrominoInPos [row][column] == 0)   tetris = false;// if there is nothig on the position it stops because the line isnt`t complete
            }

            if (tetris) {
    2ff6:	99 20       	and	r9, r9
    2ff8:	c1 f1       	breq	.+112    	; 0x306a <main+0xdc6>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:941
              moveTetrominos = true;

              if (actualLedTrisSpeed > 200) actualLedTrisSpeed -= 10; // make game faster
    2ffa:	c4 53       	subi	r28, 0x34	; 52
    2ffc:	df 4f       	sbci	r29, 0xFF	; 255
    2ffe:	28 81       	ld	r18, Y
    3000:	39 81       	ldd	r19, Y+1	; 0x01
    3002:	cc 5c       	subi	r28, 0xCC	; 204
    3004:	d0 40       	sbci	r29, 0x00	; 0
    3006:	29 3c       	cpi	r18, 0xC9	; 201
    3008:	31 05       	cpc	r19, r1
    300a:	40 f0       	brcs	.+16     	; 0x301c <main+0xd78>
    300c:	2a 50       	subi	r18, 0x0A	; 10
    300e:	31 09       	sbc	r19, r1
    3010:	c4 53       	subi	r28, 0x34	; 52
    3012:	df 4f       	sbci	r29, 0xFF	; 255
    3014:	28 83       	st	Y, r18
    3016:	39 83       	std	Y+1, r19	; 0x01
    3018:	cc 5c       	subi	r28, 0xCC	; 204
    301a:	d0 40       	sbci	r29, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:944

              if (repeatTetrisCheck < 3) { // if 3 rows are completed, more points
                ledTrisScore ++;
    301c:	ce 52       	subi	r28, 0x2E	; 46
    301e:	df 4f       	sbci	r29, 0xFF	; 255
    3020:	88 81       	ld	r24, Y
    3022:	99 81       	ldd	r25, Y+1	; 0x01
    3024:	c2 5d       	subi	r28, 0xD2	; 210
    3026:	d0 40       	sbci	r29, 0x00	; 0
    3028:	01 96       	adiw	r24, 0x01	; 1
    302a:	ce 52       	subi	r28, 0x2E	; 46
    302c:	df 4f       	sbci	r29, 0xFF	; 255
    302e:	88 83       	st	Y, r24
    3030:	99 83       	std	Y+1, r25	; 0x01
    3032:	c2 5d       	subi	r28, 0xD2	; 210
    3034:	d0 40       	sbci	r29, 0x00	; 0
    3036:	87 01       	movw	r16, r14
    3038:	0e 5f       	subi	r16, 0xFE	; 254
    303a:	1f 4f       	sbci	r17, 0xFF	; 255
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:948
              } else {
                ledTrisScore += 4;
              }
              for ( uint8_t tetrisColumn = 1; tetrisColumn < 9; tetrisColumn++ ) {
    303c:	cf 52       	subi	r28, 0x2F	; 47
    303e:	df 4f       	sbci	r29, 0xFF	; 255
    3040:	d8 80       	ld	r13, Y
    3042:	c1 5d       	subi	r28, 0xD1	; 209
    3044:	d0 40       	sbci	r29, 0x00	; 0
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:949
                strip.setPixelColor(tetrominoInPos [row][tetrisColumn], 0, 0, 0);
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	40 e0       	ldi	r20, 0x00	; 0
    304a:	60 e0       	ldi	r22, 0x00	; 0
    304c:	f8 01       	movw	r30, r16
    304e:	81 91       	ld	r24, Z+
    3050:	91 91       	ld	r25, Z+
    3052:	8f 01       	movw	r16, r30
    3054:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:950
                tetrominoInPos [row][tetrisColumn] = 0;
    3058:	f8 01       	movw	r30, r16
    305a:	32 97       	sbiw	r30, 0x02	; 2
    305c:	10 82       	st	Z, r1
    305e:	11 82       	std	Z+1, r1	; 0x01
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:948
              if (repeatTetrisCheck < 3) { // if 3 rows are completed, more points
                ledTrisScore ++;
              } else {
                ledTrisScore += 4;
              }
              for ( uint8_t tetrisColumn = 1; tetrisColumn < 9; tetrisColumn++ ) {
    3060:	d3 94       	inc	r13
    3062:	f9 e0       	ldi	r31, 0x09	; 9
    3064:	df 12       	cpse	r13, r31
    3066:	ef cf       	rjmp	.-34     	; 0x3046 <main+0xda2>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:939
              }
              if (tetrominoInPos [row][column] == 0)   tetris = false;// if there is nothig on the position it stops because the line isnt`t complete
            }

            if (tetris) {
              moveTetrominos = true;
    3068:	69 2c       	mov	r6, r9
    306a:	24 e1       	ldi	r18, 0x14	; 20
    306c:	e2 1a       	sub	r14, r18
    306e:	f1 08       	sbc	r15, r1
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:923
        }

        //If a line is complete the tetrominos above it are moved one space dow, the check is done 3 times because the tetrominos max height is 3 leds so the player can complete 3 lines at once
        for ( uint8_t repeatTetrisCheck = 0; repeatTetrisCheck < 3; repeatTetrisCheck++ ) {

          for ( uint8_t row = 9; row > 0; row-- ) {
    3070:	c7 53       	subi	r28, 0x37	; 55
    3072:	df 4f       	sbci	r29, 0xFF	; 255
    3074:	88 81       	ld	r24, Y
    3076:	99 81       	ldd	r25, Y+1	; 0x01
    3078:	c9 5c       	subi	r28, 0xC9	; 201
    307a:	d0 40       	sbci	r29, 0x00	; 0
    307c:	e8 16       	cp	r14, r24
    307e:	f9 06       	cpc	r15, r25
    3080:	09 f0       	breq	.+2      	; 0x3084 <main+0xde0>
    3082:	88 cf       	rjmp	.-240    	; 0x2f94 <main+0xcf0>
    3084:	aa 94       	dec	r10
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:921
          tetrominoInPos [valueDecimal][valueUnits] = (pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos);// stores the tetromino position in an array to know the position cant`t be used
          strip.setPixelColor(tetrominoInPos [valueDecimal][valueUnits], 50, 0, 0);
        }

        //If a line is complete the tetrominos above it are moved one space dow, the check is done 3 times because the tetrominos max height is 3 leds so the player can complete 3 lines at once
        for ( uint8_t repeatTetrisCheck = 0; repeatTetrisCheck < 3; repeatTetrisCheck++ ) {
    3086:	a1 10       	cpse	r10, r1
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/WMath.cpp:38

long random(long howbig) {
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    3088:	80 cf       	rjmp	.-256    	; 0x2f8a <main+0xce6>
random():
    308a:	3b d4       	rcall	.+2166   	; 0x3902 <random>
    308c:	25 e0       	ldi	r18, 0x05	; 5
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	40 e0       	ldi	r20, 0x00	; 0
    3092:	50 e0       	ldi	r21, 0x00	; 0
    3094:	a7 d4       	rcall	.+2382   	; 0x39e4 <__divmodsi4>
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:960
          moveTetrominos = false;
        }

        // the new tetromino is generated and positioned
        tetrominoPos = -6;
        randomTetromino = random(5);
    3096:	ca 52       	subi	r28, 0x2A	; 42
    3098:	df 4f       	sbci	r29, 0xFF	; 255
    309a:	68 83       	st	Y, r22
    309c:	c6 5d       	subi	r28, 0xD6	; 214
    309e:	d0 40       	sbci	r29, 0x00	; 0
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:961
        tetrominoLastPos = tetrominoPos;
    30a0:	fa ef       	ldi	r31, 0xFA	; 250
    30a2:	cf 2e       	mov	r12, r31
    30a4:	dd 24       	eor	r13, r13
    30a6:	da 94       	dec	r13
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:959

          moveTetrominos = false;
        }

        // the new tetromino is generated and positioned
        tetrominoPos = -6;
    30a8:	aa ef       	ldi	r26, 0xFA	; 250
    30aa:	ea 2e       	mov	r14, r26
    30ac:	ff 24       	eor	r15, r15
    30ae:	fa 94       	dec	r15
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:980
      if (buttonDebounce(1, 0, 0, 120) && RIGHTHIGH && tetrominoMoveLeft)  tetrominoPos--;

      if (buttonDebounce(0, 1, 0, 120) && LEFTHIGH && tetrominoMoveRight) tetrominoPos++;
    }

    if (buttonDebounce(0, 0, 1, 200)) {//Pause menu
    30b0:	08 ec       	ldi	r16, 0xC8	; 200
    30b2:	10 e0       	ldi	r17, 0x00	; 0
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	41 e0       	ldi	r20, 0x01	; 1
    30ba:	60 e0       	ldi	r22, 0x00	; 0
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    30c2:	88 23       	and	r24, r24
    30c4:	09 f1       	breq	.+66     	; 0x3108 <main+0xe64>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:981
      gameMenu ();
    30c6:	0e 94 1c 08 	call	0x1038	; 0x1038 <gameMenu()>
    30ca:	8e 01       	movw	r16, r28
    30cc:	0f 5f       	subi	r16, 0xFF	; 255
    30ce:	1f 4f       	sbci	r17, 0xFF	; 255
    30d0:	ea e0       	ldi	r30, 0x0A	; 10
    30d2:	ae 2e       	mov	r10, r30
    30d4:	71 2c       	mov	r7, r1
    30d6:	61 2c       	mov	r6, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:984
      for ( uint8_t row = 0; row < 10; row++ ) {
        for ( uint8_t column = 0; column < 10; column++ ) {
          strip.setPixelColor (tetrominoInPos[row][column], 0, 0, 50);
    30d8:	f3 01       	movw	r30, r6
    30da:	ee 0f       	add	r30, r30
    30dc:	ff 1f       	adc	r31, r31
    30de:	e0 0f       	add	r30, r16
    30e0:	f1 1f       	adc	r31, r17
    30e2:	22 e3       	ldi	r18, 0x32	; 50
    30e4:	40 e0       	ldi	r20, 0x00	; 0
    30e6:	60 e0       	ldi	r22, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
    30ea:	91 81       	ldd	r25, Z+1	; 0x01
    30ec:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
    30f0:	2f ef       	ldi	r18, 0xFF	; 255
    30f2:	62 1a       	sub	r6, r18
    30f4:	72 0a       	sbc	r7, r18
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:983
    }

    if (buttonDebounce(0, 0, 1, 200)) {//Pause menu
      gameMenu ();
      for ( uint8_t row = 0; row < 10; row++ ) {
        for ( uint8_t column = 0; column < 10; column++ ) {
    30f6:	3a e0       	ldi	r19, 0x0A	; 10
    30f8:	63 16       	cp	r6, r19
    30fa:	71 04       	cpc	r7, r1
    30fc:	69 f7       	brne	.-38     	; 0x30d8 <main+0xe34>
    30fe:	aa 94       	dec	r10
    3100:	0c 5e       	subi	r16, 0xEC	; 236
    3102:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:982
      if (buttonDebounce(0, 1, 0, 120) && LEFTHIGH && tetrominoMoveRight) tetrominoPos++;
    }

    if (buttonDebounce(0, 0, 1, 200)) {//Pause menu
      gameMenu ();
      for ( uint8_t row = 0; row < 10; row++ ) {
    3104:	a1 10       	cpse	r10, r1
    3106:	e6 cf       	rjmp	.-52     	; 0x30d4 <main+0xe30>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:831
  }

  // Game code
  while (ledtrisLives > 0 && !endGame) {

    tetrominoRotation = encoder.encoderRead(0, 3, true, 1);
    3108:	9b 2c       	mov	r9, r11
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:829
    strip.setPixelColor(tetrominoInPos [x][0], 0, 0, 50);
    strip.setPixelColor(tetrominoInPos [x][9], 0, 0, 50);
  }

  // Game code
  while (ledtrisLives > 0 && !endGame) {
    310a:	80 91 77 3b 	lds	r24, 0x3B77	; 0x803b77 <endGame>
    310e:	81 11       	cpse	r24, r1
    3110:	0f c1       	rjmp	.+542    	; 0x3330 <main+0x108c>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:831

    tetrominoRotation = encoder.encoderRead(0, 3, true, 1);
    3112:	21 e0       	ldi	r18, 0x01	; 1
    3114:	41 e0       	ldi	r20, 0x01	; 1
    3116:	63 e0       	ldi	r22, 0x03	; 3
    3118:	0e 94 31 03 	call	0x662	; 0x662 <encoder::encoderRead(unsigned char, unsigned char, bool, unsigned char) [clone .constprop.7]>
    311c:	b8 2e       	mov	r11, r24
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:832
    actualTetromino[0] = tetromino [randomTetromino][tetrominoRotation];//here the actual plyer controlled tetromino is created
    311e:	ca 52       	subi	r28, 0x2A	; 42
    3120:	df 4f       	sbci	r29, 0xFF	; 255
    3122:	38 81       	ld	r19, Y
    3124:	c6 5d       	subi	r28, 0xD6	; 214
    3126:	d0 40       	sbci	r29, 0x00	; 0
    3128:	24 e0       	ldi	r18, 0x04	; 4
    312a:	32 9f       	mul	r19, r18
    312c:	f0 01       	movw	r30, r0
    312e:	11 24       	eor	r1, r1
    3130:	e8 0f       	add	r30, r24
    3132:	f1 1d       	adc	r31, r1
    3134:	ee 0f       	add	r30, r30
    3136:	ff 1f       	adc	r31, r31
    3138:	ec 5c       	subi	r30, 0xCC	; 204
    313a:	f4 44       	sbci	r31, 0x44	; 68
    313c:	20 80       	ld	r2, Z
    313e:	31 80       	ldd	r3, Z+1	; 0x01
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:834

    if (tetrominoRotation != tetrominoLastRotation && sound) beep(40, 40);
    3140:	89 15       	cp	r24, r9
    3142:	51 f0       	breq	.+20     	; 0x3158 <main+0xeb4>
    3144:	80 91 6f 3b 	lds	r24, 0x3B6F	; 0x803b6f <sound>
    3148:	88 23       	and	r24, r24
    314a:	31 f0       	breq	.+12     	; 0x3158 <main+0xeb4>
    314c:	68 e2       	ldi	r22, 0x28	; 40
    314e:	70 e0       	ldi	r23, 0x00	; 0
    3150:	88 e2       	ldi	r24, 0x28	; 40
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	0e 94 7f 05 	call	0xafe	; 0xafe <beep(int, int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:837

    // Advace time all the game speed is cotolled here
    if (interruptTimer) tetrominoTimer += interruptTimer;
    3158:	80 91 70 3b 	lds	r24, 0x3B70	; 0x803b70 <interruptTimer>
    315c:	88 23       	and	r24, r24
    315e:	21 f0       	breq	.+8      	; 0x3168 <main+0xec4>
    3160:	80 91 70 3b 	lds	r24, 0x3B70	; 0x803b70 <interruptTimer>
    3164:	48 0e       	add	r4, r24
    3166:	51 1c       	adc	r5, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:840

    //only move down the tetromino if there isn`t any obstacle
    if (tetrominoTimer >= ledTrisSpeed && tetrominoPos < 99 && !tetrominoStop) {
    3168:	c1 53       	subi	r28, 0x31	; 49
    316a:	df 4f       	sbci	r29, 0xFF	; 255
    316c:	88 81       	ld	r24, Y
    316e:	99 81       	ldd	r25, Y+1	; 0x01
    3170:	cf 5c       	subi	r28, 0xCF	; 207
    3172:	d0 40       	sbci	r29, 0x00	; 0
    3174:	48 16       	cp	r4, r24
    3176:	59 06       	cpc	r5, r25
    3178:	58 f0       	brcs	.+22     	; 0x3190 <main+0xeec>
    317a:	93 e6       	ldi	r25, 0x63	; 99
    317c:	e9 16       	cp	r14, r25
    317e:	f1 04       	cpc	r15, r1
    3180:	3c f4       	brge	.+14     	; 0x3190 <main+0xeec>
    3182:	81 10       	cpse	r8, r1
    3184:	05 c0       	rjmp	.+10     	; 0x3190 <main+0xeec>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:842
      tetrominoTimer = 0;
      tetrominoPos += 10;
    3186:	ea e0       	ldi	r30, 0x0A	; 10
    3188:	ee 0e       	add	r14, r30
    318a:	f1 1c       	adc	r15, r1
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:841
    // Advace time all the game speed is cotolled here
    if (interruptTimer) tetrominoTimer += interruptTimer;

    //only move down the tetromino if there isn`t any obstacle
    if (tetrominoTimer >= ledTrisSpeed && tetrominoPos < 99 && !tetrominoStop) {
      tetrominoTimer = 0;
    318c:	51 2c       	mov	r5, r1
    318e:	41 2c       	mov	r4, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:845
      tetrominoPos += 10;
    }
    //we asume that the tetromino can`t move
    tetrominoStop = false;
    3190:	81 2c       	mov	r8, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:847
    tetrominoMoveRight = true;
    tetrominoMoveLeft = true;
    3192:	c5 53       	subi	r28, 0x35	; 53
    3194:	df 4f       	sbci	r29, 0xFF	; 255
    3196:	f8 81       	ld	r31, Y
    3198:	cb 5c       	subi	r28, 0xCB	; 203
    319a:	d0 40       	sbci	r29, 0x00	; 0
    319c:	c2 53       	subi	r28, 0x32	; 50
    319e:	df 4f       	sbci	r29, 0xFF	; 255
    31a0:	f8 83       	st	Y, r31
    31a2:	ce 5c       	subi	r28, 0xCE	; 206
    31a4:	d0 40       	sbci	r29, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:846
      tetrominoTimer = 0;
      tetrominoPos += 10;
    }
    //we asume that the tetromino can`t move
    tetrominoStop = false;
    tetrominoMoveRight = true;
    31a6:	af 2e       	mov	r10, r31
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:850
    tetrominoMoveLeft = true;

    //All the math to allow or not the player to move the tetromino
    for (uint8_t x = 1; x < pgm_read_byte_near (actualTetromino[0] + 0); x++) {// reads all the leds forming the tetromino position
    31a8:	21 e0       	ldi	r18, 0x01	; 1
    31aa:	31 e0       	ldi	r19, 0x01	; 1
    31ac:	cf 52       	subi	r28, 0x2F	; 47
    31ae:	df 4f       	sbci	r29, 0xFF	; 255
    31b0:	38 83       	st	Y, r19
    31b2:	c1 5d       	subi	r28, 0xD1	; 209
    31b4:	d0 40       	sbci	r29, 0x00	; 0
gameLedTris():
    31b6:	f1 01       	movw	r30, r2
    31b8:	84 91       	lpm	r24, Z
    31ba:	28 17       	cp	r18, r24
    31bc:	08 f0       	brcs	.+2      	; 0x31c0 <main+0xf1c>
    31be:	58 ce       	rjmp	.-848    	; 0x2e70 <main+0xbcc>
    31c0:	8e 01       	movw	r16, r28
    31c2:	0f 5f       	subi	r16, 0xFF	; 255
    31c4:	1f 4f       	sbci	r17, 0xFF	; 255
    31c6:	3a e0       	ldi	r19, 0x0A	; 10
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:856

      for ( uint8_t row = 0; row < 10; row++ ) {
        for ( uint8_t column = 0; column < 10; column++ ) {

          // allow or not to move left and right
          if ((pgm_read_byte_near (actualTetromino[0] + x) + (tetrominoPos - 1)) == tetrominoInPos [row][column]) tetrominoMoveLeft = false;
    31c8:	e2 0f       	add	r30, r18
    31ca:	f1 1d       	adc	r31, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:850
    tetrominoStop = false;
    tetrominoMoveRight = true;
    tetrominoMoveLeft = true;

    //All the math to allow or not the player to move the tetromino
    for (uint8_t x = 1; x < pgm_read_byte_near (actualTetromino[0] + 0); x++) {// reads all the leds forming the tetromino position
    31cc:	71 2c       	mov	r7, r1
    31ce:	61 2c       	mov	r6, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:856

      for ( uint8_t row = 0; row < 10; row++ ) {
        for ( uint8_t column = 0; column < 10; column++ ) {

          // allow or not to move left and right
          if ((pgm_read_byte_near (actualTetromino[0] + x) + (tetrominoPos - 1)) == tetrominoInPos [row][column]) tetrominoMoveLeft = false;
    31d0:	64 91       	lpm	r22, Z
    31d2:	a7 01       	movw	r20, r14
    31d4:	41 50       	subi	r20, 0x01	; 1
    31d6:	51 09       	sbc	r21, r1
    31d8:	d3 01       	movw	r26, r6
    31da:	aa 0f       	add	r26, r26
    31dc:	bb 1f       	adc	r27, r27
    31de:	a0 0f       	add	r26, r16
    31e0:	b1 1f       	adc	r27, r17
    31e2:	8d 91       	ld	r24, X+
    31e4:	9c 91       	ld	r25, X
    31e6:	64 0f       	add	r22, r20
    31e8:	75 2f       	mov	r23, r21
    31ea:	71 1d       	adc	r23, r1
    31ec:	68 17       	cp	r22, r24
    31ee:	79 07       	cpc	r23, r25
    31f0:	29 f4       	brne	.+10     	; 0x31fc <main+0xf58>
main():
    31f2:	c2 53       	subi	r28, 0x32	; 50
    31f4:	df 4f       	sbci	r29, 0xFF	; 255
    31f6:	18 82       	st	Y, r1
    31f8:	ce 5c       	subi	r28, 0xCE	; 206
    31fa:	d0 40       	sbci	r29, 0x00	; 0
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:858

          if ((pgm_read_byte_near (actualTetromino[0] + x) + (tetrominoPos + 1)) == tetrominoInPos [row][column]) tetrominoMoveRight = false;
    31fc:	a4 91       	lpm	r26, Z
    31fe:	b7 01       	movw	r22, r14
    3200:	6f 5f       	subi	r22, 0xFF	; 255
    3202:	7f 4f       	sbci	r23, 0xFF	; 255
    3204:	6a 0f       	add	r22, r26
    3206:	71 1d       	adc	r23, r1
    3208:	86 17       	cp	r24, r22
    320a:	97 07       	cpc	r25, r23
    320c:	09 f4       	brne	.+2      	; 0x3210 <main+0xf6c>
    320e:	d7 c2       	rjmp	.+1454   	; 0x37be <main+0x151a>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:860

          if (tetrominoRotation != tetrominoLastRotation) {// only if rotation happen the tetromino is checked and positioned in a valid place
    3210:	b9 14       	cp	r11, r9
    3212:	09 f4       	brne	.+2      	; 0x3216 <main+0xf72>
    3214:	d7 c2       	rjmp	.+1454   	; 0x37c4 <main+0x1520>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:862

            if (!tetrominoMoveRight) {
    3216:	a1 10       	cpse	r10, r1
    3218:	09 c0       	rjmp	.+18     	; 0x322c <main+0xf88>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:863
              if ((pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos) == tetrominoInPos [row][column]) {
    321a:	64 91       	lpm	r22, Z
    321c:	6e 0d       	add	r22, r14
    321e:	7f 2d       	mov	r23, r15
    3220:	71 1d       	adc	r23, r1
    3222:	a1 2c       	mov	r10, r1
    3224:	86 17       	cp	r24, r22
    3226:	97 07       	cpc	r25, r23
    3228:	09 f4       	brne	.+2      	; 0x322c <main+0xf88>
    322a:	20 ce       	rjmp	.-960    	; 0x2e6c <main+0xbc8>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:868
                tetrominoPos --;
              }
            }

            if (!tetrominoMoveLeft) {
    322c:	c2 53       	subi	r28, 0x32	; 50
    322e:	df 4f       	sbci	r29, 0xFF	; 255
    3230:	48 81       	ld	r20, Y
    3232:	ce 5c       	subi	r28, 0xCE	; 206
    3234:	d0 40       	sbci	r29, 0x00	; 0
    3236:	41 11       	cpse	r20, r1
    3238:	0a c0       	rjmp	.+20     	; 0x324e <main+0xfaa>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:869
              if ((pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos) == tetrominoInPos [row][column]) tetrominoPos++;
    323a:	44 91       	lpm	r20, Z
    323c:	4e 0d       	add	r20, r14
    323e:	5f 2d       	mov	r21, r15
    3240:	51 1d       	adc	r21, r1
    3242:	84 17       	cp	r24, r20
    3244:	95 07       	cpc	r25, r21
    3246:	19 f4       	brne	.+6      	; 0x324e <main+0xfaa>
    3248:	8f ef       	ldi	r24, 0xFF	; 255
    324a:	e8 1a       	sub	r14, r24
    324c:	f8 0a       	sbc	r15, r24
    324e:	9f ef       	ldi	r25, 0xFF	; 255
    3250:	69 1a       	sub	r6, r25
    3252:	79 0a       	sbc	r7, r25
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:853

    //All the math to allow or not the player to move the tetromino
    for (uint8_t x = 1; x < pgm_read_byte_near (actualTetromino[0] + 0); x++) {// reads all the leds forming the tetromino position

      for ( uint8_t row = 0; row < 10; row++ ) {
        for ( uint8_t column = 0; column < 10; column++ ) {
    3254:	4a e0       	ldi	r20, 0x0A	; 10
    3256:	64 16       	cp	r6, r20
    3258:	71 04       	cpc	r7, r1
    325a:	09 f0       	breq	.+2      	; 0x325e <main+0xfba>
    325c:	b9 cf       	rjmp	.-142    	; 0x31d0 <main+0xf2c>
    325e:	31 50       	subi	r19, 0x01	; 1
    3260:	0c 5e       	subi	r16, 0xEC	; 236
    3262:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:852
    tetrominoMoveLeft = true;

    //All the math to allow or not the player to move the tetromino
    for (uint8_t x = 1; x < pgm_read_byte_near (actualTetromino[0] + 0); x++) {// reads all the leds forming the tetromino position

      for ( uint8_t row = 0; row < 10; row++ ) {
    3264:	31 11       	cpse	r19, r1
    3266:	b2 cf       	rjmp	.-156    	; 0x31cc <main+0xf28>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:850
    tetrominoStop = false;
    tetrominoMoveRight = true;
    tetrominoMoveLeft = true;

    //All the math to allow or not the player to move the tetromino
    for (uint8_t x = 1; x < pgm_read_byte_near (actualTetromino[0] + 0); x++) {// reads all the leds forming the tetromino position
    3268:	2f 5f       	subi	r18, 0xFF	; 255
    326a:	a5 cf       	rjmp	.-182    	; 0x31b6 <main+0xf12>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:967
        tetrominoLastRotation = tetrominoRotation;
      }
    }

    //Left or right moves
    if (tetrominoPos > 0) {
    326c:	76 01       	movw	r14, r12
    326e:	1c 14       	cp	r1, r12
    3270:	1d 04       	cpc	r1, r13
    3272:	0c f0       	brlt	.+2      	; 0x3276 <main+0xfd2>
    3274:	1d cf       	rjmp	.-454    	; 0x30b0 <main+0xe0c>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:969

      if (RIGHTLOW && LEFTLOW) {
    3276:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    327a:	81 fd       	sbrc	r24, 1
    327c:	41 c0       	rjmp	.+130    	; 0x3300 <main+0x105c>
    327e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    3282:	82 ff       	sbrs	r24, 2
    3284:	4a c0       	rjmp	.+148    	; 0x331a <main+0x1076>
    3286:	c4 53       	subi	r28, 0x34	; 52
    3288:	df 4f       	sbci	r29, 0xFF	; 255
    328a:	e8 81       	ld	r30, Y
    328c:	f9 81       	ldd	r31, Y+1	; 0x01
    328e:	cc 5c       	subi	r28, 0xCC	; 204
    3290:	d0 40       	sbci	r29, 0x00	; 0
    3292:	c1 53       	subi	r28, 0x31	; 49
    3294:	df 4f       	sbci	r29, 0xFF	; 255
    3296:	e8 83       	st	Y, r30
    3298:	f9 83       	std	Y+1, r31	; 0x01
    329a:	cf 5c       	subi	r28, 0xCF	; 207
    329c:	d0 40       	sbci	r29, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:975
        ledTrisSpeed = 60;
      } else {
        ledTrisSpeed = actualLedTrisSpeed;
      }

      if (buttonDebounce(1, 0, 0, 120) && RIGHTHIGH && tetrominoMoveLeft)  tetrominoPos--;
    329e:	08 e7       	ldi	r16, 0x78	; 120
    32a0:	10 e0       	ldi	r17, 0x00	; 0
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	40 e0       	ldi	r20, 0x00	; 0
    32a8:	60 e0       	ldi	r22, 0x00	; 0
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    32b0:	88 23       	and	r24, r24
    32b2:	e1 f1       	breq	.+120    	; 0x332c <main+0x1088>
    32b4:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    32b8:	81 ff       	sbrs	r24, 1
    32ba:	38 c0       	rjmp	.+112    	; 0x332c <main+0x1088>
    32bc:	c2 53       	subi	r28, 0x32	; 50
    32be:	df 4f       	sbci	r29, 0xFF	; 255
    32c0:	98 81       	ld	r25, Y
    32c2:	ce 5c       	subi	r28, 0xCE	; 206
    32c4:	d0 40       	sbci	r29, 0x00	; 0
    32c6:	76 01       	movw	r14, r12
    32c8:	99 23       	and	r25, r25
    32ca:	19 f0       	breq	.+6      	; 0x32d2 <main+0x102e>
    32cc:	e1 e0       	ldi	r30, 0x01	; 1
    32ce:	ee 1a       	sub	r14, r30
    32d0:	f1 08       	sbc	r15, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:977

      if (buttonDebounce(0, 1, 0, 120) && LEFTHIGH && tetrominoMoveRight) tetrominoPos++;
    32d2:	08 e7       	ldi	r16, 0x78	; 120
    32d4:	10 e0       	ldi	r17, 0x00	; 0
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	40 e0       	ldi	r20, 0x00	; 0
    32dc:	61 e0       	ldi	r22, 0x01	; 1
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    32e4:	88 23       	and	r24, r24
    32e6:	09 f4       	brne	.+2      	; 0x32ea <main+0x1046>
    32e8:	e3 ce       	rjmp	.-570    	; 0x30b0 <main+0xe0c>
    32ea:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <encoderDir+0x7f48ac>
    32ee:	82 ff       	sbrs	r24, 2
    32f0:	df ce       	rjmp	.-578    	; 0x30b0 <main+0xe0c>
    32f2:	aa 20       	and	r10, r10
    32f4:	09 f4       	brne	.+2      	; 0x32f8 <main+0x1054>
    32f6:	dc ce       	rjmp	.-584    	; 0x30b0 <main+0xe0c>
    32f8:	ff ef       	ldi	r31, 0xFF	; 255
    32fa:	ef 1a       	sub	r14, r31
    32fc:	ff 0a       	sbc	r15, r31
    32fe:	d8 ce       	rjmp	.-592    	; 0x30b0 <main+0xe0c>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:969
    }

    //Left or right moves
    if (tetrominoPos > 0) {

      if (RIGHTLOW && LEFTLOW) {
    3300:	c4 53       	subi	r28, 0x34	; 52
    3302:	df 4f       	sbci	r29, 0xFF	; 255
    3304:	28 81       	ld	r18, Y
    3306:	39 81       	ldd	r19, Y+1	; 0x01
    3308:	cc 5c       	subi	r28, 0xCC	; 204
    330a:	d0 40       	sbci	r29, 0x00	; 0
    330c:	c1 53       	subi	r28, 0x31	; 49
    330e:	df 4f       	sbci	r29, 0xFF	; 255
    3310:	28 83       	st	Y, r18
    3312:	39 83       	std	Y+1, r19	; 0x01
    3314:	cf 5c       	subi	r28, 0xCF	; 207
    3316:	d0 40       	sbci	r29, 0x00	; 0
    3318:	c2 cf       	rjmp	.-124    	; 0x329e <main+0xffa>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:970
        ledTrisSpeed = 60;
    331a:	8c e3       	ldi	r24, 0x3C	; 60
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	c1 53       	subi	r28, 0x31	; 49
    3320:	df 4f       	sbci	r29, 0xFF	; 255
    3322:	88 83       	st	Y, r24
    3324:	99 83       	std	Y+1, r25	; 0x01
    3326:	cf 5c       	subi	r28, 0xCF	; 207
    3328:	d0 40       	sbci	r29, 0x00	; 0
    332a:	b9 cf       	rjmp	.-142    	; 0x329e <main+0xffa>
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:975
      } else {
        ledTrisSpeed = actualLedTrisSpeed;
      }

      if (buttonDebounce(1, 0, 0, 120) && RIGHTHIGH && tetrominoMoveLeft)  tetrominoPos--;
    332c:	76 01       	movw	r14, r12
    332e:	d1 cf       	rjmp	.-94     	; 0x32d2 <main+0x102e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:990
        }
      }
    }
  }

  if (!endGame) {
    3330:	80 91 77 3b 	lds	r24, 0x3B77	; 0x803b77 <endGame>
    3334:	81 11       	cpse	r24, r1
    3336:	9b c0       	rjmp	.+310    	; 0x346e <main+0x11ca>
    3338:	03 e6       	ldi	r16, 0x63	; 99
    333a:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:992
    for (uint8_t x = 99; x > 0; x--) {// end screen animation
      strip.setPixelColor(x, 50, 0, 0);
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	40 e0       	ldi	r20, 0x00	; 0
    3340:	62 e3       	ldi	r22, 0x32	; 50
    3342:	c8 01       	movw	r24, r16
    3344:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
_delay_ms():
c:\users\gross\appdata\local\arduino15\packages\dxcore\tools\avr-gcc\7.3.0-atmel3.6.1-azduino6\avr\include\util/delay.h:187
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3348:	8f e0       	ldi	r24, 0x0F	; 15
    334a:	97 e2       	ldi	r25, 0x27	; 39
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	f1 f7       	brne	.-4      	; 0x334c <main+0x10a8>
    3350:	00 c0       	rjmp	.+0      	; 0x3352 <main+0x10ae>
    3352:	00 00       	nop
    3354:	01 50       	subi	r16, 0x01	; 1
    3356:	11 09       	sbc	r17, r1
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:991
      }
    }
  }

  if (!endGame) {
    for (uint8_t x = 99; x > 0; x--) {// end screen animation
    3358:	89 f7       	brne	.-30     	; 0x333c <main+0x1098>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:996
      strip.setPixelColor(x, 50, 0, 0);
      delay(5);
    }

    timer = millis();
    335a:	0e 94 a6 02 	call	0x54c	; 0x54c <millis>
    335e:	60 93 79 3b 	sts	0x3B79, r22	; 0x803b79 <timer>
    3362:	70 93 7a 3b 	sts	0x3B7A, r23	; 0x803b7a <timer+0x1>
    3366:	80 93 7b 3b 	sts	0x3B7B, r24	; 0x803b7b <timer+0x2>
    336a:	90 93 7c 3b 	sts	0x3B7C, r25	; 0x803b7c <timer+0x3>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:997
    strip.clear();
    336e:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
    3372:	ce 52       	subi	r28, 0x2E	; 46
    3374:	df 4f       	sbci	r29, 0xFF	; 255
    3376:	e8 80       	ld	r14, Y
    3378:	f9 80       	ldd	r15, Y+1	; 0x01
    337a:	c2 5d       	subi	r28, 0xD2	; 210
    337c:	d0 40       	sbci	r29, 0x00	; 0
    337e:	98 ee       	ldi	r25, 0xE8	; 232
    3380:	e9 16       	cp	r14, r25
    3382:	93 e0       	ldi	r25, 0x03	; 3
    3384:	f9 06       	cpc	r15, r25
    3386:	20 f0       	brcs	.+8      	; 0x3390 <main+0x10ec>
    3388:	67 ee       	ldi	r22, 0xE7	; 231
    338a:	e6 2e       	mov	r14, r22
    338c:	63 e0       	ldi	r22, 0x03	; 3
    338e:	f6 2e       	mov	r15, r22
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1001

    if (ledTrisScore > 999) ledTrisScore = 999;

    if (ledTrisScore > readScoreFromEEPROM(7)) {
    3390:	87 e0       	ldi	r24, 0x07	; 7
    3392:	0e 94 de 08 	call	0x11bc	; 0x11bc <readScoreFromEEPROM(unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1002
      drawCharacter(0, letterN, 100, 0, 0);
    3396:	00 e0       	ldi	r16, 0x00	; 0
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	44 e6       	ldi	r20, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1001
    timer = millis();
    strip.clear();

    if (ledTrisScore > 999) ledTrisScore = 999;

    if (ledTrisScore > readScoreFromEEPROM(7)) {
    339c:	8e 15       	cp	r24, r14
    339e:	9f 05       	cpc	r25, r15
    33a0:	08 f0       	brcs	.+2      	; 0x33a4 <main+0x1100>
    33a2:	7c c0       	rjmp	.+248    	; 0x349c <main+0x11f8>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1002
      drawCharacter(0, letterN, 100, 0, 0);
    33a4:	65 eb       	ldi	r22, 0xB5	; 181
    33a6:	72 e0       	ldi	r23, 0x02	; 2
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1003
      drawCharacter(3, letterE, 100, 0, 0);
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	44 e6       	ldi	r20, 0x64	; 100
    33b2:	69 ea       	ldi	r22, 0xA9	; 169
    33b4:	72 e0       	ldi	r23, 0x02	; 2
    33b6:	83 e0       	ldi	r24, 0x03	; 3
    33b8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1004
      drawCharacter(6, letterW, 100, 0, 0);
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	44 e6       	ldi	r20, 0x64	; 100
    33c0:	6d e9       	ldi	r22, 0x9D	; 157
    33c2:	72 e0       	ldi	r23, 0x02	; 2
    33c4:	86 e0       	ldi	r24, 0x06	; 6
    33c6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1005
      showScore(ledTrisScore);
    33ca:	c7 01       	movw	r24, r14
    33cc:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <showScore(unsigned int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1006
      writeScoreToEEPROM(7, ledTrisScore);
    33d0:	b7 01       	movw	r22, r14
    33d2:	87 e0       	ldi	r24, 0x07	; 7
    33d4:	0e 94 0a 08 	call	0x1014	; 0x1014 <writeScoreToEEPROM(unsigned char, unsigned int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1012
    } else {
      drawCharacter(0, letterH, 100, 0, 0);
      drawCharacter(3, letterI, 100, 0, 0);
      showScore(readScoreFromEEPROM(7));
    }
    while (!buttonDebounce(1, 1, 0, 100)) {
    33d8:	04 e6       	ldi	r16, 0x64	; 100
    33da:	10 e0       	ldi	r17, 0x00	; 0
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e0       	ldi	r20, 0x00	; 0
    33e2:	61 e0       	ldi	r22, 0x01	; 1
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    33ea:	81 11       	cpse	r24, r1
    33ec:	40 c0       	rjmp	.+128    	; 0x346e <main+0x11ca>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1014

      if (buttonDebounce(0, 0, 1, 2000)) {
    33ee:	00 ed       	ldi	r16, 0xD0	; 208
    33f0:	17 e0       	ldi	r17, 0x07	; 7
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	41 e0       	ldi	r20, 0x01	; 1
    33f8:	60 e0       	ldi	r22, 0x00	; 0
    33fa:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    33fe:	88 23       	and	r24, r24
    3400:	e9 f0       	breq	.+58     	; 0x343c <main+0x1198>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1015
        strip.clear();
    3402:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1016
        writeScoreToEEPROM(7, 0);
    3406:	70 e0       	ldi	r23, 0x00	; 0
    3408:	60 e0       	ldi	r22, 0x00	; 0
    340a:	87 e0       	ldi	r24, 0x07	; 7
    340c:	0e 94 0a 08 	call	0x1014	; 0x1014 <writeScoreToEEPROM(unsigned char, unsigned int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1017
        drawCharacter(0, letterC, 100, 0, 0);
    3410:	00 e0       	ldi	r16, 0x00	; 0
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	44 e6       	ldi	r20, 0x64	; 100
    3416:	64 e8       	ldi	r22, 0x84	; 132
    3418:	72 e0       	ldi	r23, 0x02	; 2
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1018
        drawCharacter(3, letterL, 100, 0, 0);
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	44 e6       	ldi	r20, 0x64	; 100
    3424:	6c e7       	ldi	r22, 0x7C	; 124
    3426:	72 e0       	ldi	r23, 0x02	; 2
    3428:	83 e0       	ldi	r24, 0x03	; 3
    342a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1019
        drawCharacter(6, letterR, 100, 0, 0);
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	44 e6       	ldi	r20, 0x64	; 100
    3432:	61 e7       	ldi	r22, 0x71	; 113
    3434:	72 e0       	ldi	r23, 0x02	; 2
    3436:	86 e0       	ldi	r24, 0x06	; 6
    3438:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1022
      }

      if ((millis() - timer) > 30000) {// if no button is pressed in 30sec ends game
    343c:	0e 94 a6 02 	call	0x54c	; 0x54c <millis>
    3440:	00 91 79 3b 	lds	r16, 0x3B79	; 0x803b79 <timer>
    3444:	10 91 7a 3b 	lds	r17, 0x3B7A	; 0x803b7a <timer+0x1>
    3448:	20 91 7b 3b 	lds	r18, 0x3B7B	; 0x803b7b <timer+0x2>
    344c:	30 91 7c 3b 	lds	r19, 0x3B7C	; 0x803b7c <timer+0x3>
    3450:	60 1b       	sub	r22, r16
    3452:	71 0b       	sbc	r23, r17
    3454:	82 0b       	sbc	r24, r18
    3456:	93 0b       	sbc	r25, r19
    3458:	61 33       	cpi	r22, 0x31	; 49
    345a:	75 47       	sbci	r23, 0x75	; 117
    345c:	81 05       	cpc	r24, r1
    345e:	91 05       	cpc	r25, r1
    3460:	08 f4       	brcc	.+2      	; 0x3464 <main+0x11c0>
    3462:	ba cf       	rjmp	.-140    	; 0x33d8 <main+0x1134>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1023
        contGame = false;
    3464:	10 92 1e 3a 	sts	0x3A1E, r1	; 0x803a1e <contGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1024
        endGame = true;
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	80 93 77 3b 	sts	0x3B77, r24	; 0x803b77 <endGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1029
        break;
      }
    }
  }
  strip.clear();
    346e:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1031

  if (contGame) {
    3472:	80 91 1e 3a 	lds	r24, 0x3A1E	; 0x803a1e <contGame>
    3476:	81 11       	cpse	r24, r1
    3478:	87 cc       	rjmp	.-1778   	; 0x2d88 <main+0xae4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1034
    gameLedTris();
  } else {
    contGame = true;
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	80 93 1e 3a 	sts	0x3A1E, r24	; 0x803a1e <contGame>
gameFlappyLed():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:787
    gameFlappyLed();
  } else {
    flappyLedscore = 0;
    contGame = true;
    strip.clear();
    timer = millis();
    3480:	0e 94 a6 02 	call	0x54c	; 0x54c <millis>
    3484:	60 93 79 3b 	sts	0x3B79, r22	; 0x803b79 <timer>
    3488:	70 93 7a 3b 	sts	0x3B7A, r23	; 0x803b7a <timer+0x1>
    348c:	80 93 7b 3b 	sts	0x3B7B, r24	; 0x803b7b <timer+0x2>
    3490:	90 93 7c 3b 	sts	0x3B7C, r25	; 0x803b7c <timer+0x3>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:788
    lastMinute = 60;
    3494:	8c e3       	ldi	r24, 0x3C	; 60
    3496:	80 93 1f 3a 	sts	0x3A1F, r24	; 0x803a1f <lastMinute>
    349a:	d4 c9       	rjmp	.-3160   	; 0x2844 <main+0x5a0>
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1008
      drawCharacter(3, letterE, 100, 0, 0);
      drawCharacter(6, letterW, 100, 0, 0);
      showScore(ledTrisScore);
      writeScoreToEEPROM(7, ledTrisScore);
    } else {
      drawCharacter(0, letterH, 100, 0, 0);
    349c:	61 e9       	ldi	r22, 0x91	; 145
    349e:	72 e0       	ldi	r23, 0x02	; 2
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1009
      drawCharacter(3, letterI, 100, 0, 0);
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	44 e6       	ldi	r20, 0x64	; 100
    34aa:	6c e8       	ldi	r22, 0x8C	; 140
    34ac:	72 e0       	ldi	r23, 0x02	; 2
    34ae:	83 e0       	ldi	r24, 0x03	; 3
    34b0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1010
      showScore(readScoreFromEEPROM(7));
    34b4:	87 e0       	ldi	r24, 0x07	; 7
    34b6:	0e 94 de 08 	call	0x11bc	; 0x11bc <readScoreFromEEPROM(unsigned char)>
    34ba:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <showScore(unsigned int)>
    34be:	8c cf       	rjmp	.-232    	; 0x33d8 <main+0x1134>
delay():
    34c0:	68 ee       	ldi	r22, 0xE8	; 232
    34c2:	73 e0       	ldi	r23, 0x03	; 3
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <delay.part.0>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:680
  uint8_t passage1;
  uint8_t passage2;
  uint16_t flappyLedTimer = 0;
  uint16_t wallTimer = 0;
  uint16_t gameSpeed = 1800;
  uint16_t flappyLedscore = 0;
    34cc:	d1 2c       	mov	r13, r1
    34ce:	c1 2c       	mov	r12, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:674
  uint8_t randomWall = 0;
  uint8_t flappyLedLives = 1;
  uint8_t flappyLedIput = 0;
  uint8_t flappyLedPos = 53;
  uint8_t lastflappyLedPos = 0;
  uint8_t wallPos = 9;
    34d0:	39 e0       	ldi	r19, 0x09	; 9
    34d2:	e3 2e       	mov	r14, r19
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:679
  uint8_t passage1;
  uint8_t passage2;
  uint16_t flappyLedTimer = 0;
  uint16_t wallTimer = 0;
  uint16_t gameSpeed = 1800;
    34d4:	48 e0       	ldi	r20, 0x08	; 8
    34d6:	64 2e       	mov	r6, r20
    34d8:	47 e0       	ldi	r20, 0x07	; 7
    34da:	74 2e       	mov	r7, r20
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:673
void gameFlappyLed() {
  uint8_t randomWall = 0;
  uint8_t flappyLedLives = 1;
  uint8_t flappyLedIput = 0;
  uint8_t flappyLedPos = 53;
  uint8_t lastflappyLedPos = 0;
    34dc:	21 2c       	mov	r2, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:672

void gameFlappyLed() {
  uint8_t randomWall = 0;
  uint8_t flappyLedLives = 1;
  uint8_t flappyLedIput = 0;
  uint8_t flappyLedPos = 53;
    34de:	55 e3       	ldi	r21, 0x35	; 53
    34e0:	f5 2e       	mov	r15, r21
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:678
  uint8_t lastflappyLedPos = 0;
  uint8_t wallPos = 9;
  uint8_t passage1;
  uint8_t passage2;
  uint16_t flappyLedTimer = 0;
  uint16_t wallTimer = 0;
    34e2:	b1 2c       	mov	r11, r1
    34e4:	a1 2c       	mov	r10, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:677
  uint8_t flappyLedPos = 53;
  uint8_t lastflappyLedPos = 0;
  uint8_t wallPos = 9;
  uint8_t passage1;
  uint8_t passage2;
  uint16_t flappyLedTimer = 0;
    34e6:	91 2c       	mov	r9, r1
    34e8:	81 2c       	mov	r8, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:669
}

//Game FlappyLed code

void gameFlappyLed() {
  uint8_t randomWall = 0;
    34ea:	41 2c       	mov	r4, r1
gameFlappyLed():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:686

  delay(1000);

  while (flappyLedLives != 0) {

    arrayNumberValue[0] = pgm_read_word_near(walls + randomWall);
    34ec:	e4 2d       	mov	r30, r4
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	ee 0f       	add	r30, r30
    34f2:	ff 1f       	adc	r31, r31
    34f4:	ef 53       	subi	r30, 0x3F	; 63
    34f6:	fd 4f       	sbci	r31, 0xFD	; 253
    34f8:	85 91       	lpm	r24, Z+
    34fa:	94 91       	lpm	r25, Z
    34fc:	80 93 71 3b 	sts	0x3B71, r24	; 0x803b71 <arrayNumberValue>
    3500:	90 93 72 3b 	sts	0x3B72, r25	; 0x803b72 <arrayNumberValue+0x1>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:688

    if (interruptTimer) {
    3504:	80 91 70 3b 	lds	r24, 0x3B70	; 0x803b70 <interruptTimer>
    3508:	88 23       	and	r24, r24
    350a:	41 f0       	breq	.+16     	; 0x351c <main+0x1278>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:689
      flappyLedTimer += interruptTimer;
    350c:	80 91 70 3b 	lds	r24, 0x3B70	; 0x803b70 <interruptTimer>
    3510:	88 0e       	add	r8, r24
    3512:	91 1c       	adc	r9, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:690
      wallTimer += interruptTimer;
    3514:	80 91 70 3b 	lds	r24, 0x3B70	; 0x803b70 <interruptTimer>
    3518:	a8 0e       	add	r10, r24
    351a:	b1 1c       	adc	r11, r1
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:693
    }

    if (flappyLedPos > 3 && buttonDebounce(1, 1, 0, 80)) {
    351c:	f3 e0       	ldi	r31, 0x03	; 3
    351e:	ff 15       	cp	r31, r15
    3520:	98 f4       	brcc	.+38     	; 0x3548 <main+0x12a4>
    3522:	00 e5       	ldi	r16, 0x50	; 80
    3524:	10 e0       	ldi	r17, 0x00	; 0
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	40 e0       	ldi	r20, 0x00	; 0
    352c:	61 e0       	ldi	r22, 0x01	; 1
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    3534:	88 23       	and	r24, r24
    3536:	41 f0       	breq	.+16     	; 0x3548 <main+0x12a4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:694
      flappyLedPos -= 10;
    3538:	26 ef       	ldi	r18, 0xF6	; 246
    353a:	f2 0e       	add	r15, r18
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:695
      beep(22, 22);
    353c:	66 e1       	ldi	r22, 0x16	; 22
    353e:	70 e0       	ldi	r23, 0x00	; 0
    3540:	86 e1       	ldi	r24, 0x16	; 22
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	0e 94 7f 05 	call	0xafe	; 0xafe <beep(int, int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:698
    }

    strip.setPixelColor(flappyLedPos, 0, 100, 0);
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	44 e6       	ldi	r20, 0x64	; 100
    354c:	60 e0       	ldi	r22, 0x00	; 0
    354e:	8f 2d       	mov	r24, r15
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:700

    if (flappyLedPos != lastflappyLedPos) {
    3556:	f2 14       	cp	r15, r2
    3558:	39 f0       	breq	.+14     	; 0x3568 <main+0x12c4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:701
      strip.setPixelColor(lastflappyLedPos, 0, 0, 0);
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	40 e0       	ldi	r20, 0x00	; 0
    355e:	60 e0       	ldi	r22, 0x00	; 0
    3560:	82 2d       	mov	r24, r2
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	0e 94 a0 01 	call	0x340	; 0x340 <tinyNeoPixel::setPixelColor(unsigned int, unsigned char, unsigned char, unsigned char) [clone .constprop.15]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:705
    }
    lastflappyLedPos = flappyLedPos;

    if (flappyLedTimer >= 3000 && flappyLedPos < 93) {
    3568:	38 eb       	ldi	r19, 0xB8	; 184
    356a:	83 16       	cp	r8, r19
    356c:	3b e0       	ldi	r19, 0x0B	; 11
    356e:	93 06       	cpc	r9, r19
    3570:	08 f4       	brcc	.+2      	; 0x3574 <main+0x12d0>
    3572:	fa c0       	rjmp	.+500    	; 0x3768 <main+0x14c4>
    3574:	4c e5       	ldi	r20, 0x5C	; 92
    3576:	4f 15       	cp	r20, r15
    3578:	08 f4       	brcc	.+2      	; 0x357c <main+0x12d8>
    357a:	f6 c0       	rjmp	.+492    	; 0x3768 <main+0x14c4>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:707
      flappyLedTimer = 0;
      flappyLedPos += 10;
    357c:	9a e0       	ldi	r25, 0x0A	; 10
    357e:	59 2e       	mov	r5, r25
    3580:	5f 0c       	add	r5, r15
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:706
      strip.setPixelColor(lastflappyLedPos, 0, 0, 0);
    }
    lastflappyLedPos = flappyLedPos;

    if (flappyLedTimer >= 3000 && flappyLedPos < 93) {
      flappyLedTimer = 0;
    3582:	91 2c       	mov	r9, r1
    3584:	81 2c       	mov	r8, r1
gameFlappyLed():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:710
      flappyLedPos += 10;
    }

    if (wallTimer > gameSpeed && wallPos >= 0) {
    3586:	6a 14       	cp	r6, r10
    3588:	7b 04       	cpc	r7, r11
    358a:	80 f5       	brcc	.+96     	; 0x35ec <main+0x1348>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:712
      wallTimer = 0;
      drawCharacter(wallPos, arrayNumberValue[0], 100, 0, 0);
    358c:	a0 90 71 3b 	lds	r10, 0x3B71	; 0x803b71 <arrayNumberValue>
    3590:	b0 90 72 3b 	lds	r11, 0x3B72	; 0x803b72 <arrayNumberValue+0x1>
    3594:	00 e0       	ldi	r16, 0x00	; 0
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	44 e6       	ldi	r20, 0x64	; 100
    359a:	b5 01       	movw	r22, r10
    359c:	8e 2d       	mov	r24, r14
    359e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:713
      if (wallPos < 9) {
    35a2:	89 e0       	ldi	r24, 0x09	; 9
    35a4:	e8 16       	cp	r14, r24
    35a6:	09 f4       	brne	.+2      	; 0x35aa <main+0x1306>
    35a8:	e1 c0       	rjmp	.+450    	; 0x376c <main+0x14c8>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:714
        drawCharacter((wallPos + 1), arrayNumberValue[0], 0, 0, 0);
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	b5 01       	movw	r22, r10
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	8e 0d       	add	r24, r14
    35b4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:716
      }
      if (wallPos == 0) {
    35b8:	e1 10       	cpse	r14, r1
    35ba:	d8 c0       	rjmp	.+432    	; 0x376c <main+0x14c8>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:718
        wallPos = 9;
        drawCharacter(0, arrayNumberValue[0], 0, 0, 0);
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	40 e0       	ldi	r20, 0x00	; 0
    35c0:	b5 01       	movw	r22, r10
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
random():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\cores\megatinycore/WMath.cpp:38
    35c8:	9c d1       	rcall	.+824    	; 0x3902 <random>
    35ca:	25 e0       	ldi	r18, 0x05	; 5
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	40 e0       	ldi	r20, 0x00	; 0
    35d0:	50 e0       	ldi	r21, 0x00	; 0
    35d2:	08 d2       	rcall	.+1040   	; 0x39e4 <__divmodsi4>
gameFlappyLed():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:719
        randomWall = random(0 , 5);
    35d4:	46 2e       	mov	r4, r22
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:717
      drawCharacter(wallPos, arrayNumberValue[0], 100, 0, 0);
      if (wallPos < 9) {
        drawCharacter((wallPos + 1), arrayNumberValue[0], 0, 0, 0);
      }
      if (wallPos == 0) {
        wallPos = 9;
    35d6:	89 e0       	ldi	r24, 0x09	; 9
    35d8:	e8 2e       	mov	r14, r24
gameFlappyLed():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:729
          if (flappyLedscore <= 999) {
            flappyLedscore += 2;
          }
        }
      }
      if (gameSpeed > 120) gameSpeed--;
    35da:	29 e7       	ldi	r18, 0x79	; 121
    35dc:	62 16       	cp	r6, r18
    35de:	71 04       	cpc	r7, r1
    35e0:	18 f0       	brcs	.+6      	; 0x35e8 <main+0x1344>
    35e2:	31 e0       	ldi	r19, 0x01	; 1
    35e4:	63 1a       	sub	r6, r19
    35e6:	71 08       	sbc	r7, r1
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:711
      flappyLedTimer = 0;
      flappyLedPos += 10;
    }

    if (wallTimer > gameSpeed && wallPos >= 0) {
      wallTimer = 0;
    35e8:	b1 2c       	mov	r11, r1
    35ea:	a1 2c       	mov	r10, r1
gameFlappyLed():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:732
        }
      }
      if (gameSpeed > 120) gameSpeed--;
    }

    passage1 = pgm_read_byte_near (arrayNumberValue[0] + 9);
    35ec:	80 91 71 3b 	lds	r24, 0x3B71	; 0x803b71 <arrayNumberValue>
    35f0:	90 91 72 3b 	lds	r25, 0x3B72	; 0x803b72 <arrayNumberValue+0x1>
    35f4:	fc 01       	movw	r30, r24
    35f6:	39 96       	adiw	r30, 0x09	; 9
    35f8:	24 91       	lpm	r18, Z
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:733
    passage2 = pgm_read_byte_near (arrayNumberValue[0] + 10);
    35fa:	31 96       	adiw	r30, 0x01	; 1
    35fc:	e4 91       	lpm	r30, Z
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:735

    if (wallPos == 3 && (flappyLedPos < passage1 || flappyLedPos > (passage2 + 14))) {
    35fe:	43 e0       	ldi	r20, 0x03	; 3
    3600:	e4 12       	cpse	r14, r20
    3602:	c2 c0       	rjmp	.+388    	; 0x3788 <main+0x14e4>
    3604:	52 16       	cp	r5, r18
    3606:	38 f0       	brcs	.+14     	; 0x3616 <main+0x1372>
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	3e 96       	adiw	r30, 0x0e	; 14
    360c:	5e 16       	cp	r5, r30
    360e:	1f 06       	cpc	r1, r31
    3610:	09 f0       	breq	.+2      	; 0x3614 <main+0x1370>
    3612:	0c f4       	brge	.+2      	; 0x3616 <main+0x1372>
    3614:	b9 c0       	rjmp	.+370    	; 0x3788 <main+0x14e4>
    3616:	10 e0       	ldi	r17, 0x00	; 0
    3618:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:738
      flappyLedLives = 0;
      for (uint16_t x = 0; x < 600; x += 100) {// game music
        beep(200, x);
    361a:	b8 01       	movw	r22, r16
    361c:	88 ec       	ldi	r24, 0xC8	; 200
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	0e 94 7f 05 	call	0xafe	; 0xafe <beep(int, int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:737
    passage1 = pgm_read_byte_near (arrayNumberValue[0] + 9);
    passage2 = pgm_read_byte_near (arrayNumberValue[0] + 10);

    if (wallPos == 3 && (flappyLedPos < passage1 || flappyLedPos > (passage2 + 14))) {
      flappyLedLives = 0;
      for (uint16_t x = 0; x < 600; x += 100) {// game music
    3624:	0c 59       	subi	r16, 0x9C	; 156
    3626:	1f 4f       	sbci	r17, 0xFF	; 255
    3628:	08 35       	cpi	r16, 0x58	; 88
    362a:	82 e0       	ldi	r24, 0x02	; 2
    362c:	18 07       	cpc	r17, r24
    362e:	a9 f7       	brne	.-22     	; 0x361a <main+0x1376>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:736

    passage1 = pgm_read_byte_near (arrayNumberValue[0] + 9);
    passage2 = pgm_read_byte_near (arrayNumberValue[0] + 10);

    if (wallPos == 3 && (flappyLedPos < passage1 || flappyLedPos > (passage2 + 14))) {
      flappyLedLives = 0;
    3630:	31 2c       	mov	r3, r1
gameFlappyLed():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:742
      for (uint16_t x = 0; x < 600; x += 100) {// game music
        beep(200, x);
      }
    }

    if (buttonDebounce(0, 0, 1, 200)) gameMenu ();//Pause menu
    3632:	08 ec       	ldi	r16, 0xC8	; 200
    3634:	10 e0       	ldi	r17, 0x00	; 0
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	41 e0       	ldi	r20, 0x01	; 1
    363c:	60 e0       	ldi	r22, 0x00	; 0
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    3644:	81 11       	cpse	r24, r1
    3646:	0e 94 1c 08 	call	0x1038	; 0x1038 <gameMenu()>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:744

    if (endGame) break;
    364a:	10 91 77 3b 	lds	r17, 0x3B77	; 0x803b77 <endGame>
    364e:	11 23       	and	r17, r17
    3650:	09 f4       	brne	.+2      	; 0x3654 <main+0x13b0>
    3652:	84 c0       	rjmp	.+264    	; 0x375c <main+0x14b8>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:746
  }
  timer = millis();
    3654:	0e 94 a6 02 	call	0x54c	; 0x54c <millis>
    3658:	60 93 79 3b 	sts	0x3B79, r22	; 0x803b79 <timer>
    365c:	70 93 7a 3b 	sts	0x3B7A, r23	; 0x803b7a <timer+0x1>
    3660:	80 93 7b 3b 	sts	0x3B7B, r24	; 0x803b7b <timer+0x2>
    3664:	90 93 7c 3b 	sts	0x3B7C, r25	; 0x803b7c <timer+0x3>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:747
  strip.clear();
    3668:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:749

  if (!endGame) {
    366c:	11 11       	cpse	r17, r1
    366e:	6f c0       	rjmp	.+222    	; 0x374e <main+0x14aa>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:751

    if (flappyLedscore > readScoreFromEEPROM(9)) {
    3670:	89 e0       	ldi	r24, 0x09	; 9
    3672:	0e 94 de 08 	call	0x11bc	; 0x11bc <readScoreFromEEPROM(unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:752
      drawCharacter(0, letterN, 100, 0, 0);
    3676:	00 e0       	ldi	r16, 0x00	; 0
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	44 e6       	ldi	r20, 0x64	; 100
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:751
  timer = millis();
  strip.clear();

  if (!endGame) {

    if (flappyLedscore > readScoreFromEEPROM(9)) {
    367c:	8c 15       	cp	r24, r12
    367e:	9d 05       	cpc	r25, r13
    3680:	08 f0       	brcs	.+2      	; 0x3684 <main+0x13e0>
    3682:	85 c0       	rjmp	.+266    	; 0x378e <main+0x14ea>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:752
      drawCharacter(0, letterN, 100, 0, 0);
    3684:	65 eb       	ldi	r22, 0xB5	; 181
    3686:	72 e0       	ldi	r23, 0x02	; 2
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:753
      drawCharacter(3, letterE, 100, 0, 0);
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	44 e6       	ldi	r20, 0x64	; 100
    3692:	69 ea       	ldi	r22, 0xA9	; 169
    3694:	72 e0       	ldi	r23, 0x02	; 2
    3696:	83 e0       	ldi	r24, 0x03	; 3
    3698:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:754
      drawCharacter(6, letterW, 100, 0, 0);
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	44 e6       	ldi	r20, 0x64	; 100
    36a0:	6d e9       	ldi	r22, 0x9D	; 157
    36a2:	72 e0       	ldi	r23, 0x02	; 2
    36a4:	86 e0       	ldi	r24, 0x06	; 6
    36a6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:755
      showScore(flappyLedscore);
    36aa:	c6 01       	movw	r24, r12
    36ac:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <showScore(unsigned int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:756
      writeScoreToEEPROM(9, flappyLedscore);
    36b0:	b6 01       	movw	r22, r12
    36b2:	89 e0       	ldi	r24, 0x09	; 9
    36b4:	0e 94 0a 08 	call	0x1014	; 0x1014 <writeScoreToEEPROM(unsigned char, unsigned int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:762
    } else {
      drawCharacter(0, letterH, 100, 0, 0);
      drawCharacter(3, letterI, 100, 0, 0);
      showScore(readScoreFromEEPROM(9));
    }
    while (!buttonDebounce(1, 1, 0, 100)) {
    36b8:	04 e6       	ldi	r16, 0x64	; 100
    36ba:	10 e0       	ldi	r17, 0x00	; 0
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	40 e0       	ldi	r20, 0x00	; 0
    36c2:	61 e0       	ldi	r22, 0x01	; 1
    36c4:	81 e0       	ldi	r24, 0x01	; 1
    36c6:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    36ca:	81 11       	cpse	r24, r1
    36cc:	40 c0       	rjmp	.+128    	; 0x374e <main+0x14aa>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:764

      if (buttonDebounce(0, 0, 1, 2000)) {
    36ce:	00 ed       	ldi	r16, 0xD0	; 208
    36d0:	17 e0       	ldi	r17, 0x07	; 7
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	41 e0       	ldi	r20, 0x01	; 1
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	0e 94 b5 04 	call	0x96a	; 0x96a <buttonDebounce(bool, bool, bool, unsigned long)>
    36de:	88 23       	and	r24, r24
    36e0:	e9 f0       	breq	.+58     	; 0x371c <main+0x1478>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:765
        strip.clear();
    36e2:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:766
        writeScoreToEEPROM(9, 0);
    36e6:	70 e0       	ldi	r23, 0x00	; 0
    36e8:	60 e0       	ldi	r22, 0x00	; 0
    36ea:	89 e0       	ldi	r24, 0x09	; 9
    36ec:	0e 94 0a 08 	call	0x1014	; 0x1014 <writeScoreToEEPROM(unsigned char, unsigned int)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:767
        drawCharacter(0, letterC, 100, 0, 0);
    36f0:	00 e0       	ldi	r16, 0x00	; 0
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	44 e6       	ldi	r20, 0x64	; 100
    36f6:	64 e8       	ldi	r22, 0x84	; 132
    36f8:	72 e0       	ldi	r23, 0x02	; 2
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:768
        drawCharacter(3, letterL, 100, 0, 0);
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	44 e6       	ldi	r20, 0x64	; 100
    3704:	6c e7       	ldi	r22, 0x7C	; 124
    3706:	72 e0       	ldi	r23, 0x02	; 2
    3708:	83 e0       	ldi	r24, 0x03	; 3
    370a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:769
        drawCharacter(6, letterR, 100, 0, 0);
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	44 e6       	ldi	r20, 0x64	; 100
    3712:	61 e7       	ldi	r22, 0x71	; 113
    3714:	72 e0       	ldi	r23, 0x02	; 2
    3716:	86 e0       	ldi	r24, 0x06	; 6
    3718:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:772
      }

      if ((millis() - timer) > 30000) {// if no button is pressed in 30sec ends game
    371c:	0e 94 a6 02 	call	0x54c	; 0x54c <millis>
    3720:	00 91 79 3b 	lds	r16, 0x3B79	; 0x803b79 <timer>
    3724:	10 91 7a 3b 	lds	r17, 0x3B7A	; 0x803b7a <timer+0x1>
    3728:	20 91 7b 3b 	lds	r18, 0x3B7B	; 0x803b7b <timer+0x2>
    372c:	30 91 7c 3b 	lds	r19, 0x3B7C	; 0x803b7c <timer+0x3>
    3730:	60 1b       	sub	r22, r16
    3732:	71 0b       	sbc	r23, r17
    3734:	82 0b       	sbc	r24, r18
    3736:	93 0b       	sbc	r25, r19
    3738:	61 33       	cpi	r22, 0x31	; 49
    373a:	75 47       	sbci	r23, 0x75	; 117
    373c:	81 05       	cpc	r24, r1
    373e:	91 05       	cpc	r25, r1
    3740:	08 f4       	brcc	.+2      	; 0x3744 <main+0x14a0>
    3742:	ba cf       	rjmp	.-140    	; 0x36b8 <main+0x1414>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:773
        contGame = false;
    3744:	10 92 1e 3a 	sts	0x3A1E, r1	; 0x803a1e <contGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:774
        endGame = true;
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	80 93 77 3b 	sts	0x3B77, r24	; 0x803b77 <endGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:780
        break;
      }
    }
  }

  if (contGame) {
    374e:	80 91 1e 3a 	lds	r24, 0x3A1E	; 0x803a1e <contGame>
    3752:	88 23       	and	r24, r24
    3754:	71 f1       	breq	.+92     	; 0x37b2 <main+0x150e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:781
    strip.clear();
    3756:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
    375a:	b2 ce       	rjmp	.-668    	; 0x34c0 <main+0x121c>
    375c:	2f 2c       	mov	r2, r15
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:684
  uint16_t gameSpeed = 1800;
  uint16_t flappyLedscore = 0;

  delay(1000);

  while (flappyLedLives != 0) {
    375e:	33 20       	and	r3, r3
    3760:	09 f4       	brne	.+2      	; 0x3764 <main+0x14c0>
    3762:	78 cf       	rjmp	.-272    	; 0x3654 <main+0x13b0>
    3764:	f5 2c       	mov	r15, r5
    3766:	c2 ce       	rjmp	.-636    	; 0x34ec <main+0x1248>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:705
    if (flappyLedPos != lastflappyLedPos) {
      strip.setPixelColor(lastflappyLedPos, 0, 0, 0);
    }
    lastflappyLedPos = flappyLedPos;

    if (flappyLedTimer >= 3000 && flappyLedPos < 93) {
    3768:	5f 2c       	mov	r5, r15
    376a:	0d cf       	rjmp	.-486    	; 0x3586 <main+0x12e2>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:721
      if (wallPos == 0) {
        wallPos = 9;
        drawCharacter(0, arrayNumberValue[0], 0, 0, 0);
        randomWall = random(0 , 5);
      } else {
        wallPos --;
    376c:	ea 94       	dec	r14
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:723

        if (wallPos == 2) {
    376e:	92 e0       	ldi	r25, 0x02	; 2
    3770:	e9 12       	cpse	r14, r25
    3772:	33 cf       	rjmp	.-410    	; 0x35da <main+0x1336>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:724
          if (flappyLedscore <= 999) {
    3774:	e8 ee       	ldi	r30, 0xE8	; 232
    3776:	ce 16       	cp	r12, r30
    3778:	e3 e0       	ldi	r30, 0x03	; 3
    377a:	de 06       	cpc	r13, r30
    377c:	08 f0       	brcs	.+2      	; 0x3780 <main+0x14dc>
    377e:	2d cf       	rjmp	.-422    	; 0x35da <main+0x1336>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:725
            flappyLedscore += 2;
    3780:	f2 e0       	ldi	r31, 0x02	; 2
    3782:	cf 0e       	add	r12, r31
    3784:	d1 1c       	adc	r13, r1
    3786:	29 cf       	rjmp	.-430    	; 0x35da <main+0x1336>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:735
    }

    passage1 = pgm_read_byte_near (arrayNumberValue[0] + 9);
    passage2 = pgm_read_byte_near (arrayNumberValue[0] + 10);

    if (wallPos == 3 && (flappyLedPos < passage1 || flappyLedPos > (passage2 + 14))) {
    3788:	33 24       	eor	r3, r3
    378a:	33 94       	inc	r3
    378c:	52 cf       	rjmp	.-348    	; 0x3632 <main+0x138e>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:758
      drawCharacter(3, letterE, 100, 0, 0);
      drawCharacter(6, letterW, 100, 0, 0);
      showScore(flappyLedscore);
      writeScoreToEEPROM(9, flappyLedscore);
    } else {
      drawCharacter(0, letterH, 100, 0, 0);
    378e:	61 e9       	ldi	r22, 0x91	; 145
    3790:	72 e0       	ldi	r23, 0x02	; 2
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:759
      drawCharacter(3, letterI, 100, 0, 0);
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	44 e6       	ldi	r20, 0x64	; 100
    379c:	6c e8       	ldi	r22, 0x8C	; 140
    379e:	72 e0       	ldi	r23, 0x02	; 2
    37a0:	83 e0       	ldi	r24, 0x03	; 3
    37a2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <drawCharacter(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:760
      showScore(readScoreFromEEPROM(9));
    37a6:	89 e0       	ldi	r24, 0x09	; 9
    37a8:	0e 94 de 08 	call	0x11bc	; 0x11bc <readScoreFromEEPROM(unsigned char)>
    37ac:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <showScore(unsigned int)>
    37b0:	83 cf       	rjmp	.-250    	; 0x36b8 <main+0x1414>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:785
  if (contGame) {
    strip.clear();
    gameFlappyLed();
  } else {
    flappyLedscore = 0;
    contGame = true;
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	80 93 1e 3a 	sts	0x3A1E, r24	; 0x803a1e <contGame>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:786
    strip.clear();
    37b8:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyNeoPixel::clear() [clone .constprop.10]>
    37bc:	61 ce       	rjmp	.-830    	; 0x3480 <main+0x11dc>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:858
        for ( uint8_t column = 0; column < 10; column++ ) {

          // allow or not to move left and right
          if ((pgm_read_byte_near (actualTetromino[0] + x) + (tetrominoPos - 1)) == tetrominoInPos [row][column]) tetrominoMoveLeft = false;

          if ((pgm_read_byte_near (actualTetromino[0] + x) + (tetrominoPos + 1)) == tetrominoInPos [row][column]) tetrominoMoveRight = false;
    37be:	a1 2c       	mov	r10, r1
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:860

          if (tetrominoRotation != tetrominoLastRotation) {// only if rotation happen the tetromino is checked and positioned in a valid place
    37c0:	b9 10       	cpse	r11, r9
    37c2:	2b cd       	rjmp	.-1450   	; 0x321a <main+0xf76>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:874
              if ((pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos) == tetrominoInPos [row][column]) tetrominoPos++;
            }
          } else {
            // checks if the tetromino touched another or the bottom floor

            if ((pgm_read_byte_near (actualTetromino[0] + x) + (tetrominoPos + 10)) == tetrominoInPos [row][column] || (pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos) > 89) {
    37c4:	64 91       	lpm	r22, Z
    37c6:	a7 01       	movw	r20, r14
    37c8:	46 5f       	subi	r20, 0xF6	; 246
    37ca:	5f 4f       	sbci	r21, 0xFF	; 255
    37cc:	46 0f       	add	r20, r22
    37ce:	51 1d       	adc	r21, r1
    37d0:	84 17       	cp	r24, r20
    37d2:	95 07       	cpc	r25, r21
    37d4:	41 f0       	breq	.+16     	; 0x37e6 <main+0x1542>
    37d6:	84 91       	lpm	r24, Z
    37d8:	8e 0d       	add	r24, r14
    37da:	9f 2d       	mov	r25, r15
    37dc:	91 1d       	adc	r25, r1
    37de:	8a 35       	cpi	r24, 0x5A	; 90
    37e0:	91 05       	cpc	r25, r1
    37e2:	0c f4       	brge	.+2      	; 0x37e6 <main+0x1542>
    37e4:	34 cd       	rjmp	.-1432   	; 0x324e <main+0xfaa>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:877
              tetrominoStop = true;

              if ((pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos) < 9) {//  if its stops on the top row game is over
    37e6:	84 91       	lpm	r24, Z
    37e8:	8e 0d       	add	r24, r14
    37ea:	9f 2d       	mov	r25, r15
    37ec:	91 1d       	adc	r25, r1
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:875
            }
          } else {
            // checks if the tetromino touched another or the bottom floor

            if ((pgm_read_byte_near (actualTetromino[0] + x) + (tetrominoPos + 10)) == tetrominoInPos [row][column] || (pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos) > 89) {
              tetrominoStop = true;
    37ee:	c5 53       	subi	r28, 0x35	; 53
    37f0:	df 4f       	sbci	r29, 0xFF	; 255
    37f2:	88 80       	ld	r8, Y
    37f4:	cb 5c       	subi	r28, 0xCB	; 203
    37f6:	d0 40       	sbci	r29, 0x00	; 0
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:877

              if ((pgm_read_byte_near (actualTetromino[0] + x) + tetrominoPos) < 9) {//  if its stops on the top row game is over
    37f8:	09 97       	sbiw	r24, 0x09	; 9
    37fa:	0c f0       	brlt	.+2      	; 0x37fe <main+0x155a>
    37fc:	28 cd       	rjmp	.-1456   	; 0x324e <main+0xfaa>
main():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:878
                ledtrisLives = 0;
    37fe:	cf 52       	subi	r28, 0x2F	; 47
    3800:	df 4f       	sbci	r29, 0xFF	; 255
    3802:	18 82       	st	Y, r1
    3804:	c1 5d       	subi	r28, 0xD1	; 209
    3806:	d0 40       	sbci	r29, 0x00	; 0
    3808:	2a cd       	rjmp	.-1452   	; 0x325e <main+0xfba>
gameLedTris():
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:894
    }

    //The tetromino3B looks odd if not moved one place when rotated
    if (tetrominoRotation != tetrominoLastRotation && actualTetromino[0] == tetromino3B && tetrominoMoveLeft) tetrominoPos--;

    if (tetrominoRotation != tetrominoLastRotation && actualTetromino[0] == tetromino3A && tetrominoMoveRight) tetrominoPos++;
    380a:	f0 e5       	ldi	r31, 0x50	; 80
    380c:	2f 16       	cp	r2, r31
    380e:	f2 e0       	ldi	r31, 0x02	; 2
    3810:	3f 06       	cpc	r3, r31
    3812:	09 f0       	breq	.+2      	; 0x3816 <main+0x1572>
    3814:	48 cb       	rjmp	.-2416   	; 0x2ea6 <main+0xc02>
    3816:	aa 20       	and	r10, r10
    3818:	09 f4       	brne	.+2      	; 0x381c <main+0x1578>
    381a:	45 cb       	rjmp	.-2422   	; 0x2ea6 <main+0xc02>
    381c:	2f ef       	ldi	r18, 0xFF	; 255
    381e:	e2 1a       	sub	r14, r18
    3820:	f2 0a       	sbc	r15, r18
    3822:	41 cb       	rjmp	.-2430   	; 0x2ea6 <main+0xc02>
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:897

    //Here it draws the screen
    if (tetrominoPos != tetrominoLastPos || tetrominoRotation != tetrominoLastRotation) {
    3824:	ec 14       	cp	r14, r12
    3826:	fd 04       	cpc	r15, r13
    3828:	09 f4       	brne	.+2      	; 0x382c <main+0x1588>
    382a:	56 cb       	rjmp	.-2388   	; 0x2ed8 <main+0xc34>
    382c:	3c cb       	rjmp	.-2440   	; 0x2ea6 <main+0xc02>

0000382e <_GLOBAL__sub_I_levelText1>:
_GLOBAL__sub_I_levelText1():
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:53

#include "tinyNeoPixel_Static.h"

// Constructor when length, pin and type are known at compile-time:
tinyNeoPixel::tinyNeoPixel(uint16_t n, uint8_t p, neoPixelType t, uint8_t *pxl) :
  brightness(0), pixels(pxl), endTime(0) {
    382e:	ea e8       	ldi	r30, 0x8A	; 138
    3830:	fb e3       	ldi	r31, 0x3B	; 59
    3832:	15 82       	std	Z+5, r1	; 0x05
    3834:	89 e3       	ldi	r24, 0x39	; 57
    3836:	9a e3       	ldi	r25, 0x3A	; 58
    3838:	86 83       	std	Z+6, r24	; 0x06
    383a:	97 83       	std	Z+7, r25	; 0x07
    383c:	14 86       	std	Z+12, r1	; 0x0c
    383e:	15 86       	std	Z+13, r1	; 0x0d
    3840:	16 86       	std	Z+14, r1	; 0x0e
    3842:	17 86       	std	Z+15, r1	; 0x0f
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:55
  // boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
  wOffset = (t >> 6) & 0b11; // See notes in header file
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	83 87       	std	Z+11, r24	; 0x0b
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:56
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    3848:	80 87       	std	Z+8, r24	; 0x08
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:57
  gOffset = (t >> 2) & 0b11;
    384a:	11 86       	std	Z+9, r1	; 0x09
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:58
  bOffset =  t       & 0b11;
    384c:	92 e0       	ldi	r25, 0x02	; 2
    384e:	92 87       	std	Z+10, r25	; 0x0a
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:59
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    3850:	2c e2       	ldi	r18, 0x2C	; 44
    3852:	31 e0       	ldi	r19, 0x01	; 1
    3854:	22 83       	std	Z+2, r18	; 0x02
    3856:	33 83       	std	Z+3, r19	; 0x03
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:60
  numLEDs = n;
    3858:	24 e6       	ldi	r18, 0x64	; 100
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	20 83       	st	Z, r18
    385e:	31 83       	std	Z+1, r19	; 0x01
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:61
  pin = p;
    3860:	97 e0       	ldi	r25, 0x07	; 7
    3862:	94 83       	std	Z+4, r25	; 0x04
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:62
  port    = portOutputRegister(digitalPinToPort(p));
    3864:	24 e2       	ldi	r18, 0x24	; 36
    3866:	34 e0       	ldi	r19, 0x04	; 4
    3868:	20 8b       	std	Z+16, r18	; 0x10
    386a:	31 8b       	std	Z+17, r19	; 0x11
C:\Users\gross\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.4\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:63
  pinMask = digitalPinToBitMask(p);
    386c:	82 8b       	std	Z+18, r24	; 0x12
C:\Users\gross\OneDrive\Arduino\LEDBOY\LEDBOY Games\LedBoyGamePackA_2.2/LedBoyGamePackA_2.2.ino:1748
    sleep_disable();
    PORTA.PIN3CTRL &= ~ PORT_ISC_BOTHEDGES_gc; // deattach interrupt
    PORTA.OUT &= ~PIN4_bm;// P CHANNEL mosfet low to activate
    shouldWakeUp = true;
  }
}
    386e:	08 95       	ret

00003870 <random_r>:
random_r():
    3870:	8f 92       	push	r8
    3872:	9f 92       	push	r9
    3874:	af 92       	push	r10
    3876:	bf 92       	push	r11
    3878:	cf 92       	push	r12
    387a:	df 92       	push	r13
    387c:	ef 92       	push	r14
    387e:	ff 92       	push	r15
    3880:	cf 93       	push	r28
    3882:	df 93       	push	r29
    3884:	ec 01       	movw	r28, r24
    3886:	68 81       	ld	r22, Y
    3888:	79 81       	ldd	r23, Y+1	; 0x01
    388a:	8a 81       	ldd	r24, Y+2	; 0x02
    388c:	9b 81       	ldd	r25, Y+3	; 0x03
    388e:	61 15       	cp	r22, r1
    3890:	71 05       	cpc	r23, r1
    3892:	81 05       	cpc	r24, r1
    3894:	91 05       	cpc	r25, r1
    3896:	21 f4       	brne	.+8      	; 0x38a0 <random_r+0x30>
    3898:	64 e2       	ldi	r22, 0x24	; 36
    389a:	79 ed       	ldi	r23, 0xD9	; 217
    389c:	8b e5       	ldi	r24, 0x5B	; 91
    389e:	97 e0       	ldi	r25, 0x07	; 7
    38a0:	2d e1       	ldi	r18, 0x1D	; 29
    38a2:	33 ef       	ldi	r19, 0xF3	; 243
    38a4:	41 e0       	ldi	r20, 0x01	; 1
    38a6:	50 e0       	ldi	r21, 0x00	; 0
    38a8:	9d d0       	rcall	.+314    	; 0x39e4 <__divmodsi4>
    38aa:	49 01       	movw	r8, r18
    38ac:	5a 01       	movw	r10, r20
    38ae:	9b 01       	movw	r18, r22
    38b0:	ac 01       	movw	r20, r24
    38b2:	a7 ea       	ldi	r26, 0xA7	; 167
    38b4:	b1 e4       	ldi	r27, 0x41	; 65
    38b6:	b2 d0       	rcall	.+356    	; 0x3a1c <__muluhisi3>
    38b8:	6b 01       	movw	r12, r22
    38ba:	7c 01       	movw	r14, r24
    38bc:	ac ee       	ldi	r26, 0xEC	; 236
    38be:	b4 ef       	ldi	r27, 0xF4	; 244
    38c0:	a5 01       	movw	r20, r10
    38c2:	94 01       	movw	r18, r8
    38c4:	b7 d0       	rcall	.+366    	; 0x3a34 <__mulohisi3>
    38c6:	c6 0e       	add	r12, r22
    38c8:	d7 1e       	adc	r13, r23
    38ca:	e8 1e       	adc	r14, r24
    38cc:	f9 1e       	adc	r15, r25
    38ce:	f7 fe       	sbrs	r15, 7
    38d0:	06 c0       	rjmp	.+12     	; 0x38de <random_r+0x6e>
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	c8 1a       	sub	r12, r24
    38d6:	d1 08       	sbc	r13, r1
    38d8:	e1 08       	sbc	r14, r1
    38da:	80 e8       	ldi	r24, 0x80	; 128
    38dc:	f8 0a       	sbc	r15, r24
    38de:	c8 82       	st	Y, r12
    38e0:	d9 82       	std	Y+1, r13	; 0x01
    38e2:	ea 82       	std	Y+2, r14	; 0x02
    38e4:	fb 82       	std	Y+3, r15	; 0x03
    38e6:	c7 01       	movw	r24, r14
    38e8:	b6 01       	movw	r22, r12
    38ea:	9f 77       	andi	r25, 0x7F	; 127
    38ec:	df 91       	pop	r29
    38ee:	cf 91       	pop	r28
    38f0:	ff 90       	pop	r15
    38f2:	ef 90       	pop	r14
    38f4:	df 90       	pop	r13
    38f6:	cf 90       	pop	r12
    38f8:	bf 90       	pop	r11
    38fa:	af 90       	pop	r10
    38fc:	9f 90       	pop	r9
    38fe:	8f 90       	pop	r8
    3900:	08 95       	ret

00003902 <random>:
random():
    3902:	8f 92       	push	r8
    3904:	9f 92       	push	r9
    3906:	af 92       	push	r10
    3908:	bf 92       	push	r11
    390a:	cf 92       	push	r12
    390c:	df 92       	push	r13
    390e:	ef 92       	push	r14
    3910:	ff 92       	push	r15
    3912:	60 91 21 3a 	lds	r22, 0x3A21	; 0x803a21 <next>
    3916:	70 91 22 3a 	lds	r23, 0x3A22	; 0x803a22 <next+0x1>
    391a:	80 91 23 3a 	lds	r24, 0x3A23	; 0x803a23 <next+0x2>
    391e:	90 91 24 3a 	lds	r25, 0x3A24	; 0x803a24 <next+0x3>
    3922:	61 15       	cp	r22, r1
    3924:	71 05       	cpc	r23, r1
    3926:	81 05       	cpc	r24, r1
    3928:	91 05       	cpc	r25, r1
    392a:	21 f4       	brne	.+8      	; 0x3934 <random+0x32>
    392c:	64 e2       	ldi	r22, 0x24	; 36
    392e:	79 ed       	ldi	r23, 0xD9	; 217
    3930:	8b e5       	ldi	r24, 0x5B	; 91
    3932:	97 e0       	ldi	r25, 0x07	; 7
    3934:	2d e1       	ldi	r18, 0x1D	; 29
    3936:	33 ef       	ldi	r19, 0xF3	; 243
    3938:	41 e0       	ldi	r20, 0x01	; 1
    393a:	50 e0       	ldi	r21, 0x00	; 0
    393c:	53 d0       	rcall	.+166    	; 0x39e4 <__divmodsi4>
    393e:	49 01       	movw	r8, r18
    3940:	5a 01       	movw	r10, r20
    3942:	9b 01       	movw	r18, r22
    3944:	ac 01       	movw	r20, r24
    3946:	a7 ea       	ldi	r26, 0xA7	; 167
    3948:	b1 e4       	ldi	r27, 0x41	; 65
    394a:	68 d0       	rcall	.+208    	; 0x3a1c <__muluhisi3>
    394c:	6b 01       	movw	r12, r22
    394e:	7c 01       	movw	r14, r24
    3950:	ac ee       	ldi	r26, 0xEC	; 236
    3952:	b4 ef       	ldi	r27, 0xF4	; 244
    3954:	a5 01       	movw	r20, r10
    3956:	94 01       	movw	r18, r8
    3958:	6d d0       	rcall	.+218    	; 0x3a34 <__mulohisi3>
    395a:	c6 0e       	add	r12, r22
    395c:	d7 1e       	adc	r13, r23
    395e:	e8 1e       	adc	r14, r24
    3960:	f9 1e       	adc	r15, r25
    3962:	f7 fe       	sbrs	r15, 7
    3964:	06 c0       	rjmp	.+12     	; 0x3972 <random+0x70>
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	c8 1a       	sub	r12, r24
    396a:	d1 08       	sbc	r13, r1
    396c:	e1 08       	sbc	r14, r1
    396e:	80 e8       	ldi	r24, 0x80	; 128
    3970:	f8 0a       	sbc	r15, r24
    3972:	c0 92 21 3a 	sts	0x3A21, r12	; 0x803a21 <next>
    3976:	d0 92 22 3a 	sts	0x3A22, r13	; 0x803a22 <next+0x1>
    397a:	e0 92 23 3a 	sts	0x3A23, r14	; 0x803a23 <next+0x2>
    397e:	f0 92 24 3a 	sts	0x3A24, r15	; 0x803a24 <next+0x3>
    3982:	c7 01       	movw	r24, r14
    3984:	b6 01       	movw	r22, r12
    3986:	9f 77       	andi	r25, 0x7F	; 127
    3988:	ff 90       	pop	r15
    398a:	ef 90       	pop	r14
    398c:	df 90       	pop	r13
    398e:	cf 90       	pop	r12
    3990:	bf 90       	pop	r11
    3992:	af 90       	pop	r10
    3994:	9f 90       	pop	r9
    3996:	8f 90       	pop	r8
    3998:	08 95       	ret

0000399a <srandom>:
srandom():
    399a:	60 93 21 3a 	sts	0x3A21, r22	; 0x803a21 <next>
    399e:	70 93 22 3a 	sts	0x3A22, r23	; 0x803a22 <next+0x1>
    39a2:	80 93 23 3a 	sts	0x3A23, r24	; 0x803a23 <next+0x2>
    39a6:	90 93 24 3a 	sts	0x3A24, r25	; 0x803a24 <next+0x3>
    39aa:	08 95       	ret

000039ac <eeprom_read_byte>:
eeprom_read_byte():
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eerd_byte.S:51
    39ac:	03 d0       	rcall	.+6      	; 0x39b4 <eeprom_mapen>
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eerd_byte.S:52
    39ae:	80 81       	ld	r24, Z
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eerd_byte.S:53
    39b0:	99 27       	eor	r25, r25
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eerd_byte.S:54
    39b2:	08 95       	ret

000039b4 <eeprom_mapen>:
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eerd_byte.S:83
    39b4:	fc 01       	movw	r30, r24
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eerd_byte.S:84
    39b6:	e0 50       	subi	r30, 0x00	; 0
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eerd_byte.S:85
    39b8:	fc 4e       	sbci	r31, 0xEC	; 236
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eerd_byte.S:87
    39ba:	08 95       	ret

000039bc <eeprom_write_byte>:
eeprom_write_byte():
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:42
    39bc:	26 2f       	mov	r18, r22

000039be <eeprom_write_r18>:
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:72
    39be:	af 93       	push	r26
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:73
    39c0:	bf 93       	push	r27
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:77
    39c2:	e0 e0       	ldi	r30, 0x00	; 0
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:78
    39c4:	f0 e1       	ldi	r31, 0x10	; 16
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:81
    39c6:	32 81       	ldd	r19, Z+2	; 0x02
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:82
    39c8:	31 fd       	sbrc	r19, 1
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:83
    39ca:	fd cf       	rjmp	.-6      	; 0x39c6 <eeprom_write_r18+0x8>
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:142
    39cc:	dc 01       	movw	r26, r24
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:143
    39ce:	a0 50       	subi	r26, 0x00	; 0
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:144
    39d0:	bc 4e       	sbci	r27, 0xEC	; 236
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:145
    39d2:	2c 93       	st	X, r18
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:151
    39d4:	3d e9       	ldi	r19, 0x9D	; 157
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:152
    39d6:	34 bf       	out	0x34, r19	; 52
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:156
    39d8:	23 e0       	ldi	r18, 0x03	; 3
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:158
    39da:	20 83       	st	Z, r18
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:169
    39dc:	01 96       	adiw	r24, 0x01	; 1
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:173
    39de:	bf 91       	pop	r27
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:174
    39e0:	af 91       	pop	r26
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1614/../../../../libc/misc/eewr_byte.S:177
    39e2:	08 95       	ret

000039e4 <__divmodsi4>:
__divmodsi4():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    39e4:	05 2e       	mov	r0, r21
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    39e6:	97 fb       	bst	r25, 7
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    39e8:	16 f4       	brtc	.+4      	; 0x39ee <__divmodsi4+0xa>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    39ea:	00 94       	com	r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    39ec:	0f d0       	rcall	.+30     	; 0x3a0c <__negsi2>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    39ee:	57 fd       	sbrc	r21, 7
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    39f0:	05 d0       	rcall	.+10     	; 0x39fc <__divmodsi4_neg2>
    39f2:	24 d0       	rcall	.+72     	; 0x3a3c <__udivmodsi4>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    39f4:	07 fc       	sbrc	r0, 7
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    39f6:	02 d0       	rcall	.+4      	; 0x39fc <__divmodsi4_neg2>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    39f8:	46 f4       	brtc	.+16     	; 0x3a0a <__divmodsi4_exit>
    39fa:	08 c0       	rjmp	.+16     	; 0x3a0c <__negsi2>

000039fc <__divmodsi4_neg2>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    39fc:	50 95       	com	r21
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    39fe:	40 95       	com	r20
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    3a00:	30 95       	com	r19
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    3a02:	21 95       	neg	r18
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    3a04:	3f 4f       	sbci	r19, 0xFF	; 255
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    3a06:	4f 4f       	sbci	r20, 0xFF	; 255
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    3a08:	5f 4f       	sbci	r21, 0xFF	; 255

00003a0a <__divmodsi4_exit>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    3a0a:	08 95       	ret

00003a0c <__negsi2>:
__negsi2():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    3a0c:	90 95       	com	r25
    3a0e:	80 95       	com	r24
    3a10:	70 95       	com	r23
    3a12:	61 95       	neg	r22
    3a14:	7f 4f       	sbci	r23, 0xFF	; 255
    3a16:	8f 4f       	sbci	r24, 0xFF	; 255
    3a18:	9f 4f       	sbci	r25, 0xFF	; 255
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    3a1a:	08 95       	ret

00003a1c <__muluhisi3>:
__muluhisi3():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    3a1c:	31 d0       	rcall	.+98     	; 0x3a80 <__umulhisi3>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    3a1e:	a5 9f       	mul	r26, r21
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    3a20:	90 0d       	add	r25, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    3a22:	b4 9f       	mul	r27, r20
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    3a24:	90 0d       	add	r25, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    3a26:	a4 9f       	mul	r26, r20
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    3a28:	80 0d       	add	r24, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    3a2a:	91 1d       	adc	r25, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    3a2c:	11 24       	eor	r1, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    3a2e:	08 95       	ret

00003a30 <__mulshisi3>:
__mulshisi3():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    3a30:	b7 ff       	sbrs	r27, 7
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    3a32:	f4 cf       	rjmp	.-24     	; 0x3a1c <__muluhisi3>

00003a34 <__mulohisi3>:
__mulohisi3():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    3a34:	f3 df       	rcall	.-26     	; 0x3a1c <__muluhisi3>
    3a36:	82 1b       	sub	r24, r18
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    3a38:	93 0b       	sbc	r25, r19
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    3a3a:	08 95       	ret

00003a3c <__udivmodsi4>:
__udivmodsi4():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    3a3c:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    3a3e:	1a 2e       	mov	r1, r26
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    3a40:	aa 1b       	sub	r26, r26
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    3a42:	bb 1b       	sub	r27, r27
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    3a44:	fd 01       	movw	r30, r26
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    3a46:	0d c0       	rjmp	.+26     	; 0x3a62 <__udivmodsi4_ep>

00003a48 <__udivmodsi4_loop>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    3a48:	aa 1f       	adc	r26, r26
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    3a4a:	bb 1f       	adc	r27, r27
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    3a4c:	ee 1f       	adc	r30, r30
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    3a4e:	ff 1f       	adc	r31, r31
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    3a50:	a2 17       	cp	r26, r18
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    3a52:	b3 07       	cpc	r27, r19
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    3a54:	e4 07       	cpc	r30, r20
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    3a56:	f5 07       	cpc	r31, r21
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    3a58:	20 f0       	brcs	.+8      	; 0x3a62 <__udivmodsi4_ep>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3a5a:	a2 1b       	sub	r26, r18
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    3a5c:	b3 0b       	sbc	r27, r19
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    3a5e:	e4 0b       	sbc	r30, r20
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    3a60:	f5 0b       	sbc	r31, r21

00003a62 <__udivmodsi4_ep>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    3a62:	66 1f       	adc	r22, r22
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    3a64:	77 1f       	adc	r23, r23
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    3a66:	88 1f       	adc	r24, r24
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    3a68:	99 1f       	adc	r25, r25
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3a6a:	1a 94       	dec	r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    3a6c:	69 f7       	brne	.-38     	; 0x3a48 <__udivmodsi4_loop>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    3a6e:	60 95       	com	r22
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    3a70:	70 95       	com	r23
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    3a72:	80 95       	com	r24
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    3a74:	90 95       	com	r25
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    3a76:	9b 01       	movw	r18, r22
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    3a78:	ac 01       	movw	r20, r24
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3a7a:	bd 01       	movw	r22, r26
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    3a7c:	cf 01       	movw	r24, r30
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    3a7e:	08 95       	ret

00003a80 <__umulhisi3>:
__umulhisi3():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    3a80:	a2 9f       	mul	r26, r18
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    3a82:	b0 01       	movw	r22, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    3a84:	b3 9f       	mul	r27, r19
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    3a86:	c0 01       	movw	r24, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    3a88:	a3 9f       	mul	r26, r19
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    3a8a:	70 0d       	add	r23, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    3a8c:	81 1d       	adc	r24, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    3a8e:	11 24       	eor	r1, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    3a90:	91 1d       	adc	r25, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    3a92:	b2 9f       	mul	r27, r18
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    3a94:	70 0d       	add	r23, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    3a96:	81 1d       	adc	r24, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    3a98:	11 24       	eor	r1, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    3a9a:	91 1d       	adc	r25, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    3a9c:	08 95       	ret

00003a9e <__udivmodqi4>:
__udivmodqi4():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    3a9e:	99 1b       	sub	r25, r25
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    3aa0:	79 e0       	ldi	r23, 0x09	; 9
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    3aa2:	04 c0       	rjmp	.+8      	; 0x3aac <__udivmodqi4_ep>

00003aa4 <__udivmodqi4_loop>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    3aa4:	99 1f       	adc	r25, r25
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    3aa6:	96 17       	cp	r25, r22
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    3aa8:	08 f0       	brcs	.+2      	; 0x3aac <__udivmodqi4_ep>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    3aaa:	96 1b       	sub	r25, r22

00003aac <__udivmodqi4_ep>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    3aac:	88 1f       	adc	r24, r24
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    3aae:	7a 95       	dec	r23
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    3ab0:	c9 f7       	brne	.-14     	; 0x3aa4 <__udivmodqi4_loop>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    3ab2:	80 95       	com	r24
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    3ab4:	08 95       	ret

00003ab6 <__udivmodhi4>:
__udivmodhi4():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    3ab6:	aa 1b       	sub	r26, r26
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    3ab8:	bb 1b       	sub	r27, r27
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    3aba:	51 e1       	ldi	r21, 0x11	; 17
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    3abc:	07 c0       	rjmp	.+14     	; 0x3acc <__udivmodhi4_ep>

00003abe <__udivmodhi4_loop>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    3abe:	aa 1f       	adc	r26, r26
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    3ac0:	bb 1f       	adc	r27, r27
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    3ac2:	a6 17       	cp	r26, r22
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    3ac4:	b7 07       	cpc	r27, r23
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    3ac6:	10 f0       	brcs	.+4      	; 0x3acc <__udivmodhi4_ep>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    3ac8:	a6 1b       	sub	r26, r22
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    3aca:	b7 0b       	sbc	r27, r23

00003acc <__udivmodhi4_ep>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    3acc:	88 1f       	adc	r24, r24
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    3ace:	99 1f       	adc	r25, r25
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    3ad0:	5a 95       	dec	r21
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    3ad2:	a9 f7       	brne	.-22     	; 0x3abe <__udivmodhi4_loop>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    3ad4:	80 95       	com	r24
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    3ad6:	90 95       	com	r25
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    3ad8:	bc 01       	movw	r22, r24
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    3ada:	cd 01       	movw	r24, r26
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    3adc:	08 95       	ret

00003ade <__divmodhi4>:
__divmodhi4():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    3ade:	97 fb       	bst	r25, 7
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    3ae0:	07 2e       	mov	r0, r23
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    3ae2:	16 f4       	brtc	.+4      	; 0x3ae8 <__divmodhi4+0xa>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    3ae4:	00 94       	com	r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    3ae6:	06 d0       	rcall	.+12     	; 0x3af4 <__divmodhi4_neg1>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    3ae8:	77 fd       	sbrc	r23, 7
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    3aea:	08 d0       	rcall	.+16     	; 0x3afc <__divmodhi4_neg2>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    3aec:	e4 df       	rcall	.-56     	; 0x3ab6 <__udivmodhi4>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    3aee:	07 fc       	sbrc	r0, 7
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    3af0:	05 d0       	rcall	.+10     	; 0x3afc <__divmodhi4_neg2>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    3af2:	3e f4       	brtc	.+14     	; 0x3b02 <__divmodhi4_exit>

00003af4 <__divmodhi4_neg1>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    3af4:	90 95       	com	r25
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    3af6:	81 95       	neg	r24
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    3af8:	9f 4f       	sbci	r25, 0xFF	; 255
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    3afa:	08 95       	ret

00003afc <__divmodhi4_neg2>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    3afc:	70 95       	com	r23
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    3afe:	61 95       	neg	r22
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    3b00:	7f 4f       	sbci	r23, 0xFF	; 255

00003b02 <__divmodhi4_exit>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    3b02:	08 95       	ret

00003b04 <__tablejump2__>:
__tablejump2__():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    3b04:	ee 0f       	add	r30, r30
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    3b06:	ff 1f       	adc	r31, r31
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    3b08:	05 90       	lpm	r0, Z+
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    3b0a:	f4 91       	lpm	r31, Z
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    3b0c:	e0 2d       	mov	r30, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    3b0e:	09 94       	ijmp

00003b10 <memset>:
memset():
    3b10:	dc 01       	movw	r26, r24
    3b12:	01 c0       	rjmp	.+2      	; 0x3b16 <memset+0x6>
    3b14:	6d 93       	st	X+, r22
    3b16:	41 50       	subi	r20, 0x01	; 1
    3b18:	50 40       	sbci	r21, 0x00	; 0
    3b1a:	e0 f7       	brcc	.-8      	; 0x3b14 <memset+0x4>
    3b1c:	08 95       	ret

00003b1e <_exit>:
exit():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    3b1e:	f8 94       	cli

00003b20 <__stop_program>:
__stop_program():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    3b20:	ff cf       	rjmp	.-2      	; 0x3b20 <__stop_program>
